
Hoodloader2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00003ec2  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec2  00003000  00003000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000018  00003fa0  00003fa0  0000102a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  00003fe0  00003fe0  00001042  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  00003ff8  00003ff8  0000105a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          00000054  00800194  00800194  00001062  2**0
                  ALLOC
  6 .noinit       00000001  008001e8  008001e8  00001062  2**0
                  ALLOC
  7 .stab         00000954  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      000000e2  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00001a9a  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000003b0  00000000  00000000  00001ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00005991  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001682  00000000  00000000  000077f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002953  00000000  00000000  00008e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000009a4  00000000  00000000  0000b7c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a52  00000000  00000000  0000c16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00003e2a  00000000  00000000  0000ebbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005e8  00000000  00000000  000129e8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003000 <__vectors>:
    3000:	39 c0       	rjmp	.+114    	; 0x3074 <__ctors_end>
    3002:	00 00       	nop
    3004:	68 c0       	rjmp	.+208    	; 0x30d6 <__bad_interrupt>
    3006:	00 00       	nop
    3008:	66 c0       	rjmp	.+204    	; 0x30d6 <__bad_interrupt>
    300a:	00 00       	nop
    300c:	64 c0       	rjmp	.+200    	; 0x30d6 <__bad_interrupt>
    300e:	00 00       	nop
    3010:	62 c0       	rjmp	.+196    	; 0x30d6 <__bad_interrupt>
    3012:	00 00       	nop
    3014:	60 c0       	rjmp	.+192    	; 0x30d6 <__bad_interrupt>
    3016:	00 00       	nop
    3018:	5e c0       	rjmp	.+188    	; 0x30d6 <__bad_interrupt>
    301a:	00 00       	nop
    301c:	5c c0       	rjmp	.+184    	; 0x30d6 <__bad_interrupt>
    301e:	00 00       	nop
    3020:	5a c0       	rjmp	.+180    	; 0x30d6 <__bad_interrupt>
    3022:	00 00       	nop
    3024:	58 c0       	rjmp	.+176    	; 0x30d6 <__bad_interrupt>
    3026:	00 00       	nop
    3028:	56 c0       	rjmp	.+172    	; 0x30d6 <__bad_interrupt>
    302a:	00 00       	nop
    302c:	50 c5       	rjmp	.+2720   	; 0x3ace <__vector_11>
    302e:	00 00       	nop
    3030:	52 c0       	rjmp	.+164    	; 0x30d6 <__bad_interrupt>
    3032:	00 00       	nop
    3034:	50 c0       	rjmp	.+160    	; 0x30d6 <__bad_interrupt>
    3036:	00 00       	nop
    3038:	4e c0       	rjmp	.+156    	; 0x30d6 <__bad_interrupt>
    303a:	00 00       	nop
    303c:	bc c2       	rjmp	.+1400   	; 0x35b6 <__vector_15>
    303e:	00 00       	nop
    3040:	4a c0       	rjmp	.+148    	; 0x30d6 <__bad_interrupt>
    3042:	00 00       	nop
    3044:	48 c0       	rjmp	.+144    	; 0x30d6 <__bad_interrupt>
    3046:	00 00       	nop
    3048:	46 c0       	rjmp	.+140    	; 0x30d6 <__bad_interrupt>
    304a:	00 00       	nop
    304c:	44 c0       	rjmp	.+136    	; 0x30d6 <__bad_interrupt>
    304e:	00 00       	nop
    3050:	42 c0       	rjmp	.+132    	; 0x30d6 <__bad_interrupt>
    3052:	00 00       	nop
    3054:	40 c0       	rjmp	.+128    	; 0x30d6 <__bad_interrupt>
    3056:	00 00       	nop
    3058:	3e c0       	rjmp	.+124    	; 0x30d6 <__bad_interrupt>
    305a:	00 00       	nop
    305c:	aa c3       	rjmp	.+1876   	; 0x37b2 <__vector_23>
    305e:	00 00       	nop
    3060:	3a c0       	rjmp	.+116    	; 0x30d6 <__bad_interrupt>
    3062:	00 00       	nop
    3064:	38 c0       	rjmp	.+112    	; 0x30d6 <__bad_interrupt>
    3066:	00 00       	nop
    3068:	36 c0       	rjmp	.+108    	; 0x30d6 <__bad_interrupt>
    306a:	00 00       	nop
    306c:	34 c0       	rjmp	.+104    	; 0x30d6 <__bad_interrupt>
    306e:	00 00       	nop
    3070:	32 c0       	rjmp	.+100    	; 0x30d6 <__bad_interrupt>
    3072:	00 00       	nop

00003074 <__ctors_end>:
    3074:	11 24       	eor	r1, r1
    3076:	1f be       	out	0x3f, r1	; 63
    3078:	cf ef       	ldi	r28, 0xFF	; 255
    307a:	d2 e0       	ldi	r29, 0x02	; 2
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	cd bf       	out	0x3d, r28	; 61

00003080 <Application_Jump_Check>:
/** Special startup routine to check if the bootloader was started via a watchdog reset, and if the magic application
 *  start key has been loaded into \ref MagicBootKey. If the bootloader started via the watchdog and the key is valid,
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
    3080:	04 b6       	in	r0, 0x34	; 52
    3082:	03 fe       	sbrs	r0, 3
    3084:	13 c0       	rjmp	.+38     	; 0x30ac <__do_copy_data>
	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
    3086:	80 91 e8 01 	lds	r24, 0x01E8
    308a:	82 34       	cpi	r24, 0x42	; 66
    308c:	79 f4       	brne	.+30     	; 0x30ac <__do_copy_data>
		/* If a request has been made to jump to the user application, honor it */
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1 << WDRF);
    308e:	84 b7       	in	r24, 0x34	; 52
    3090:	87 7f       	andi	r24, 0xF7	; 247
    3092:	84 bf       	out	0x34, r24	; 52
		wdt_disable();
    3094:	88 e1       	ldi	r24, 0x18	; 24
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	80 93 60 00 	sts	0x0060, r24
    309e:	10 92 60 00 	sts	0x0060, r1
    30a2:	0f be       	out	0x3f, r0	; 63

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
    30a4:	10 92 e8 01 	sts	0x01E8, r1

		// cppcheck-suppress constStatement
		//((void(*)(void))0x0000)();
		__asm__ volatile("jmp 0x0000");
    30a8:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000030ac <__do_copy_data>:
    30ac:	11 e0       	ldi	r17, 0x01	; 1
    30ae:	a0 e0       	ldi	r26, 0x00	; 0
    30b0:	b1 e0       	ldi	r27, 0x01	; 1
    30b2:	e2 ec       	ldi	r30, 0xC2	; 194
    30b4:	fe e3       	ldi	r31, 0x3E	; 62
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <__do_copy_data+0x10>
    30b8:	05 90       	lpm	r0, Z+
    30ba:	0d 92       	st	X+, r0
    30bc:	a4 39       	cpi	r26, 0x94	; 148
    30be:	b1 07       	cpc	r27, r17
    30c0:	d9 f7       	brne	.-10     	; 0x30b8 <__do_copy_data+0xc>

000030c2 <__do_clear_bss>:
    30c2:	11 e0       	ldi	r17, 0x01	; 1
    30c4:	a4 e9       	ldi	r26, 0x94	; 148
    30c6:	b1 e0       	ldi	r27, 0x01	; 1
    30c8:	01 c0       	rjmp	.+2      	; 0x30cc <.do_clear_bss_start>

000030ca <.do_clear_bss_loop>:
    30ca:	1d 92       	st	X+, r1

000030cc <.do_clear_bss_start>:
    30cc:	a8 3e       	cpi	r26, 0xE8	; 232
    30ce:	b1 07       	cpc	r27, r17
    30d0:	e1 f7       	brne	.-8      	; 0x30ca <.do_clear_bss_loop>
    30d2:	35 d0       	rcall	.+106    	; 0x313e <main>
    30d4:	f4 c6       	rjmp	.+3560   	; 0x3ebe <_exit>

000030d6 <__bad_interrupt>:
    30d6:	94 cf       	rjmp	.-216    	; 0x3000 <__vectors>

000030d8 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    30d8:	84 e0       	ldi	r24, 0x04	; 4
    30da:	80 93 e9 00 	sts	0x00E9, r24
    30de:	0d c0       	rjmp	.+26     	; 0x30fa <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    30e0:	80 91 e8 00 	lds	r24, 0x00E8
    30e4:	8b 77       	andi	r24, 0x7B	; 123
    30e6:	80 93 e8 00 	sts	0x00E8, r24
    30ea:	03 c0       	rjmp	.+6      	; 0x30f2 <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    30ec:	8e b3       	in	r24, 0x1e	; 30
    30ee:	88 23       	and	r24, r24
    30f0:	59 f0       	breq	.+22     	; 0x3108 <FetchNextCommandByte+0x30>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    30f2:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    30f6:	82 ff       	sbrs	r24, 2
    30f8:	f9 cf       	rjmp	.-14     	; 0x30ec <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    30fa:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    30fe:	85 ff       	sbrs	r24, 5
    3100:	ef cf       	rjmp	.-34     	; 0x30e0 <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3102:	80 91 f1 00 	lds	r24, 0x00F1
				return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
    3106:	08 95       	ret
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
				return 0;
    3108:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    310a:	08 95       	ret

0000310c <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    310c:	93 e0       	ldi	r25, 0x03	; 3
    310e:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3112:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    3116:	95 ff       	sbrs	r25, 5
    3118:	03 c0       	rjmp	.+6      	; 0x3120 <WriteNextResponseByte+0x14>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    311a:	80 93 f1 00 	sts	0x00F1, r24
    311e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3120:	90 91 e8 00 	lds	r25, 0x00E8
    3124:	9e 77       	andi	r25, 0x7E	; 126
    3126:	90 93 e8 00 	sts	0x00E8, r25
    312a:	03 c0       	rjmp	.+6      	; 0x3132 <WriteNextResponseByte+0x26>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    312c:	9e b3       	in	r25, 0x1e	; 30
    312e:	99 23       	and	r25, r25
    3130:	29 f0       	breq	.+10     	; 0x313c <WriteNextResponseByte+0x30>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3132:	90 91 e8 00 	lds	r25, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    3136:	90 ff       	sbrs	r25, 0
    3138:	f9 cf       	rjmp	.-14     	; 0x312c <WriteNextResponseByte+0x20>
    313a:	ef cf       	rjmp	.-34     	; 0x311a <WriteNextResponseByte+0xe>
    313c:	08 95       	ret

0000313e <main>:
/** Main program entry point. This routine configures the hardware required by the bootloader, then continuously
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
int main(void)
{
    313e:	cf 93       	push	r28
    3140:	df 93       	push	r29
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
    3146:	27 97       	sbiw	r28, 0x07	; 7
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    3152:	84 b7       	in	r24, 0x34	; 52
    3154:	87 7f       	andi	r24, 0xF7	; 247
    3156:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    3158:	88 e1       	ldi	r24, 0x18	; 24
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	80 93 60 00 	sts	0x0060, r24
    3162:	10 92 60 00 	sts	0x0060, r1
    3166:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	80 e8       	ldi	r24, 0x80	; 128
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	80 93 61 00 	sts	0x0061, r24
    3174:	90 93 61 00 	sts	0x0061, r25
    3178:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    317e:	12 e0       	ldi	r17, 0x02	; 2
    3180:	15 bf       	out	0x35, r17	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
    3182:	96 d4       	rcall	.+2348   	; 0x3ab0 <USB_Init>
    3184:	10 92 89 00 	sts	0x0089, r1

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	//TCCR0B = (1 << CS02);

	OCR1AH = 0;
    3188:	8a ef       	ldi	r24, 0xFA	; 250
	OCR1AL = 250;
    318a:	80 93 88 00 	sts	0x0088, r24
    318e:	10 93 6f 00 	sts	0x006F, r17
	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
    3192:	83 e0       	ldi	r24, 0x03	; 3
	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
    3194:	80 93 81 00 	sts	0x0081, r24
    3198:	8a b1       	in	r24, 0x0a	; 10

	// compacter setup for Leds, RX, TX, Reset Line
	ARDUINO_DDR |= LEDS_ALL_LEDS | (1 << PD3) | AVR_RESET_LINE_MASK;
    319a:	88 6b       	ori	r24, 0xB8	; 184
    319c:	8a b9       	out	0x0a, r24	; 10
    319e:	8b b1       	in	r24, 0x0b	; 11
	ARDUINO_PORT |= LEDS_ALL_LEDS | (1 << 2) | AVR_RESET_LINE_MASK;
    31a0:	84 6b       	ori	r24, 0xB4	; 180
    31a2:	8b b9       	out	0x0b, r24	; 11
    31a4:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    31a6:	13 e0       	ldi	r17, 0x03	; 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    31a8:	99 24       	eor	r9, r9
    31aa:	93 94       	inc	r9
    31ac:	69 e0       	ldi	r22, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
	}
	else if (Command == AVR109_COMMAND_ReadExtendedFuses)
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    31ae:	b6 2e       	mov	r11, r22
    31b0:	ea c1       	rjmp	.+980    	; 0x3586 <main+0x448>
    31b2:	24 e0       	ldi	r18, 0x04	; 4
    31b4:	20 93 e9 00 	sts	0x00E9, r18
    31b8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    31bc:	82 ff       	sbrs	r24, 2
{
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Check if endpoint has a command in it sent from the host */
	if (Endpoint_IsOUTReceived()){
    31be:	8a c1       	rjmp	.+788    	; 0x34d4 <main+0x396>
    31c0:	8b df       	rcall	.-234    	; 0x30d8 <FetchNextCommandByte>

		/* Read in the bootloader command (first byte sent from host) */
		uint8_t Command = FetchNextCommandByte();
    31c2:	98 2f       	mov	r25, r24
    31c4:	80 91 95 01 	lds	r24, 0x0195

		// USB-Serial Mode
		if (!CDCActive){
    31c8:	81 11       	cpse	r24, r1
    31ca:	13 c0       	rjmp	.+38     	; 0x31f2 <main+0xb4>
    31cc:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    31d0:	85 ff       	sbrs	r24, 5
    31d2:	fc cf       	rjmp	.-8      	; 0x31cc <main+0x8e>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    31d4:	90 93 ce 00 	sts	0x00CE, r25
				UDR1 = DataByte;
    31d8:	80 91 f2 00 	lds	r24, 0x00F2
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    31dc:	81 11       	cpse	r24, r1
    31de:	05 c0       	rjmp	.+10     	; 0x31ea <main+0xac>
			/* Store received byte into the USART transmit buffer */
			Serial_SendByte(Command);

			// if endpoint is completely empty/read acknowledge that to the host
			if (!(Endpoint_BytesInEndpoint()))
    31e0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    31e4:	8b 77       	andi	r24, 0x7B	; 123
    31e6:	80 93 e8 00 	sts	0x00E8, r24
    31ea:	5c 98       	cbi	0x0b, 4	; 11
    31ec:	10 93 96 01 	sts	0x0196, r17
				Endpoint_ClearOUT();

			// Turn on RX LED
			LEDs_TurnOnLEDs(LEDMASK_RX);
			RxLEDPulse = TX_RX_LED_PULSE_MS;
    31f0:	75 c1       	rjmp	.+746    	; 0x34dc <main+0x39e>
    31f2:	95 34       	cpi	r25, 0x45	; 69
    31f4:	19 f4       	brne	.+6      	; 0x31fc <main+0xbe>
			return;
	}
}

static void Bootloader_Task(const uint8_t Command){
	if (Command == AVR109_COMMAND_ExitBootloader)
    31f6:	10 92 00 01 	sts	0x0100, r1
	{
		RunBootloader = false;
    31fa:	07 c0       	rjmp	.+14     	; 0x320a <main+0xcc>
    31fc:	89 2f       	mov	r24, r25
    31fe:	88 57       	subi	r24, 0x78	; 120

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if ((Command == AVR109_COMMAND_SetLED) || (Command == AVR109_COMMAND_ClearLED) ||
    3200:	82 30       	cpi	r24, 0x02	; 2
    3202:	10 f0       	brcs	.+4      	; 0x3208 <main+0xca>
    3204:	94 35       	cpi	r25, 0x54	; 84
    3206:	21 f4       	brne	.+8      	; 0x3210 <main+0xd2>
    3208:	67 df       	rcall	.-306    	; 0x30d8 <FetchNextCommandByte>
    320a:	8d e0       	ldi	r24, 0x0D	; 13
		(Command == AVR109_COMMAND_SelectDeviceType))
	{
		FetchNextCommandByte();
    320c:	7f df       	rcall	.-258    	; 0x310c <WriteNextResponseByte>
    320e:	66 c1       	rjmp	.+716    	; 0x34dc <main+0x39e>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
    3210:	90 35       	cpi	r25, 0x50	; 80
    3212:	d9 f3       	breq	.-10     	; 0x320a <main+0xcc>
    3214:	9c 34       	cpi	r25, 0x4C	; 76
    3216:	09 f4       	brne	.+2      	; 0x321a <main+0xdc>
	}
	else if ((Command == AVR109_COMMAND_EnterProgrammingMode) || (Command == AVR109_COMMAND_LeaveProgrammingMode))
    3218:	f8 cf       	rjmp	.-16     	; 0x320a <main+0xcc>
    321a:	94 37       	cpi	r25, 0x74	; 116
    321c:	21 f4       	brne	.+8      	; 0x3226 <main+0xe8>
    321e:	84 e4       	ldi	r24, 0x44	; 68
    3220:	75 df       	rcall	.-278    	; 0x310c <WriteNextResponseByte>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadPartCode)
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	f3 cf       	rjmp	.-26     	; 0x320c <main+0xce>
	{
		//TODO needed?
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
    3226:	91 36       	cpi	r25, 0x61	; 97
    3228:	11 f4       	brne	.+4      	; 0x322e <main+0xf0>
    322a:	89 e5       	ldi	r24, 0x59	; 89
		WriteNextResponseByte(0x00);
    322c:	ef cf       	rjmp	.-34     	; 0x320c <main+0xce>
    322e:	91 34       	cpi	r25, 0x41	; 65
	}
	else if (Command == AVR109_COMMAND_ReadAutoAddressIncrement)
    3230:	d1 f4       	brne	.+52     	; 0x3266 <main+0x128>
    3232:	52 df       	rcall	.-348    	; 0x30d8 <FetchNextCommandByte>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
    3234:	08 2f       	mov	r16, r24
    3236:	50 df       	rcall	.-352    	; 0x30d8 <FetchNextCommandByte>
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	88 0f       	add	r24, r24
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress = (FetchNextCommandByte() << 9);
    323c:	99 1f       	adc	r25, r25
    323e:	00 0f       	add	r16, r16
    3240:	0a 83       	std	Y+2, r16	; 0x02
		CurrAddress |= (FetchNextCommandByte() << 1);
    3242:	19 82       	std	Y+1, r1	; 0x01
    3244:	29 81       	ldd	r18, Y+1	; 0x01
    3246:	3a 81       	ldd	r19, Y+2	; 0x02
    3248:	82 2b       	or	r24, r18
    324a:	93 2b       	or	r25, r19
		WriteNextResponseByte('Y');
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress = (FetchNextCommandByte() << 9);
    324c:	aa 27       	eor	r26, r26
    324e:	97 fd       	sbrc	r25, 7
    3250:	a0 95       	com	r26
		CurrAddress |= (FetchNextCommandByte() << 1);
    3252:	ba 2f       	mov	r27, r26
    3254:	80 93 d9 01 	sts	0x01D9, r24
    3258:	90 93 da 01 	sts	0x01DA, r25
    325c:	a0 93 db 01 	sts	0x01DB, r26
    3260:	b0 93 dc 01 	sts	0x01DC, r27
    3264:	d2 cf       	rjmp	.-92     	; 0x320a <main+0xcc>
    3266:	90 37       	cpi	r25, 0x70	; 112
    3268:	11 f4       	brne	.+4      	; 0x326e <main+0x130>
    326a:	83 e5       	ldi	r24, 0x53	; 83
    326c:	cf cf       	rjmp	.-98     	; 0x320c <main+0xce>
    326e:	93 35       	cpi	r25, 0x53	; 83
    3270:	71 f4       	brne	.+28     	; 0x328e <main+0x150>
    3272:	4c e8       	ldi	r20, 0x8C	; 140

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderInterface)
    3274:	e4 2e       	mov	r14, r20
    3276:	41 e0       	ldi	r20, 0x01	; 1
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
    3278:	f4 2e       	mov	r15, r20
    327a:	f7 01       	movw	r30, r14
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
    327c:	81 91       	ld	r24, Z+
    327e:	7f 01       	movw	r14, r30
    3280:	45 df       	rcall	.-374    	; 0x310c <WriteNextResponseByte>
    3282:	f3 e9       	ldi	r31, 0x93	; 147
    3284:	ef 16       	cp	r14, r31
    3286:	f1 e0       	ldi	r31, 0x01	; 1
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
			WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    3288:	ff 06       	cpc	r15, r31
    328a:	b9 f7       	brne	.-18     	; 0x327a <main+0x13c>
    328c:	27 c1       	rjmp	.+590    	; 0x34dc <main+0x39e>
    328e:	96 35       	cpi	r25, 0x56	; 86
    3290:	21 f4       	brne	.+8      	; 0x329a <main+0x15c>
		WriteNextResponseByte('S');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    3292:	81 e3       	ldi	r24, 0x31	; 49
    3294:	3b df       	rcall	.-394    	; 0x310c <WriteNextResponseByte>
    3296:	80 e3       	ldi	r24, 0x30	; 48
    3298:	b9 cf       	rjmp	.-142    	; 0x320c <main+0xce>
    329a:	93 37       	cpi	r25, 0x73	; 115
    329c:	31 f4       	brne	.+12     	; 0x32aa <main+0x16c>
			WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderSWVersion)
    329e:	82 e8       	ldi	r24, 0x82	; 130
    32a0:	35 df       	rcall	.-406    	; 0x310c <WriteNextResponseByte>
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    32a2:	84 e9       	ldi	r24, 0x94	; 148
    32a4:	33 df       	rcall	.-410    	; 0x310c <WriteNextResponseByte>
    32a6:	8e e1       	ldi	r24, 0x1E	; 30
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    32a8:	b1 cf       	rjmp	.-158    	; 0x320c <main+0xce>
    32aa:	95 36       	cpi	r25, 0x65	; 101
	}
	else if (Command == AVR109_COMMAND_ReadSignature)
    32ac:	b1 f4       	brne	.+44     	; 0x32da <main+0x19c>
    32ae:	e0 e0       	ldi	r30, 0x00	; 0
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	10 93 57 00 	sts	0x0057, r17
		WriteNextResponseByte(AVR_SIGNATURE_2);
    32b6:	e8 95       	spm
    32b8:	07 b6       	in	r0, 0x37	; 55
    32ba:	00 fc       	sbrc	r0, 0
		WriteNextResponseByte(AVR_SIGNATURE_1);
    32bc:	fd cf       	rjmp	.-6      	; 0x32b8 <main+0x17a>
    32be:	25 e0       	ldi	r18, 0x05	; 5
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
    32c0:	20 93 57 00 	sts	0x0057, r18
    32c4:	e8 95       	spm
    32c6:	07 b6       	in	r0, 0x37	; 55
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    32c8:	00 fc       	sbrc	r0, 0
    32ca:	fd cf       	rjmp	.-6      	; 0x32c6 <main+0x188>
    32cc:	e0 58       	subi	r30, 0x80	; 128
			boot_spm_busy_wait();
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	e1 15       	cp	r30, r1
    32d2:	30 e3       	ldi	r19, 0x30	; 48
			boot_page_write(CurrFlashAddress);
    32d4:	f3 07       	cpc	r31, r19
    32d6:	69 f7       	brne	.-38     	; 0x32b2 <main+0x174>
    32d8:	98 cf       	rjmp	.-208    	; 0x320a <main+0xcc>
    32da:	92 37       	cpi	r25, 0x72	; 114
			boot_spm_busy_wait();
    32dc:	19 f4       	brne	.+6      	; 0x32e4 <main+0x1a6>
    32de:	e1 e0       	ldi	r30, 0x01	; 1
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	04 c0       	rjmp	.+8      	; 0x32ec <main+0x1ae>
    32e4:	96 34       	cpi	r25, 0x46	; 70
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    32e6:	31 f4       	brne	.+12     	; 0x32f4 <main+0x1b6>
    32e8:	e0 e0       	ldi	r30, 0x00	; 0
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	b0 92 57 00 	sts	0x0057, r11

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
#endif
	else if (Command == AVR109_COMMAND_ReadLockbits)
    32f0:	84 91       	lpm	r24, Z+
    32f2:	8c cf       	rjmp	.-232    	; 0x320c <main+0xce>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    32f4:	9e 34       	cpi	r25, 0x4E	; 78
    32f6:	19 f4       	brne	.+6      	; 0x32fe <main+0x1c0>
    32f8:	e3 e0       	ldi	r30, 0x03	; 3
	}
	else if (Command == AVR109_COMMAND_ReadLowFuses)
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	f7 cf       	rjmp	.-18     	; 0x32ec <main+0x1ae>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    32fe:	91 35       	cpi	r25, 0x51	; 81
    3300:	19 f4       	brne	.+6      	; 0x3308 <main+0x1ca>
    3302:	e2 e0       	ldi	r30, 0x02	; 2
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	f2 cf       	rjmp	.-28     	; 0x32ec <main+0x1ae>
    3308:	92 36       	cpi	r25, 0x62	; 98
	}
	else if (Command == AVR109_COMMAND_ReadHighFuses)
    330a:	31 f4       	brne	.+12     	; 0x3318 <main+0x1da>
    330c:	89 e5       	ldi	r24, 0x59	; 89
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    330e:	fe de       	rcall	.-516    	; 0x310c <WriteNextResponseByte>
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	fc de       	rcall	.-520    	; 0x310c <WriteNextResponseByte>
	}
	else if (Command == AVR109_COMMAND_ReadExtendedFuses)
    3314:	80 e8       	ldi	r24, 0x80	; 128
    3316:	7a cf       	rjmp	.-268    	; 0x320c <main+0xce>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    3318:	92 34       	cpi	r25, 0x42	; 66
    331a:	19 f0       	breq	.+6      	; 0x3322 <main+0x1e4>
    331c:	97 36       	cpi	r25, 0x67	; 103
	}
#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == AVR109_COMMAND_GetBlockWriteSupport)
    331e:	09 f0       	breq	.+2      	; 0x3322 <main+0x1e4>
    3320:	d5 c0       	rjmp	.+426    	; 0x34cc <main+0x38e>
	{
		WriteNextResponseByte('Y');
    3322:	9d 83       	std	Y+5, r25	; 0x05
    3324:	d9 de       	rcall	.-590    	; 0x30d8 <FetchNextCommandByte>
    3326:	78 2e       	mov	r7, r24

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    3328:	61 2c       	mov	r6, r1
    332a:	d6 de       	rcall	.-596    	; 0x30d8 <FetchNextCommandByte>
    332c:	93 01       	movw	r18, r6
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    332e:	28 2b       	or	r18, r24
    3330:	3f 83       	std	Y+7, r19	; 0x07
	}
	else if ((Command == AVR109_COMMAND_BlockWrite) || (Command == AVR109_COMMAND_BlockRead))
    3332:	2e 83       	std	Y+6, r18	; 0x06
    3334:	d1 de       	rcall	.-606    	; 0x30d8 <FetchNextCommandByte>
    3336:	08 2f       	mov	r16, r24
    3338:	85 54       	subi	r24, 0x45	; 69
    333a:	9d 81       	ldd	r25, Y+5	; 0x05
	char     MemoryType;

	uint8_t  HighByte = 0;
	uint8_t  LowByte = 0;

	BlockSize = (FetchNextCommandByte() << 8);
    333c:	82 30       	cpi	r24, 0x02	; 2
    333e:	10 f0       	brcs	.+4      	; 0x3344 <main+0x206>
    3340:	8f e3       	ldi	r24, 0x3F	; 63
    3342:	64 cf       	rjmp	.-312    	; 0x320c <main+0xce>
    3344:	97 36       	cpi	r25, 0x67	; 103
	BlockSize |= FetchNextCommandByte();
    3346:	09 f0       	breq	.+2      	; 0x334a <main+0x20c>
    3348:	48 c0       	rjmp	.+144    	; 0x33da <main+0x29c>
    334a:	31 e1       	ldi	r19, 0x11	; 17
    334c:	30 93 57 00 	sts	0x0057, r19
    3350:	e8 95       	spm

	MemoryType = FetchNextCommandByte();
    3352:	a1 2c       	mov	r10, r1
    3354:	3c c0       	rjmp	.+120    	; 0x33ce <main+0x290>
    3356:	c0 90 d9 01 	lds	r12, 0x01D9

	if ((MemoryType != MEMORY_TYPE_FLASH) && (MemoryType != MEMORY_TYPE_EEPROM))
    335a:	d0 90 da 01 	lds	r13, 0x01DA
    335e:	e0 90 db 01 	lds	r14, 0x01DB
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
    3362:	f0 90 dc 01 	lds	r15, 0x01DC

		return;
	}

	/* Check if command is to read a memory block */
	if (Command == AVR109_COMMAND_BlockRead)
    3366:	06 34       	cpi	r16, 0x46	; 70
    3368:	b9 f4       	brne	.+46     	; 0x3398 <main+0x25a>
	{
		/* Re-enable RWW section */
		boot_rww_enable();
    336a:	ea 2d       	mov	r30, r10
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	ec 29       	or	r30, r12
    3370:	fd 29       	or	r31, r13
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	uint8_t  HighByte = 0;
    3372:	84 91       	lpm	r24, Z+
    3374:	cb de       	rcall	.-618    	; 0x310c <WriteNextResponseByte>
    3376:	aa 20       	and	r10, r10
    3378:	69 f0       	breq	.+26     	; 0x3394 <main+0x256>
    337a:	82 e0       	ldi	r24, 0x02	; 2
    337c:	c8 0e       	add	r12, r24
    337e:	d1 1c       	adc	r13, r1
    3380:	e1 1c       	adc	r14, r1
    3382:	f1 1c       	adc	r15, r1
    3384:	c0 92 d9 01 	sts	0x01D9, r12
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
    3388:	d0 92 da 01 	sts	0x01DA, r13
			{
				/* Read the next FLASH byte from the current FLASH page */
#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    338c:	e0 92 db 01 	sts	0x01DB, r14
    3390:	f0 92 dc 01 	sts	0x01DC, r15
    3394:	a9 24       	eor	r10, r9
    3396:	15 c0       	rjmp	.+42     	; 0x33c2 <main+0x284>
#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    3398:	d7 01       	movw	r26, r14
    339a:	c6 01       	movw	r24, r12
					CurrAddress += 2;
    339c:	b6 95       	lsr	r27
    339e:	a7 95       	ror	r26
    33a0:	97 95       	ror	r25
    33a2:	87 95       	ror	r24
    33a4:	76 d5       	rcall	.+2796   	; 0x3e92 <__eerd_byte_usb162>
    33a6:	b2 de       	rcall	.-668    	; 0x310c <WriteNextResponseByte>
    33a8:	92 e0       	ldi	r25, 0x02	; 2
    33aa:	c9 0e       	add	r12, r25
    33ac:	d1 1c       	adc	r13, r1
    33ae:	e1 1c       	adc	r14, r1
    33b0:	f1 1c       	adc	r15, r1
    33b2:	c0 92 d9 01 	sts	0x01D9, r12
    33b6:	d0 92 da 01 	sts	0x01DA, r13
				HighByte = !HighByte;
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    33ba:	e0 92 db 01 	sts	0x01DB, r14
    33be:	f0 92 dc 01 	sts	0x01DC, r15
    33c2:	2e 81       	ldd	r18, Y+6	; 0x06
    33c4:	3f 81       	ldd	r19, Y+7	; 0x07
    33c6:	21 50       	subi	r18, 0x01	; 1
    33c8:	31 09       	sbc	r19, r1
    33ca:	3f 83       	std	Y+7, r19	; 0x07
    33cc:	2e 83       	std	Y+6, r18	; 0x06

				/* Increment the address counter after use */
				CurrAddress += 2;
    33ce:	2e 81       	ldd	r18, Y+6	; 0x06
    33d0:	3f 81       	ldd	r19, Y+7	; 0x07
    33d2:	23 2b       	or	r18, r19
    33d4:	09 f0       	breq	.+2      	; 0x33d8 <main+0x29a>
    33d6:	bf cf       	rjmp	.-130    	; 0x3356 <main+0x218>
    33d8:	81 c0       	rjmp	.+258    	; 0x34dc <main+0x39e>
    33da:	20 90 d9 01 	lds	r2, 0x01D9
    33de:	30 90 da 01 	lds	r3, 0x01DA
    33e2:	40 90 db 01 	lds	r4, 0x01DB
    33e6:	50 90 dc 01 	lds	r5, 0x01DC
    33ea:	06 34       	cpi	r16, 0x46	; 70
    33ec:	09 f0       	breq	.+2      	; 0x33f0 <main+0x2b2>
    33ee:	5b c0       	rjmp	.+182    	; 0x34a6 <main+0x368>
    33f0:	f1 01       	movw	r30, r2
    33f2:	10 93 57 00 	sts	0x0057, r17
	if (Command == AVR109_COMMAND_BlockRead)
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    33f6:	e8 95       	spm
    33f8:	07 b6       	in	r0, 0x37	; 55
    33fa:	00 fc       	sbrc	r0, 0
    33fc:	fd cf       	rjmp	.-6      	; 0x33f8 <main+0x2ba>
    33fe:	53 c0       	rjmp	.+166    	; 0x34a6 <main+0x368>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    3400:	06 34       	cpi	r16, 0x46	; 70
    3402:	41 f5       	brne	.+80     	; 0x3454 <main+0x316>
    3404:	aa 20       	and	r10, r10
    3406:	11 f1       	breq	.+68     	; 0x344c <main+0x30e>
    3408:	c0 90 d9 01 	lds	r12, 0x01D9
    340c:	d0 90 da 01 	lds	r13, 0x01DA

		if (MemoryType == MEMORY_TYPE_FLASH)
    3410:	e0 90 db 01 	lds	r14, 0x01DB
    3414:	f0 90 dc 01 	lds	r15, 0x01DC
		{
			boot_page_erase(PageStartAddress);
    3418:	5f de       	rcall	.-834    	; 0x30d8 <FetchNextCommandByte>
    341a:	8c 83       	std	Y+4, r24	; 0x04
    341c:	1b 82       	std	Y+3, r1	; 0x03
			boot_spm_busy_wait();
    341e:	2b 81       	ldd	r18, Y+3	; 0x03
    3420:	3c 81       	ldd	r19, Y+4	; 0x04
    3422:	28 29       	or	r18, r8
    3424:	f6 01       	movw	r30, r12
		}

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
    3426:	09 01       	movw	r0, r18
    3428:	90 92 57 00 	sts	0x0057, r9
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    342c:	e8 95       	spm
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    342e:	11 24       	eor	r1, r1
    3430:	f2 e0       	ldi	r31, 0x02	; 2
    3432:	cf 0e       	add	r12, r31
    3434:	d1 1c       	adc	r13, r1
    3436:	e1 1c       	adc	r14, r1
    3438:	f1 1c       	adc	r15, r1
    343a:	c0 92 d9 01 	sts	0x01D9, r12
    343e:	d0 92 da 01 	sts	0x01DA, r13
    3442:	e0 92 db 01 	sts	0x01DB, r14
    3446:	f0 92 dc 01 	sts	0x01DC, r15
    344a:	02 c0       	rjmp	.+4      	; 0x3450 <main+0x312>
    344c:	45 de       	rcall	.-886    	; 0x30d8 <FetchNextCommandByte>
    344e:	88 2e       	mov	r8, r24
    3450:	a9 24       	eor	r10, r9
    3452:	22 c0       	rjmp	.+68     	; 0x3498 <main+0x35a>
    3454:	41 de       	rcall	.-894    	; 0x30d8 <FetchNextCommandByte>
    3456:	68 2f       	mov	r22, r24

					/* Increment the address counter after use */
					CurrAddress += 2;
    3458:	80 91 d9 01 	lds	r24, 0x01D9
    345c:	90 91 da 01 	lds	r25, 0x01DA
    3460:	a0 91 db 01 	lds	r26, 0x01DB
    3464:	b0 91 dc 01 	lds	r27, 0x01DC
    3468:	b6 95       	lsr	r27
    346a:	a7 95       	ror	r26
    346c:	97 95       	ror	r25
    346e:	87 95       	ror	r24
    3470:	18 d5       	rcall	.+2608   	; 0x3ea2 <__eewr_byte_usb162>
    3472:	80 91 d9 01 	lds	r24, 0x01D9
				}
				else
				{
					LowByte = FetchNextCommandByte();
    3476:	90 91 da 01 	lds	r25, 0x01DA
    347a:	a0 91 db 01 	lds	r26, 0x01DB
				HighByte = !HighByte;
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    347e:	b0 91 dc 01 	lds	r27, 0x01DC
    3482:	02 96       	adiw	r24, 0x02	; 2
    3484:	a1 1d       	adc	r26, r1
    3486:	b1 1d       	adc	r27, r1
    3488:	80 93 d9 01 	sts	0x01D9, r24
    348c:	90 93 da 01 	sts	0x01DA, r25
    3490:	a0 93 db 01 	sts	0x01DB, r26
    3494:	b0 93 dc 01 	sts	0x01DC, r27
    3498:	2e 81       	ldd	r18, Y+6	; 0x06
    349a:	3f 81       	ldd	r19, Y+7	; 0x07
    349c:	21 50       	subi	r18, 0x01	; 1
    349e:	31 09       	sbc	r19, r1

				/* Increment the address counter after use */
				CurrAddress += 2;
    34a0:	3f 83       	std	Y+7, r19	; 0x07
    34a2:	2e 83       	std	Y+6, r18	; 0x06
    34a4:	02 c0       	rjmp	.+4      	; 0x34aa <main+0x36c>
    34a6:	81 2c       	mov	r8, r1
    34a8:	a1 2c       	mov	r10, r1
    34aa:	2e 81       	ldd	r18, Y+6	; 0x06
    34ac:	3f 81       	ldd	r19, Y+7	; 0x07
    34ae:	23 2b       	or	r18, r19
    34b0:	09 f0       	breq	.+2      	; 0x34b4 <main+0x376>
    34b2:	a6 cf       	rjmp	.-180    	; 0x3400 <main+0x2c2>
    34b4:	06 34       	cpi	r16, 0x46	; 70
    34b6:	09 f0       	breq	.+2      	; 0x34ba <main+0x37c>
    34b8:	a8 ce       	rjmp	.-688    	; 0x320a <main+0xcc>
    34ba:	25 e0       	ldi	r18, 0x05	; 5
    34bc:	f1 01       	movw	r30, r2
    34be:	20 93 57 00 	sts	0x0057, r18
    34c2:	e8 95       	spm
    34c4:	07 b6       	in	r0, 0x37	; 55
    34c6:	00 fc       	sbrc	r0, 0
    34c8:	fd cf       	rjmp	.-6      	; 0x34c4 <main+0x386>
    34ca:	9f ce       	rjmp	.-706    	; 0x320a <main+0xcc>
    34cc:	9b 31       	cpi	r25, 0x1B	; 27
    34ce:	09 f0       	breq	.+2      	; 0x34d2 <main+0x394>
    34d0:	37 cf       	rjmp	.-402    	; 0x3340 <main+0x202>
    34d2:	04 c0       	rjmp	.+8      	; 0x34dc <main+0x39e>
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == MEMORY_TYPE_FLASH)
    34d4:	80 91 95 01 	lds	r24, 0x0195
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    34d8:	81 11       	cpse	r24, r1
    34da:	54 c0       	rjmp	.+168    	; 0x3584 <main+0x446>
    34dc:	8f b7       	in	r24, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	00 91 94 01 	lds	r16, 0x0194
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
    34e4:	8f bf       	out	0x3f, r24	; 63
    34e6:	80 91 95 01 	lds	r24, 0x0195
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    34ea:	81 11       	cpse	r24, r1
    34ec:	1d c0       	rjmp	.+58     	; 0x3528 <main+0x3ea>
    34ee:	00 23       	and	r16, r16
    34f0:	09 f4       	brne	.+2      	; 0x34f4 <main+0x3b6>

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    34f2:	48 c0       	rjmp	.+144    	; 0x3584 <main+0x446>
    34f4:	5d 98       	cbi	0x0b, 5	; 11
    34f6:	10 93 97 01 	sts	0x0197, r17

		/* Increment the address after use */
		CurrAddress += 2;
	}
#endif
	else if (Command != AVR109_COMMAND_Sync)
    34fa:	16 c0       	rjmp	.+44     	; 0x3528 <main+0x3ea>
    34fc:	f0 90 98 01 	lds	r15, 0x0198
    3500:	ef 2d       	mov	r30, r15
		// Bootloader Mode
		else
			Bootloader_Task(Command);
	}
	// nothing received in Bootloader mode
	else if (CDCActive)
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	e7 56       	subi	r30, 0x67	; 103
    3506:	fe 4f       	sbci	r31, 0xFE	; 254
    3508:	80 81       	ld	r24, Z
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    350a:	00 de       	rcall	.-1024   	; 0x310c <WriteNextResponseByte>
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    350c:	8f 2d       	mov	r24, r15

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	// Buffercount is 0 in Bootloader mode!
	BytesToSend = BufferCount;
    350e:	8f 5f       	subi	r24, 0xFF	; 255
    3510:	8f 73       	andi	r24, 0x3F	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3512:	80 93 98 01 	sts	0x0198, r24

	SetGlobalInterruptMask(CurrentGlobalInt);

	// dont try to flush data in USB-Serial mode if there is no data. This will block the USB
	if (!CDCActive){
    3516:	9f b7       	in	r25, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	80 91 94 01 	lds	r24, 0x0194
		if (!BytesToSend)
    351e:	81 50       	subi	r24, 0x01	; 1
    3520:	80 93 94 01 	sts	0x0194, r24
			return;
		else{
			// Turn on TX LED
			LEDs_TurnOnLEDs(LEDMASK_TX);
			TxLEDPulse = TX_RX_LED_PULSE_MS;
    3524:	9f bf       	out	0x3f, r25	; 63
    3526:	01 50       	subi	r16, 0x01	; 1
    3528:	01 11       	cpse	r16, r1
	}

	// Read bytes from the USART receive buffer into the USB IN endpoint, max 1 bank size
	while (BytesToSend--){
		// Write the Data to the Endpoint */
		WriteNextResponseByte(USARTtoUSB_Buffer_Data[BufferIndex++]);
    352a:	e8 cf       	rjmp	.-48     	; 0x34fc <main+0x3be>
    352c:	10 93 e9 00 	sts	0x00E9, r17
    3530:	90 91 e8 00 	lds	r25, 0x00E8
    3534:	80 91 e8 00 	lds	r24, 0x00E8
    3538:	8e 77       	andi	r24, 0x7E	; 126
    353a:	80 93 e8 00 	sts	0x00E8, r24
    353e:	95 fd       	sbrc	r25, 5

		// increase the buffer position and wrap around if needed
		BufferIndex %= BUFFER_SIZE;
    3540:	11 c0       	rjmp	.+34     	; 0x3564 <main+0x426>
    3542:	80 91 e8 00 	lds	r24, 0x00E8
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3546:	80 fd       	sbrc	r24, 0
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3548:	04 c0       	rjmp	.+8      	; 0x3552 <main+0x414>
		// turn off interrupts to save the value properly
		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// decrease buffer count
		BufferCount--;
    354a:	8e b3       	in	r24, 0x1e	; 30
    354c:	81 11       	cpse	r24, r1
    354e:	f9 cf       	rjmp	.-14     	; 0x3542 <main+0x404>
    3550:	0d c0       	rjmp	.+26     	; 0x356c <main+0x42e>
    3552:	80 91 e8 00 	lds	r24, 0x00E8
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    3556:	8e 77       	andi	r24, 0x7E	; 126
			TxLEDPulse = TX_RX_LED_PULSE_MS;
		}
	}

	// Read bytes from the USART receive buffer into the USB IN endpoint, max 1 bank size
	while (BytesToSend--){
    3558:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    355c:	03 c0       	rjmp	.+6      	; 0x3564 <main+0x426>
    355e:	8e b3       	in	r24, 0x1e	; 30
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3560:	88 23       	and	r24, r24
    3562:	21 f0       	breq	.+8      	; 0x356c <main+0x42e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3564:	80 91 e8 00 	lds	r24, 0x00E8
    3568:	80 ff       	sbrs	r24, 0
    356a:	f9 cf       	rjmp	.-14     	; 0x355e <main+0x420>
    356c:	80 91 95 01 	lds	r24, 0x0195

	// Send the endpoint data to the host */
	Endpoint_ClearIN();

	// If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer
	if (IsEndpointFull)
    3570:	88 23       	and	r24, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3572:	41 f0       	breq	.+16     	; 0x3584 <main+0x446>
    3574:	34 e0       	ldi	r19, 0x04	; 4
	{
		// wait for the sending to flush
		while (!(Endpoint_IsINReady()))
    3576:	30 93 e9 00 	sts	0x00E9, r19
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    357a:	80 91 e8 00 	lds	r24, 0x00E8
    357e:	8b 77       	andi	r24, 0x7B	; 123
    3580:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3584:	49 d4       	rcall	.+2194   	; 0x3e18 <USB_USBTask>
    3586:	80 91 00 01 	lds	r24, 0x0100
    358a:	81 11       	cpse	r24, r1
    358c:	12 ce       	rjmp	.-988    	; 0x31b2 <main+0x74>
	}

	// Wait until the data has been sent to the host
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    358e:	80 91 e0 00 	lds	r24, 0x00E0
    3592:	81 60       	ori	r24, 0x01	; 1
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3594:	80 93 e0 00 	sts	0x00E0, r24
		// send a zero length package
		Endpoint_ClearIN();
	}

	// Wait until the data has been sent to the host
	while (!(Endpoint_IsINReady()))
    3598:	82 e4       	ldi	r24, 0x42	; 66
    359a:	80 93 e8 01 	sts	0x01E8, r24
	}

	FlushCDC();

	// in Bootloader mode clear the Out endpoint
	if (CDCActive){
    359e:	2c e0       	ldi	r18, 0x0C	; 12
    35a0:	88 e1       	ldi	r24, 0x18	; 24
    35a2:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	a8 95       	wdr
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    35aa:	80 93 60 00 	sts	0x0060, r24
    35ae:	0f be       	out	0x3f, r0	; 63
    35b0:	20 93 60 00 	sts	0x0060, r18
		//	// Turn off RX LED(s) once the RX pulse period has elapsed
		//	if (RxLEDPulse && !(--RxLEDPulse))
		//		LEDs_TurnOffLEDs(LEDMASK_RX);
		//}

		USB_USBTask();
    35b4:	ff cf       	rjmp	.-2      	; 0x35b4 <main+0x476>

000035b6 <__vector_15>:
	ARDUINO_DDR |= LEDS_ALL_LEDS | (1 << PD3) | AVR_RESET_LINE_MASK;
	ARDUINO_PORT |= LEDS_ALL_LEDS | (1 << 2) | AVR_RESET_LINE_MASK;
}

ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    35b6:	1f 92       	push	r1
	SetupHardware();

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	while (RunBootloader)
    35b8:	0f 92       	push	r0
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	0f 92       	push	r0
    35be:	11 24       	eor	r1, r1
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    35c0:	8f 93       	push	r24
}

ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
	/* Reset counter */
	TCNT1H = 0;
    35c2:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0;
    35c6:	10 92 84 00 	sts	0x0084, r1

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
    35ca:	80 91 97 01 	lds	r24, 0x0197
    35ce:	88 23       	and	r24, r24

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
    35d0:	31 f0       	breq	.+12     	; 0x35de <__vector_15+0x28>
	/* Reset counter */
	TCNT1H = 0;
	TCNT1L = 0;

	// Turn off TX LED(s) once the TX pulse period has elapsed
	if (TxLEDPulse && !(--TxLEDPulse))
    35d2:	81 50       	subi	r24, 0x01	; 1
    35d4:	80 93 97 01 	sts	0x0197, r24
    35d8:	81 11       	cpse	r24, r1
    35da:	01 c0       	rjmp	.+2      	; 0x35de <__vector_15+0x28>
		PORTD &= ~LEDMask;
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
    35dc:	5d 9a       	sbi	0x0b, 5	; 11
		LEDs_TurnOffLEDs(LEDMASK_TX);

	// Turn off RX LED(s) once the RX pulse period has elapsed
	if (RxLEDPulse && !(--RxLEDPulse))
    35de:	80 91 96 01 	lds	r24, 0x0196
    35e2:	88 23       	and	r24, r24
    35e4:	31 f0       	breq	.+12     	; 0x35f2 <__vector_15+0x3c>
    35e6:	81 50       	subi	r24, 0x01	; 1
    35e8:	80 93 96 01 	sts	0x0196, r24
    35ec:	81 11       	cpse	r24, r1
    35ee:	01 c0       	rjmp	.+2      	; 0x35f2 <__vector_15+0x3c>
    35f0:	5c 9a       	sbi	0x0b, 4	; 11
		LEDs_TurnOffLEDs(LEDMASK_RX);

	//resetTimeout++;
	//if (pgm_read_word(0) != 0xFFFF)
	//	Timeout++;
}
    35f2:	8f 91       	pop	r24
    35f4:	0f 90       	pop	r0
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	0f 90       	pop	r0
    35fa:	1f 90       	pop	r1
    35fc:	18 95       	reti

000035fe <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    35fe:	42 e0       	ldi	r20, 0x02	; 2
    3600:	61 ec       	ldi	r22, 0xC1	; 193
    3602:	82 e0       	ldi	r24, 0x02	; 2
    3604:	ee d1       	rcall	.+988    	; 0x39e2 <Endpoint_ConfigureEndpoint_Prv>
    3606:	42 e1       	ldi	r20, 0x12	; 18
    3608:	61 e8       	ldi	r22, 0x81	; 129
    360a:	83 e0       	ldi	r24, 0x03	; 3
    360c:	ea d1       	rcall	.+980    	; 0x39e2 <Endpoint_ConfigureEndpoint_Prv>
    360e:	42 e1       	ldi	r20, 0x12	; 18
    3610:	60 e8       	ldi	r22, 0x80	; 128
    3612:	84 e0       	ldi	r24, 0x04	; 4
    3614:	e6 c1       	rjmp	.+972    	; 0x39e2 <Endpoint_ConfigureEndpoint_Prv>

00003616 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    3616:	cf 93       	push	r28
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    3618:	80 91 e0 01 	lds	r24, 0x01E0
    361c:	98 2f       	mov	r25, r24
    361e:	9f 77       	andi	r25, 0x7F	; 127
    3620:	91 32       	cpi	r25, 0x21	; 33
    3622:	09 f0       	breq	.+2      	; 0x3626 <EVENT_USB_Device_ControlRequest+0x10>
    3624:	c4 c0       	rjmp	.+392    	; 0x37ae <EVENT_USB_Device_ControlRequest+0x198>
	{
		return;
	}

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    3626:	90 91 e1 01 	lds	r25, 0x01E1
    362a:	91 32       	cpi	r25, 0x21	; 33
    362c:	39 f0       	breq	.+14     	; 0x363c <EVENT_USB_Device_ControlRequest+0x26>
    362e:	92 32       	cpi	r25, 0x22	; 34
    3630:	09 f4       	brne	.+2      	; 0x3634 <EVENT_USB_Device_ControlRequest+0x1e>
    3632:	aa c0       	rjmp	.+340    	; 0x3788 <EVENT_USB_Device_ControlRequest+0x172>
    3634:	90 32       	cpi	r25, 0x20	; 32
    3636:	09 f0       	breq	.+2      	; 0x363a <EVENT_USB_Device_ControlRequest+0x24>
    3638:	ba c0       	rjmp	.+372    	; 0x37ae <EVENT_USB_Device_ControlRequest+0x198>
    363a:	13 c0       	rjmp	.+38     	; 0x3662 <EVENT_USB_Device_ControlRequest+0x4c>
	{
	case CDC_REQ_GetLineEncoding:
		if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    363c:	81 3a       	cpi	r24, 0xA1	; 161
    363e:	09 f0       	breq	.+2      	; 0x3642 <EVENT_USB_Device_ControlRequest+0x2c>
    3640:	b6 c0       	rjmp	.+364    	; 0x37ae <EVENT_USB_Device_ControlRequest+0x198>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3642:	80 91 e8 00 	lds	r24, 0x00E8
    3646:	87 7f       	andi	r24, 0xF7	; 247
    3648:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearSETUP();

			/* Write the line coding data to the control endpoint */
			// this one is not inline because its already used somewhere in the usb core, so it will dupe code
			Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    364c:	67 e0       	ldi	r22, 0x07	; 7
    364e:	70 e0       	ldi	r23, 0x00	; 0
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	91 e0       	ldi	r25, 0x01	; 1
    3654:	64 d1       	rcall	.+712    	; 0x391e <Endpoint_Write_Control_Stream_LE>
    3656:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    365a:	8b 77       	andi	r24, 0x7B	; 123
    365c:	80 93 e8 00 	sts	0x00E8, r24
    3660:	a6 c0       	rjmp	.+332    	; 0x37ae <EVENT_USB_Device_ControlRequest+0x198>
    3662:	81 32       	cpi	r24, 0x21	; 33
			Endpoint_ClearOUT();
		}

		break;
	case CDC_REQ_SetLineEncoding:
		if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3664:	09 f0       	breq	.+2      	; 0x3668 <EVENT_USB_Device_ControlRequest+0x52>
    3666:	a3 c0       	rjmp	.+326    	; 0x37ae <EVENT_USB_Device_ControlRequest+0x198>
    3668:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    366c:	87 7f       	andi	r24, 0xF7	; 247
    366e:	80 93 e8 00 	sts	0x00E8, r24
    3672:	27 e0       	ldi	r18, 0x07	; 7
			Endpoint_ClearSETUP();

			// Read the line coding data in from the host into the global struct (made inline)
			//Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));

			uint8_t Length = sizeof(CDC_LineEncoding_t);
    3674:	81 e0       	ldi	r24, 0x01	; 1
			uint8_t* DataStream = (uint8_t*)&LineEncoding;
    3676:	91 e0       	ldi	r25, 0x01	; 1
    3678:	3e b3       	in	r19, 0x1e	; 30

			bool skip = false;
			while (Length)
			{
				uint8_t USB_DeviceState_LCL = USB_DeviceState;
    367a:	33 23       	and	r19, r19

				if ((USB_DeviceState_LCL == DEVICE_STATE_Unattached) || (USB_DeviceState_LCL == DEVICE_STATE_Suspended) || (Endpoint_IsSETUPReceived())){
    367c:	39 f1       	breq	.+78     	; 0x36cc <EVENT_USB_Device_ControlRequest+0xb6>
    367e:	35 30       	cpi	r19, 0x05	; 5
    3680:	29 f1       	breq	.+74     	; 0x36cc <EVENT_USB_Device_ControlRequest+0xb6>
    3682:	30 91 e8 00 	lds	r19, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3686:	33 fd       	sbrc	r19, 3
    3688:	21 c0       	rjmp	.+66     	; 0x36cc <EVENT_USB_Device_ControlRequest+0xb6>
    368a:	30 91 e8 00 	lds	r19, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    368e:	32 ff       	sbrs	r19, 2
					skip = true;
					break;
				}

				if (Endpoint_IsOUTReceived())
    3690:	f3 cf       	rjmp	.-26     	; 0x3678 <EVENT_USB_Device_ControlRequest+0x62>
    3692:	fc 01       	movw	r30, r24
    3694:	06 c0       	rjmp	.+12     	; 0x36a2 <EVENT_USB_Device_ControlRequest+0x8c>
    3696:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    369a:	81 93       	st	Z+, r24
				{
					while (Length && Endpoint_BytesInEndpoint())
					{
						*DataStream = Endpoint_Read_8();
    369c:	cf 01       	movw	r24, r30
						DataStream++;
    369e:	21 50       	subi	r18, 0x01	; 1
						Length--;
    36a0:	29 f0       	breq	.+10     	; 0x36ac <EVENT_USB_Device_ControlRequest+0x96>
					break;
				}

				if (Endpoint_IsOUTReceived())
				{
					while (Length && Endpoint_BytesInEndpoint())
    36a2:	cf 01       	movw	r24, r30
    36a4:	30 91 f2 00 	lds	r19, 0x00F2
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    36a8:	31 11       	cpse	r19, r1
    36aa:	f5 cf       	rjmp	.-22     	; 0x3696 <EVENT_USB_Device_ControlRequest+0x80>
    36ac:	30 91 e8 00 	lds	r19, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    36b0:	3b 77       	andi	r19, 0x7B	; 123
    36b2:	30 93 e8 00 	sts	0x00E8, r19
    36b6:	21 11       	cpse	r18, r1

			uint8_t Length = sizeof(CDC_LineEncoding_t);
			uint8_t* DataStream = (uint8_t*)&LineEncoding;

			bool skip = false;
			while (Length)
    36b8:	df cf       	rjmp	.-66     	; 0x3678 <EVENT_USB_Device_ControlRequest+0x62>
    36ba:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    36be:	80 fd       	sbrc	r24, 0
					Endpoint_ClearOUT();
				}
			}

			if (!skip)
				while (!(Endpoint_IsINReady()))
    36c0:	05 c0       	rjmp	.+10     	; 0x36cc <EVENT_USB_Device_ControlRequest+0xb6>
    36c2:	8e b3       	in	r24, 0x1e	; 30
				{
				uint8_t USB_DeviceState_LCL = USB_DeviceState;
    36c4:	88 23       	and	r24, r24

				if ((USB_DeviceState_LCL == DEVICE_STATE_Unattached) || (USB_DeviceState_LCL == DEVICE_STATE_Suspended))
    36c6:	11 f0       	breq	.+4      	; 0x36cc <EVENT_USB_Device_ControlRequest+0xb6>
    36c8:	85 30       	cpi	r24, 0x05	; 5
    36ca:	b9 f7       	brne	.-18     	; 0x36ba <EVENT_USB_Device_ControlRequest+0xa4>
    36cc:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    36d0:	8e 77       	andi	r24, 0x7E	; 126
    36d2:	80 93 e8 00 	sts	0x00E8, r24
    36d6:	20 91 01 01 	lds	r18, 0x0101

			// end of inline Endpoint_Read_Control_Stream_LE

			Endpoint_ClearIN();

			if (LineEncoding.BaudRateBPS == BAUDRATE_CDC_BOOTLOADER)
    36da:	30 91 02 01 	lds	r19, 0x0102
    36de:	40 91 03 01 	lds	r20, 0x0103
    36e2:	50 91 04 01 	lds	r21, 0x0104
    36e6:	21 15       	cp	r18, r1
    36e8:	81 ee       	ldi	r24, 0xE1	; 225
    36ea:	38 07       	cpc	r19, r24
    36ec:	41 05       	cpc	r20, r1
    36ee:	51 05       	cpc	r21, r1
    36f0:	21 f4       	brne	.+8      	; 0x36fa <EVENT_USB_Device_ControlRequest+0xe4>
    36f2:	81 e0       	ldi	r24, 0x01	; 1
				CDCActive = true;
    36f4:	80 93 95 01 	sts	0x0195, r24
    36f8:	02 c0       	rjmp	.+4      	; 0x36fe <EVENT_USB_Device_ControlRequest+0xe8>
    36fa:	10 92 95 01 	sts	0x0195, r1
			else
				CDCActive = false;
    36fe:	10 92 94 01 	sts	0x0194, r1

			// reset buffer
			BufferCount = 0;
    3702:	10 92 98 01 	sts	0x0198, r1
			BufferIndex = 0;
    3706:	10 92 dd 01 	sts	0x01DD, r1
			BufferEnd = 0;
    370a:	e0 91 06 01 	lds	r30, 0x0106
    370e:	e1 50       	subi	r30, 0x01	; 1
    3710:	e2 30       	cpi	r30, 0x02	; 2
    3712:	28 f4       	brcc	.+10     	; 0x371e <EVENT_USB_Device_ControlRequest+0x108>
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	e8 5f       	subi	r30, 0xF8	; 248
    3718:	fe 4f       	sbci	r31, 0xFE	; 254
    371a:	c0 81       	ld	r28, Z
    371c:	01 c0       	rjmp	.+2      	; 0x3720 <EVENT_USB_Device_ControlRequest+0x10a>
    371e:	c0 e0       	ldi	r28, 0x00	; 0
    3720:	80 91 05 01 	lds	r24, 0x0105
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
    3724:	82 30       	cpi	r24, 0x02	; 2
    3726:	09 f4       	brne	.+2      	; 0x372a <EVENT_USB_Device_ControlRequest+0x114>
    3728:	c8 60       	ori	r28, 0x08	; 8
		ConfigMask |= (1 << USBS1);
    372a:	80 91 07 01 	lds	r24, 0x0107

	switch (LineEncoding.DataBits)
    372e:	87 30       	cpi	r24, 0x07	; 7
    3730:	31 f0       	breq	.+12     	; 0x373e <EVENT_USB_Device_ControlRequest+0x128>
    3732:	88 30       	cpi	r24, 0x08	; 8
    3734:	31 f0       	breq	.+12     	; 0x3742 <EVENT_USB_Device_ControlRequest+0x12c>
    3736:	86 30       	cpi	r24, 0x06	; 6
    3738:	29 f4       	brne	.+10     	; 0x3744 <EVENT_USB_Device_ControlRequest+0x12e>
    373a:	c2 60       	ori	r28, 0x02	; 2
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    373c:	03 c0       	rjmp	.+6      	; 0x3744 <EVENT_USB_Device_ControlRequest+0x12e>
    373e:	c4 60       	ori	r28, 0x04	; 4
		break;
	case 7:
		ConfigMask |= (1 << UCSZ11);
    3740:	01 c0       	rjmp	.+2      	; 0x3744 <EVENT_USB_Device_ControlRequest+0x12e>
    3742:	c6 60       	ori	r28, 0x06	; 6
		break;
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    3744:	5b 9a       	sbi	0x0b, 3	; 11
		break;
	}

	/* Keep the TX line held high (idle) while the USART is reconfigured */
	PORTD |= (1 << 3);
    3746:	10 92 c9 00 	sts	0x00C9, r1

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
    374a:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1A = 0;
    374e:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C = 0;
    3752:	ca 01       	movw	r24, r20

	/* Set the new baud rate before configuring the USART */
	UBRR1 = SERIAL_2X_UBBRVAL(LineEncoding.BaudRateBPS);
    3754:	b9 01       	movw	r22, r18
    3756:	96 95       	lsr	r25
    3758:	87 95       	ror	r24
    375a:	77 95       	ror	r23
    375c:	67 95       	ror	r22
    375e:	60 58       	subi	r22, 0x80	; 128
    3760:	7b 47       	sbci	r23, 0x7B	; 123
    3762:	81 4e       	sbci	r24, 0xE1	; 225
    3764:	9f 4f       	sbci	r25, 0xFF	; 255
    3766:	73 d3       	rcall	.+1766   	; 0x3e4e <__udivmodsi4>
    3768:	21 50       	subi	r18, 0x01	; 1
    376a:	31 09       	sbc	r19, r1
    376c:	30 93 cd 00 	sts	0x00CD, r19
    3770:	20 93 cc 00 	sts	0x00CC, r18
    3774:	c0 93 ca 00 	sts	0x00CA, r28
	//UBRR1 = (LineEncoding.BaudRateBPS == 57600)
	//	? SERIAL_UBBRVAL(LineEncoding.BaudRateBPS)
	//	: SERIAL_2X_UBBRVAL(LineEncoding.BaudRateBPS);

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
    3778:	82 e0       	ldi	r24, 0x02	; 2
    377a:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1A = (1 << U2X1);
    377e:	88 e9       	ldi	r24, 0x98	; 152
    3780:	80 93 c9 00 	sts	0x00C9, r24
	//UCSR1A = (LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    3784:	5b 98       	cbi	0x0b, 3	; 11
    3786:	13 c0       	rjmp	.+38     	; 0x37ae <EVENT_USB_Device_ControlRequest+0x198>

	/* Release the TX line after the USART has been reconfigured */
	PORTD &= ~(1 << 3);
    3788:	81 32       	cpi	r24, 0x21	; 33
    378a:	89 f4       	brne	.+34     	; 0x37ae <EVENT_USB_Device_ControlRequest+0x198>

		}

		break;
	case CDC_REQ_SetControlLineState:
		if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    378c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3790:	87 7f       	andi	r24, 0xF7	; 247
    3792:	80 93 e8 00 	sts	0x00E8, r24
    3796:	39 d1       	rcall	.+626    	; 0x3a0a <Endpoint_ClearStatusStage>
    3798:	80 91 95 01 	lds	r24, 0x0195
		{
			Endpoint_ClearSETUP();
			Endpoint_ClearStatusStage();
    379c:	81 11       	cpse	r24, r1

			// check DTR state and reset the MCU
			if (!CDCActive && (USB_ControlRequest.wValue & CDC_CONTROL_LINE_OUT_DTR))
    379e:	06 c0       	rjmp	.+12     	; 0x37ac <EVENT_USB_Device_ControlRequest+0x196>
    37a0:	80 91 e2 01 	lds	r24, 0x01E2
    37a4:	80 ff       	sbrs	r24, 0
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <EVENT_USB_Device_ControlRequest+0x196>
    37a8:	5f 98       	cbi	0x0b, 7	; 11
    37aa:	01 c0       	rjmp	.+2      	; 0x37ae <EVENT_USB_Device_ControlRequest+0x198>
    37ac:	5f 9a       	sbi	0x0b, 7	; 11
				AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    37ae:	cf 91       	pop	r28
    37b0:	08 95       	ret

000037b2 <__vector_23>:
			else
				AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    37b2:	1f 92       	push	r1
		}

		break;
	}
}
    37b4:	0f 92       	push	r0
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	0f 92       	push	r0
    37ba:	11 24       	eor	r1, r1
    37bc:	8f 93       	push	r24
    37be:	9f 93       	push	r25
    37c0:	ef 93       	push	r30
    37c2:	ff 93       	push	r31
*  for later transmission to the host.
*/
ISR(USART1_RX_vect, ISR_BLOCK)
{
	// read the newest byte from the UART, important to clear interrupt flag!
	uint8_t ReceivedByte = UDR1;
    37c4:	90 91 ce 00 	lds	r25, 0x00CE

	// only save the new byte if USB device is ready and buffer is not full
	if (!CDCActive && (USB_DeviceState == DEVICE_STATE_Configured) && (BufferCount <= BUFFER_SIZE)){
    37c8:	80 91 95 01 	lds	r24, 0x0195
    37cc:	81 11       	cpse	r24, r1
    37ce:	17 c0       	rjmp	.+46     	; 0x37fe <__vector_23+0x4c>
    37d0:	8e b3       	in	r24, 0x1e	; 30
    37d2:	84 30       	cpi	r24, 0x04	; 4
    37d4:	a1 f4       	brne	.+40     	; 0x37fe <__vector_23+0x4c>
    37d6:	80 91 94 01 	lds	r24, 0x0194
    37da:	81 34       	cpi	r24, 0x41	; 65
    37dc:	80 f4       	brcc	.+32     	; 0x37fe <__vector_23+0x4c>
		// save new byte
		USARTtoUSB_Buffer_Data[BufferEnd++] = ReceivedByte;
    37de:	80 91 dd 01 	lds	r24, 0x01DD
    37e2:	e8 2f       	mov	r30, r24
    37e4:	f0 e0       	ldi	r31, 0x00	; 0
    37e6:	e7 56       	subi	r30, 0x67	; 103
    37e8:	fe 4f       	sbci	r31, 0xFE	; 254
    37ea:	90 83       	st	Z, r25
    37ec:	8f 5f       	subi	r24, 0xFF	; 255

		// increase the buffer position and wrap around if needed
		BufferEnd %= BUFFER_SIZE;
    37ee:	8f 73       	andi	r24, 0x3F	; 63
    37f0:	80 93 dd 01 	sts	0x01DD, r24

		// increase buffer count
		BufferCount++;
    37f4:	80 91 94 01 	lds	r24, 0x0194
    37f8:	8f 5f       	subi	r24, 0xFF	; 255
    37fa:	80 93 94 01 	sts	0x0194, r24
	}
}
    37fe:	ff 91       	pop	r31
    3800:	ef 91       	pop	r30
    3802:	9f 91       	pop	r25
    3804:	8f 91       	pop	r24
    3806:	0f 90       	pop	r0
    3808:	0f be       	out	0x3f, r0	; 63
    380a:	0f 90       	pop	r0
    380c:	1f 90       	pop	r1
    380e:	18 95       	reti

00003810 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    3810:	29 2f       	mov	r18, r25
    3812:	30 e0       	ldi	r19, 0x00	; 0
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
    3814:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    3816:	22 30       	cpi	r18, 0x02	; 2
    3818:	31 05       	cpc	r19, r1
    381a:	39 f0       	breq	.+14     	; 0x382a <CALLBACK_USB_GetDescriptor+0x1a>
    381c:	23 30       	cpi	r18, 0x03	; 3
    381e:	31 05       	cpc	r19, r1
    3820:	49 f0       	breq	.+18     	; 0x3834 <CALLBACK_USB_GetDescriptor+0x24>
    3822:	21 30       	cpi	r18, 0x01	; 1
    3824:	31 05       	cpc	r19, r1
    3826:	89 f0       	breq	.+34     	; 0x384a <CALLBACK_USB_GetDescriptor+0x3a>
    3828:	0b c0       	rjmp	.+22     	; 0x3840 <CALLBACK_USB_GetDescriptor+0x30>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    382a:	2e e3       	ldi	r18, 0x3E	; 62
    382c:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    382e:	8c e3       	ldi	r24, 0x3C	; 60
    3830:	91 e0       	ldi	r25, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    3832:	1e c0       	rjmp	.+60     	; 0x3870 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
    3834:	88 23       	and	r24, r24
    3836:	71 f0       	breq	.+28     	; 0x3854 <CALLBACK_USB_GetDescriptor+0x44>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
    3838:	81 30       	cpi	r24, 0x01	; 1
    383a:	89 f0       	breq	.+34     	; 0x385e <CALLBACK_USB_GetDescriptor+0x4e>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
    383c:	82 30       	cpi	r24, 0x02	; 2
    383e:	a1 f0       	breq	.+40     	; 0x3868 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	13 c0       	rjmp	.+38     	; 0x3870 <CALLBACK_USB_GetDescriptor+0x60>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    384a:	22 e1       	ldi	r18, 0x12	; 18
    384c:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    384e:	8a e7       	ldi	r24, 0x7A	; 122
    3850:	91 e0       	ldi	r25, 0x01	; 1
    3852:	0e c0       	rjmp	.+28     	; 0x3870 <CALLBACK_USB_GetDescriptor+0x60>
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    3854:	24 e0       	ldi	r18, 0x04	; 4
    3856:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
    3858:	88 e3       	ldi	r24, 0x38	; 56
    385a:	91 e0       	ldi	r25, 0x01	; 1
    385c:	09 c0       	rjmp	.+18     	; 0x3870 <CALLBACK_USB_GetDescriptor+0x60>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
    385e:	22 e1       	ldi	r18, 0x12	; 18
    3860:	30 e0       	ldi	r19, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
    3862:	84 e2       	ldi	r24, 0x24	; 36
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	04 c0       	rjmp	.+8      	; 0x3870 <CALLBACK_USB_GetDescriptor+0x60>
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    3868:	28 e1       	ldi	r18, 0x18	; 24
    386a:	30 e0       	ldi	r19, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
    386c:	8a e0       	ldi	r24, 0x0A	; 10
    386e:	91 e0       	ldi	r25, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    3870:	fa 01       	movw	r30, r20
    3872:	91 83       	std	Z+1, r25	; 0x01
    3874:	80 83       	st	Z, r24
	return Size;
}
    3876:	c9 01       	movw	r24, r18
    3878:	08 95       	ret

0000387a <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
    387a:	07 b6       	in	r0, 0x37	; 55
    387c:	00 fc       	sbrc	r0, 0
    387e:	fd cf       	rjmp	.-6      	; 0x387a <BootloaderAPI_ErasePage>
    3880:	f9 99       	sbic	0x1f, 1	; 31
    3882:	fe cf       	rjmp	.-4      	; 0x3880 <BootloaderAPI_ErasePage+0x6>
    3884:	23 e0       	ldi	r18, 0x03	; 3
    3886:	fb 01       	movw	r30, r22
    3888:	20 93 57 00 	sts	0x0057, r18
    388c:	e8 95       	spm
	boot_spm_busy_wait();
    388e:	07 b6       	in	r0, 0x37	; 55
    3890:	00 fc       	sbrc	r0, 0
    3892:	fd cf       	rjmp	.-6      	; 0x388e <BootloaderAPI_ErasePage+0x14>
	boot_rww_enable();
    3894:	81 e1       	ldi	r24, 0x11	; 17
    3896:	80 93 57 00 	sts	0x0057, r24
    389a:	e8 95       	spm
    389c:	08 95       	ret

0000389e <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
    389e:	07 b6       	in	r0, 0x37	; 55
    38a0:	00 fc       	sbrc	r0, 0
    38a2:	fd cf       	rjmp	.-6      	; 0x389e <BootloaderAPI_WritePage>
    38a4:	f9 99       	sbic	0x1f, 1	; 31
    38a6:	fe cf       	rjmp	.-4      	; 0x38a4 <BootloaderAPI_WritePage+0x6>
    38a8:	25 e0       	ldi	r18, 0x05	; 5
    38aa:	fb 01       	movw	r30, r22
    38ac:	20 93 57 00 	sts	0x0057, r18
    38b0:	e8 95       	spm
	boot_spm_busy_wait();
    38b2:	07 b6       	in	r0, 0x37	; 55
    38b4:	00 fc       	sbrc	r0, 0
    38b6:	fd cf       	rjmp	.-6      	; 0x38b2 <BootloaderAPI_WritePage+0x14>
	boot_rww_enable();
    38b8:	81 e1       	ldi	r24, 0x11	; 17
    38ba:	80 93 57 00 	sts	0x0057, r24
    38be:	e8 95       	spm
    38c0:	08 95       	ret

000038c2 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
    38c2:	07 b6       	in	r0, 0x37	; 55
    38c4:	00 fc       	sbrc	r0, 0
    38c6:	fd cf       	rjmp	.-6      	; 0x38c2 <BootloaderAPI_FillWord>
    38c8:	f9 99       	sbic	0x1f, 1	; 31
    38ca:	fe cf       	rjmp	.-4      	; 0x38c8 <BootloaderAPI_FillWord+0x6>
    38cc:	21 e0       	ldi	r18, 0x01	; 1
    38ce:	fb 01       	movw	r30, r22
    38d0:	0a 01       	movw	r0, r20
    38d2:	20 93 57 00 	sts	0x0057, r18
    38d6:	e8 95       	spm
    38d8:	11 24       	eor	r1, r1
    38da:	08 95       	ret

000038dc <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
    38dc:	21 e2       	ldi	r18, 0x21	; 33
    38de:	fc 01       	movw	r30, r24
    38e0:	20 93 57 00 	sts	0x0057, r18
    38e4:	84 91       	lpm	r24, Z+
}
    38e6:	08 95       	ret

000038e8 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
    38e8:	29 e0       	ldi	r18, 0x09	; 9
    38ea:	fc 01       	movw	r30, r24
    38ec:	20 93 57 00 	sts	0x0057, r18
    38f0:	84 91       	lpm	r24, Z+
}
    38f2:	08 95       	ret

000038f4 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
    38f4:	e1 e0       	ldi	r30, 0x01	; 1
    38f6:	f0 e0       	ldi	r31, 0x00	; 0
    38f8:	89 e0       	ldi	r24, 0x09	; 9
    38fa:	80 93 57 00 	sts	0x0057, r24
    38fe:	84 91       	lpm	r24, Z+
}
    3900:	08 95       	ret

00003902 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
    3902:	07 b6       	in	r0, 0x37	; 55
    3904:	00 fc       	sbrc	r0, 0
    3906:	fd cf       	rjmp	.-6      	; 0x3902 <BootloaderAPI_WriteLock>
    3908:	f9 99       	sbic	0x1f, 1	; 31
    390a:	fe cf       	rjmp	.-4      	; 0x3908 <BootloaderAPI_WriteLock+0x6>
    390c:	80 95       	com	r24
    390e:	99 e0       	ldi	r25, 0x09	; 9
    3910:	e1 e0       	ldi	r30, 0x01	; 1
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	08 2e       	mov	r0, r24
    3916:	90 93 57 00 	sts	0x0057, r25
    391a:	e8 95       	spm
    391c:	08 95       	ret

0000391e <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    391e:	20 91 e6 01 	lds	r18, 0x01E6
    3922:	30 91 e7 01 	lds	r19, 0x01E7
    3926:	26 17       	cp	r18, r22
    3928:	37 07       	cpc	r19, r23
    392a:	48 f0       	brcs	.+18     	; 0x393e <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    392c:	61 15       	cp	r22, r1
    392e:	71 05       	cpc	r23, r1
    3930:	39 f4       	brne	.+14     	; 0x3940 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3932:	20 91 e8 00 	lds	r18, 0x00E8
    3936:	2e 77       	andi	r18, 0x7E	; 126
    3938:	20 93 e8 00 	sts	0x00E8, r18
    393c:	01 c0       	rjmp	.+2      	; 0x3940 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    393e:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3940:	9c 01       	movw	r18, r24
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	33 c0       	rjmp	.+102    	; 0x39ac <Endpoint_Write_Control_Stream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3946:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3948:	99 23       	and	r25, r25
    394a:	09 f4       	brne	.+2      	; 0x394e <Endpoint_Write_Control_Stream_LE+0x30>
    394c:	44 c0       	rjmp	.+136    	; 0x39d6 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    394e:	95 30       	cpi	r25, 0x05	; 5
    3950:	09 f4       	brne	.+2      	; 0x3954 <Endpoint_Write_Control_Stream_LE+0x36>
    3952:	43 c0       	rjmp	.+134    	; 0x39da <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3954:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3958:	93 fd       	sbrc	r25, 3
    395a:	41 c0       	rjmp	.+130    	; 0x39de <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    395c:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3960:	92 fd       	sbrc	r25, 2
    3962:	33 c0       	rjmp	.+102    	; 0x39ca <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3964:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    3968:	90 ff       	sbrs	r25, 0
    396a:	20 c0       	rjmp	.+64     	; 0x39ac <Endpoint_Write_Control_Stream_LE+0x8e>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    396c:	80 91 f2 00 	lds	r24, 0x00F2
    3970:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3972:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    3974:	82 1b       	sub	r24, r18
    3976:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3978:	05 c0       	rjmp	.+10     	; 0x3984 <Endpoint_Write_Control_Stream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    397a:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    397c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    3980:	61 50       	subi	r22, 0x01	; 1
    3982:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    3984:	9f 01       	movw	r18, r30
    3986:	28 0f       	add	r18, r24
    3988:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    398a:	61 15       	cp	r22, r1
    398c:	71 05       	cpc	r23, r1
    398e:	19 f0       	breq	.+6      	; 0x3996 <Endpoint_Write_Control_Stream_LE+0x78>
    3990:	28 30       	cpi	r18, 0x08	; 8
    3992:	31 05       	cpc	r19, r1
    3994:	90 f3       	brcs	.-28     	; 0x397a <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	28 30       	cpi	r18, 0x08	; 8
    399a:	31 05       	cpc	r19, r1
    399c:	09 f0       	breq	.+2      	; 0x39a0 <Endpoint_Write_Control_Stream_LE+0x82>
    399e:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    39a0:	90 91 e8 00 	lds	r25, 0x00E8
    39a4:	9e 77       	andi	r25, 0x7E	; 126
    39a6:	90 93 e8 00 	sts	0x00E8, r25
    39aa:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    39ac:	61 15       	cp	r22, r1
    39ae:	71 05       	cpc	r23, r1
    39b0:	51 f6       	brne	.-108    	; 0x3946 <Endpoint_Write_Control_Stream_LE+0x28>
    39b2:	81 11       	cpse	r24, r1
    39b4:	c8 cf       	rjmp	.-112    	; 0x3946 <Endpoint_Write_Control_Stream_LE+0x28>
    39b6:	09 c0       	rjmp	.+18     	; 0x39ca <Endpoint_Write_Control_Stream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39b8:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    39ba:	88 23       	and	r24, r24
    39bc:	61 f0       	breq	.+24     	; 0x39d6 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39be:	85 30       	cpi	r24, 0x05	; 5
    39c0:	61 f0       	breq	.+24     	; 0x39da <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    39c2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    39c6:	83 fd       	sbrc	r24, 3
    39c8:	0a c0       	rjmp	.+20     	; 0x39de <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    39ca:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    39ce:	82 ff       	sbrs	r24, 2
    39d0:	f3 cf       	rjmp	.-26     	; 0x39b8 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    39d6:	82 e0       	ldi	r24, 0x02	; 2
    39d8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    39da:	83 e0       	ldi	r24, 0x03	; 3
    39dc:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    39de:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    39e0:	08 95       	ret

000039e2 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    39e2:	8f 70       	andi	r24, 0x0F	; 15
    39e4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    39e8:	eb ee       	ldi	r30, 0xEB	; 235
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	80 81       	ld	r24, Z
    39ee:	81 60       	ori	r24, 0x01	; 1
    39f0:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    39f2:	ed ee       	ldi	r30, 0xED	; 237
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    39f8:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    39fc:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    39fe:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    3a02:	88 1f       	adc	r24, r24
    3a04:	88 27       	eor	r24, r24
    3a06:	88 1f       	adc	r24, r24
    3a08:	08 95       	ret

00003a0a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3a0a:	80 91 e0 01 	lds	r24, 0x01E0
    3a0e:	87 fd       	sbrc	r24, 7
    3a10:	05 c0       	rjmp	.+10     	; 0x3a1c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3a12:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3a16:	80 ff       	sbrs	r24, 0
    3a18:	0d c0       	rjmp	.+26     	; 0x3a34 <Endpoint_ClearStatusStage+0x2a>
    3a1a:	10 c0       	rjmp	.+32     	; 0x3a3c <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3a1c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3a20:	82 fd       	sbrc	r24, 2
    3a22:	04 c0       	rjmp	.+8      	; 0x3a2c <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a24:	8e b3       	in	r24, 0x1e	; 30
    3a26:	81 11       	cpse	r24, r1
    3a28:	f9 cf       	rjmp	.-14     	; 0x3a1c <Endpoint_ClearStatusStage+0x12>
    3a2a:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3a2c:	80 91 e8 00 	lds	r24, 0x00E8
    3a30:	8b 77       	andi	r24, 0x7B	; 123
    3a32:	07 c0       	rjmp	.+14     	; 0x3a42 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a34:	8e b3       	in	r24, 0x1e	; 30
    3a36:	81 11       	cpse	r24, r1
    3a38:	ec cf       	rjmp	.-40     	; 0x3a12 <Endpoint_ClearStatusStage+0x8>
    3a3a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3a3c:	80 91 e8 00 	lds	r24, 0x00E8
    3a40:	8e 77       	andi	r24, 0x7E	; 126
    3a42:	80 93 e8 00 	sts	0x00E8, r24
    3a46:	08 95       	ret

00003a48 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3a48:	3c d0       	rcall	.+120    	; 0x3ac2 <USB_INT_DisableAllInterrupts>
    3a4a:	3e d0       	rcall	.+124    	; 0x3ac8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3a4c:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3a50:	8f 77       	andi	r24, 0x7F	; 127
    3a52:	80 93 d8 00 	sts	0x00D8, r24
    3a56:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    3a5a:	80 68       	ori	r24, 0x80	; 128
    3a5c:	80 93 d8 00 	sts	0x00D8, r24
    3a60:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3a64:	8f 7d       	andi	r24, 0xDF	; 223
    3a66:	80 93 d8 00 	sts	0x00D8, r24
    3a6a:	84 e0       	ldi	r24, 0x04	; 4
    3a6c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3a6e:	86 e0       	ldi	r24, 0x06	; 6
    3a70:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3a72:	09 b4       	in	r0, 0x29	; 41
    3a74:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3a76:	fd cf       	rjmp	.-6      	; 0x3a72 <USB_ResetInterface+0x2a>
    3a78:	1e ba       	out	0x1e, r1	; 30
    3a7a:	10 92 de 01 	sts	0x01DE, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    3a7e:	42 e0       	ldi	r20, 0x02	; 2
    3a80:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3a82:	80 e0       	ldi	r24, 0x00	; 0
    3a84:	ae df       	rcall	.-164    	; 0x39e2 <Endpoint_ConfigureEndpoint_Prv>
    3a86:	80 91 e1 00 	lds	r24, 0x00E1
    3a8a:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3a8c:	80 93 e1 00 	sts	0x00E1, r24
    3a90:	80 91 e2 00 	lds	r24, 0x00E2
    3a94:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3a96:	80 93 e2 00 	sts	0x00E2, r24
    3a9a:	80 91 e2 00 	lds	r24, 0x00E2
    3a9e:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3aa0:	80 93 e2 00 	sts	0x00E2, r24
    3aa4:	80 91 e0 00 	lds	r24, 0x00E0
    3aa8:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3aaa:	80 93 e0 00 	sts	0x00E0, r24
    3aae:	08 95       	ret

00003ab0 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    3ab0:	e3 e6       	ldi	r30, 0x63	; 99
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	80 81       	ld	r24, Z
    3ab6:	8e 7f       	andi	r24, 0xFE	; 254
    3ab8:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	80 93 df 01 	sts	0x01DF, r24

	USB_ResetInterface();
    3ac0:	c3 cf       	rjmp	.-122    	; 0x3a48 <USB_ResetInterface>

00003ac2 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3ac2:	10 92 e2 00 	sts	0x00E2, r1
    3ac6:	08 95       	ret

00003ac8 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3ac8:	10 92 e1 00 	sts	0x00E1, r1
    3acc:	08 95       	ret

00003ace <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3ace:	1f 92       	push	r1
    3ad0:	0f 92       	push	r0
    3ad2:	0f b6       	in	r0, 0x3f	; 63
    3ad4:	0f 92       	push	r0
    3ad6:	11 24       	eor	r1, r1
    3ad8:	2f 93       	push	r18
    3ada:	3f 93       	push	r19
    3adc:	4f 93       	push	r20
    3ade:	5f 93       	push	r21
    3ae0:	6f 93       	push	r22
    3ae2:	7f 93       	push	r23
    3ae4:	8f 93       	push	r24
    3ae6:	9f 93       	push	r25
    3ae8:	af 93       	push	r26
    3aea:	bf 93       	push	r27
    3aec:	ef 93       	push	r30
    3aee:	ff 93       	push	r31
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3af0:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3af4:	80 ff       	sbrs	r24, 0
    3af6:	16 c0       	rjmp	.+44     	; 0x3b24 <__vector_11+0x56>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3af8:	80 91 e2 00 	lds	r24, 0x00E2
    3afc:	80 ff       	sbrs	r24, 0
    3afe:	12 c0       	rjmp	.+36     	; 0x3b24 <__vector_11+0x56>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3b00:	80 91 e2 00 	lds	r24, 0x00E2
    3b04:	8e 7f       	andi	r24, 0xFE	; 254
    3b06:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3b0a:	80 91 e2 00 	lds	r24, 0x00E2
    3b0e:	80 61       	ori	r24, 0x10	; 16
    3b10:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3b14:	80 91 d8 00 	lds	r24, 0x00D8
    3b18:	80 62       	ori	r24, 0x20	; 32
    3b1a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3b1e:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    3b20:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
    3b22:	79 d1       	rcall	.+754    	; 0x3e16 <USB_Event_Stub>
    3b24:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3b28:	84 ff       	sbrs	r24, 4
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3b2a:	2e c0       	rjmp	.+92     	; 0x3b88 <__vector_11+0xba>
    3b2c:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3b30:	84 ff       	sbrs	r24, 4
    3b32:	2a c0       	rjmp	.+84     	; 0x3b88 <__vector_11+0xba>
    3b34:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3b36:	89 bd       	out	0x29, r24	; 41
    3b38:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3b3a:	89 bd       	out	0x29, r24	; 41
    3b3c:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3b3e:	00 fe       	sbrs	r0, 0
    3b40:	fd cf       	rjmp	.-6      	; 0x3b3c <__vector_11+0x6e>
    3b42:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3b46:	8f 7d       	andi	r24, 0xDF	; 223
    3b48:	80 93 d8 00 	sts	0x00D8, r24
    3b4c:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3b50:	8f 7e       	andi	r24, 0xEF	; 239
    3b52:	80 93 e1 00 	sts	0x00E1, r24
    3b56:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3b5a:	8f 7e       	andi	r24, 0xEF	; 239
    3b5c:	80 93 e2 00 	sts	0x00E2, r24
    3b60:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3b64:	81 60       	ori	r24, 0x01	; 1
    3b66:	80 93 e2 00 	sts	0x00E2, r24
    3b6a:	80 91 de 01 	lds	r24, 0x01DE
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3b6e:	88 23       	and	r24, r24
    3b70:	11 f0       	breq	.+4      	; 0x3b76 <__vector_11+0xa8>
    3b72:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
    3b74:	07 c0       	rjmp	.+14     	; 0x3b84 <__vector_11+0xb6>
    3b76:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3b7a:	87 ff       	sbrs	r24, 7
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3b7c:	02 c0       	rjmp	.+4      	; 0x3b82 <__vector_11+0xb4>
    3b7e:	83 e0       	ldi	r24, 0x03	; 3
    3b80:	01 c0       	rjmp	.+2      	; 0x3b84 <__vector_11+0xb6>
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	8e bb       	out	0x1e, r24	; 30
    3b86:	47 d1       	rcall	.+654    	; 0x3e16 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    3b88:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3b8c:	83 ff       	sbrs	r24, 3
    3b8e:	21 c0       	rjmp	.+66     	; 0x3bd2 <__vector_11+0x104>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3b90:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3b94:	83 ff       	sbrs	r24, 3
    3b96:	1d c0       	rjmp	.+58     	; 0x3bd2 <__vector_11+0x104>
    3b98:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3b9c:	87 7f       	andi	r24, 0xF7	; 247
    3b9e:	80 93 e1 00 	sts	0x00E1, r24
    3ba2:	82 e0       	ldi	r24, 0x02	; 2
    3ba4:	8e bb       	out	0x1e, r24	; 30
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3ba6:	10 92 de 01 	sts	0x01DE, r1
		USB_Device_ConfigurationNumber = 0;
    3baa:	80 91 e1 00 	lds	r24, 0x00E1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3bae:	8e 7f       	andi	r24, 0xFE	; 254
    3bb0:	80 93 e1 00 	sts	0x00E1, r24
    3bb4:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3bb8:	8e 7f       	andi	r24, 0xFE	; 254
    3bba:	80 93 e2 00 	sts	0x00E2, r24
    3bbe:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3bc2:	80 61       	ori	r24, 0x10	; 16
    3bc4:	80 93 e2 00 	sts	0x00E2, r24
    3bc8:	42 e0       	ldi	r20, 0x02	; 2
    3bca:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	09 df       	rcall	.-494    	; 0x39e2 <Endpoint_ConfigureEndpoint_Prv>
    3bd0:	22 d1       	rcall	.+580    	; 0x3e16 <USB_Event_Stub>
    3bd2:	ff 91       	pop	r31
    3bd4:	ef 91       	pop	r30

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3bd6:	bf 91       	pop	r27
    3bd8:	af 91       	pop	r26
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3bda:	9f 91       	pop	r25
    3bdc:	8f 91       	pop	r24
    3bde:	7f 91       	pop	r23
    3be0:	6f 91       	pop	r22
    3be2:	5f 91       	pop	r21
    3be4:	4f 91       	pop	r20
    3be6:	3f 91       	pop	r19
    3be8:	2f 91       	pop	r18
    3bea:	0f 90       	pop	r0
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	0f 90       	pop	r0
    3bf0:	1f 90       	pop	r1
    3bf2:	18 95       	reti

00003bf4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3bf4:	1f 93       	push	r17
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	00 d0       	rcall	.+0      	; 0x3bfc <USB_Device_ProcessControlRequest+0x8>
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    3c00:	e0 ee       	ldi	r30, 0xE0	; 224
    3c02:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3c04:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3c08:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	e8 3e       	cpi	r30, 0xE8	; 232
    3c0e:	f8 07       	cpc	r31, r24
    3c10:	c9 f7       	brne	.-14     	; 0x3c04 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3c12:	01 dd       	rcall	.-1534   	; 0x3616 <EVENT_USB_Device_ControlRequest>
    3c14:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3c18:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    3c1a:	e9 c0       	rjmp	.+466    	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3c1c:	80 91 e0 01 	lds	r24, 0x01E0
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3c20:	90 91 e1 01 	lds	r25, 0x01E1

		switch (USB_ControlRequest.bRequest)
    3c24:	95 30       	cpi	r25, 0x05	; 5
    3c26:	09 f4       	brne	.+2      	; 0x3c2a <USB_Device_ProcessControlRequest+0x36>
    3c28:	70 c0       	rjmp	.+224    	; 0x3d0a <USB_Device_ProcessControlRequest+0x116>
    3c2a:	38 f4       	brcc	.+14     	; 0x3c3a <USB_Device_ProcessControlRequest+0x46>
    3c2c:	91 30       	cpi	r25, 0x01	; 1
    3c2e:	79 f1       	breq	.+94     	; 0x3c8e <USB_Device_ProcessControlRequest+0x9a>
    3c30:	70 f0       	brcs	.+28     	; 0x3c4e <USB_Device_ProcessControlRequest+0x5a>
    3c32:	93 30       	cpi	r25, 0x03	; 3
    3c34:	09 f0       	breq	.+2      	; 0x3c38 <USB_Device_ProcessControlRequest+0x44>
    3c36:	db c0       	rjmp	.+438    	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3c38:	2a c0       	rjmp	.+84     	; 0x3c8e <USB_Device_ProcessControlRequest+0x9a>
    3c3a:	98 30       	cpi	r25, 0x08	; 8
    3c3c:	09 f4       	brne	.+2      	; 0x3c40 <USB_Device_ProcessControlRequest+0x4c>
    3c3e:	aa c0       	rjmp	.+340    	; 0x3d94 <USB_Device_ProcessControlRequest+0x1a0>
    3c40:	99 30       	cpi	r25, 0x09	; 9
    3c42:	09 f4       	brne	.+2      	; 0x3c46 <USB_Device_ProcessControlRequest+0x52>
    3c44:	b9 c0       	rjmp	.+370    	; 0x3db8 <USB_Device_ProcessControlRequest+0x1c4>
    3c46:	96 30       	cpi	r25, 0x06	; 6
    3c48:	09 f0       	breq	.+2      	; 0x3c4c <USB_Device_ProcessControlRequest+0x58>
    3c4a:	d1 c0       	rjmp	.+418    	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3c4c:	83 c0       	rjmp	.+262    	; 0x3d54 <USB_Device_ProcessControlRequest+0x160>
    3c4e:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3c50:	99 f0       	breq	.+38     	; 0x3c78 <USB_Device_ProcessControlRequest+0x84>
    3c52:	82 38       	cpi	r24, 0x82	; 130
    3c54:	09 f0       	breq	.+2      	; 0x3c58 <USB_Device_ProcessControlRequest+0x64>
    3c56:	cb c0       	rjmp	.+406    	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3c58:	80 91 e4 01 	lds	r24, 0x01E4
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3c5c:	90 91 e5 01 	lds	r25, 0x01E5
    3c60:	8f 70       	andi	r24, 0x0F	; 15
    3c62:	99 27       	eor	r25, r25
    3c64:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c68:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3c6c:	95 fb       	bst	r25, 5
    3c6e:	99 27       	eor	r25, r25
    3c70:	90 f9       	bld	r25, 0
    3c72:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c76:	01 c0       	rjmp	.+2      	; 0x3c7a <USB_Device_ProcessControlRequest+0x86>
    3c78:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    3c7a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3c7e:	87 7f       	andi	r24, 0xF7	; 247
    3c80:	80 93 e8 00 	sts	0x00E8, r24
    3c84:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3c88:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    3c8c:	8e c0       	rjmp	.+284    	; 0x3daa <USB_Device_ProcessControlRequest+0x1b6>
    3c8e:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3c90:	19 f0       	breq	.+6      	; 0x3c98 <USB_Device_ProcessControlRequest+0xa4>
    3c92:	82 30       	cpi	r24, 0x02	; 2
    3c94:	09 f0       	breq	.+2      	; 0x3c98 <USB_Device_ProcessControlRequest+0xa4>
    3c96:	ab c0       	rjmp	.+342    	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3c98:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3c9a:	82 30       	cpi	r24, 0x02	; 2
    3c9c:	09 f0       	breq	.+2      	; 0x3ca0 <USB_Device_ProcessControlRequest+0xac>
    3c9e:	a7 c0       	rjmp	.+334    	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3ca0:	80 91 e2 01 	lds	r24, 0x01E2

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3ca4:	81 11       	cpse	r24, r1
    3ca6:	2b c0       	rjmp	.+86     	; 0x3cfe <USB_Device_ProcessControlRequest+0x10a>
    3ca8:	80 91 e4 01 	lds	r24, 0x01E4
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3cac:	90 91 e5 01 	lds	r25, 0x01E5
    3cb0:	8f 70       	andi	r24, 0x0F	; 15
    3cb2:	99 27       	eor	r25, r25
    3cb4:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3cb6:	09 f4       	brne	.+2      	; 0x3cba <USB_Device_ProcessControlRequest+0xc6>
    3cb8:	9a c0       	rjmp	.+308    	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3cba:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3cbe:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3cc2:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3cc4:	1c c0       	rjmp	.+56     	; 0x3cfe <USB_Device_ProcessControlRequest+0x10a>
    3cc6:	20 91 e1 01 	lds	r18, 0x01E1
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3cca:	23 30       	cpi	r18, 0x03	; 3
    3ccc:	21 f4       	brne	.+8      	; 0x3cd6 <USB_Device_ProcessControlRequest+0xe2>
    3cce:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3cd2:	80 62       	ori	r24, 0x20	; 32
    3cd4:	12 c0       	rjmp	.+36     	; 0x3cfa <USB_Device_ProcessControlRequest+0x106>
    3cd6:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3cda:	90 61       	ori	r25, 0x10	; 16
    3cdc:	90 93 eb 00 	sts	0x00EB, r25
    3ce0:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	01 c0       	rjmp	.+2      	; 0x3ce8 <USB_Device_ProcessControlRequest+0xf4>
    3ce6:	22 0f       	add	r18, r18
    3ce8:	8a 95       	dec	r24
    3cea:	ea f7       	brpl	.-6      	; 0x3ce6 <USB_Device_ProcessControlRequest+0xf2>
    3cec:	20 93 ea 00 	sts	0x00EA, r18
    3cf0:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    3cf4:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3cf8:	88 60       	ori	r24, 0x08	; 8
    3cfa:	80 93 eb 00 	sts	0x00EB, r24
    3cfe:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d02:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d06:	87 7f       	andi	r24, 0xF7	; 247
    3d08:	53 c0       	rjmp	.+166    	; 0x3db0 <USB_Device_ProcessControlRequest+0x1bc>
    3d0a:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3d0c:	70 c0       	rjmp	.+224    	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3d0e:	80 91 e2 01 	lds	r24, 0x01E2
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3d12:	90 91 e3 01 	lds	r25, 0x01E3
    3d16:	8f 77       	andi	r24, 0x7F	; 127
    3d18:	99 27       	eor	r25, r25
    3d1a:	18 2f       	mov	r17, r24
    3d1c:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3d20:	90 78       	andi	r25, 0x80	; 128
    3d22:	98 2b       	or	r25, r24
    3d24:	90 93 e3 00 	sts	0x00E3, r25
    3d28:	80 91 e8 00 	lds	r24, 0x00E8
    3d2c:	87 7f       	andi	r24, 0xF7	; 247
    3d2e:	80 93 e8 00 	sts	0x00E8, r24
    3d32:	6b de       	rcall	.-810    	; 0x3a0a <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3d34:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3d38:	80 ff       	sbrs	r24, 0
    3d3a:	fc cf       	rjmp	.-8      	; 0x3d34 <USB_Device_ProcessControlRequest+0x140>

	while (!(Endpoint_IsINReady()));
    3d3c:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    3d40:	80 68       	ori	r24, 0x80	; 128
    3d42:	80 93 e3 00 	sts	0x00E3, r24
    3d46:	11 23       	and	r17, r17
    3d48:	11 f0       	breq	.+4      	; 0x3d4e <USB_Device_ProcessControlRequest+0x15a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3d4a:	83 e0       	ldi	r24, 0x03	; 3
    3d4c:	01 c0       	rjmp	.+2      	; 0x3d50 <USB_Device_ProcessControlRequest+0x15c>
    3d4e:	82 e0       	ldi	r24, 0x02	; 2
    3d50:	8e bb       	out	0x1e, r24	; 30
    3d52:	4d c0       	rjmp	.+154    	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3d54:	80 58       	subi	r24, 0x80	; 128
    3d56:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3d58:	08 f0       	brcs	.+2      	; 0x3d5c <USB_Device_ProcessControlRequest+0x168>
    3d5a:	49 c0       	rjmp	.+146    	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3d5c:	ae 01       	movw	r20, r28
    3d5e:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3d60:	5f 4f       	sbci	r21, 0xFF	; 255
    3d62:	60 91 e4 01 	lds	r22, 0x01E4
    3d66:	80 91 e2 01 	lds	r24, 0x01E2
    3d6a:	90 91 e3 01 	lds	r25, 0x01E3
    3d6e:	50 dd       	rcall	.-1376   	; 0x3810 <CALLBACK_USB_GetDescriptor>
    3d70:	00 97       	sbiw	r24, 0x00	; 0
    3d72:	09 f4       	brne	.+2      	; 0x3d76 <USB_Device_ProcessControlRequest+0x182>
    3d74:	3c c0       	rjmp	.+120    	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3d76:	20 91 e8 00 	lds	r18, 0x00E8
    3d7a:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d7c:	20 93 e8 00 	sts	0x00E8, r18
    3d80:	bc 01       	movw	r22, r24
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    3d86:	cb dd       	rcall	.-1130   	; 0x391e <Endpoint_Write_Control_Stream_LE>
    3d88:	80 91 e8 00 	lds	r24, 0x00E8
    3d8c:	8b 77       	andi	r24, 0x7B	; 123
    3d8e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3d92:	2d c0       	rjmp	.+90     	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3d94:	80 38       	cpi	r24, 0x80	; 128
    3d96:	59 f5       	brne	.+86     	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3d98:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3d9c:	87 7f       	andi	r24, 0xF7	; 247
    3d9e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3da2:	80 91 de 01 	lds	r24, 0x01DE
    3da6:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3daa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3dae:	8e 77       	andi	r24, 0x7E	; 126
    3db0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3db4:	2a de       	rcall	.-940    	; 0x3a0a <Endpoint_ClearStatusStage>
    3db6:	1b c0       	rjmp	.+54     	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3db8:	81 11       	cpse	r24, r1
    3dba:	19 c0       	rjmp	.+50     	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3dbc:	90 91 e2 01 	lds	r25, 0x01E2
    3dc0:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3dc2:	a8 f4       	brcc	.+42     	; 0x3dee <USB_Device_ProcessControlRequest+0x1fa>
    3dc4:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3dc8:	87 7f       	andi	r24, 0xF7	; 247
    3dca:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3dce:	90 93 de 01 	sts	0x01DE, r25
    3dd2:	1b de       	rcall	.-970    	; 0x3a0a <Endpoint_ClearStatusStage>
    3dd4:	80 91 de 01 	lds	r24, 0x01DE
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3dd8:	81 11       	cpse	r24, r1
    3dda:	04 c0       	rjmp	.+8      	; 0x3de4 <USB_Device_ProcessControlRequest+0x1f0>

	Endpoint_ClearStatusStage();
    3ddc:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    3de0:	87 ff       	sbrs	r24, 7
    3de2:	02 c0       	rjmp	.+4      	; 0x3de8 <USB_Device_ProcessControlRequest+0x1f4>
    3de4:	84 e0       	ldi	r24, 0x04	; 4
    3de6:	01 c0       	rjmp	.+2      	; 0x3dea <USB_Device_ProcessControlRequest+0x1f6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3dec:	08 dc       	rcall	.-2032   	; 0x35fe <EVENT_USB_Device_ConfigurationChanged>
    3dee:	80 91 e8 00 	lds	r24, 0x00E8
    3df2:	83 ff       	sbrs	r24, 3
    3df4:	0a c0       	rjmp	.+20     	; 0x3e0a <USB_Device_ProcessControlRequest+0x216>
    3df6:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    3dfa:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3dfc:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3e00:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3e04:	80 62       	ori	r24, 0x20	; 32
    3e06:	80 93 eb 00 	sts	0x00EB, r24
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3e0e:	df 91       	pop	r29
    3e10:	cf 91       	pop	r28
    3e12:	1f 91       	pop	r17
    3e14:	08 95       	ret

00003e16 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    3e16:	08 95       	ret

00003e18 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3e18:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3e1a:	8e b3       	in	r24, 0x1e	; 30
    3e1c:	88 23       	and	r24, r24
    3e1e:	a9 f0       	breq	.+42     	; 0x3e4a <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3e20:	80 91 e9 00 	lds	r24, 0x00E9
    3e24:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3e26:	90 91 ec 00 	lds	r25, 0x00EC
    3e2a:	90 ff       	sbrs	r25, 0
    3e2c:	02 c0       	rjmp	.+4      	; 0x3e32 <USB_USBTask+0x1a>
    3e2e:	90 e8       	ldi	r25, 0x80	; 128
    3e30:	01 c0       	rjmp	.+2      	; 0x3e34 <USB_USBTask+0x1c>
    3e32:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3e34:	c9 2f       	mov	r28, r25
    3e36:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e38:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3e3c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    3e40:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    3e42:	d8 de       	rcall	.-592    	; 0x3bf4 <USB_Device_ProcessControlRequest>
    3e44:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e46:	c0 93 e9 00 	sts	0x00E9, r28
    3e4a:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3e4c:	08 95       	ret

00003e4e <__udivmodsi4>:
    3e4e:	a1 e2       	ldi	r26, 0x21	; 33
    3e50:	1a 2e       	mov	r1, r26
    3e52:	aa 1b       	sub	r26, r26
    3e54:	bb 1b       	sub	r27, r27
    3e56:	fd 01       	movw	r30, r26
    3e58:	0d c0       	rjmp	.+26     	; 0x3e74 <__udivmodsi4_ep>

00003e5a <__udivmodsi4_loop>:
    3e5a:	aa 1f       	adc	r26, r26
    3e5c:	bb 1f       	adc	r27, r27
    3e5e:	ee 1f       	adc	r30, r30
    3e60:	ff 1f       	adc	r31, r31
    3e62:	a2 17       	cp	r26, r18
    3e64:	b3 07       	cpc	r27, r19
    3e66:	e4 07       	cpc	r30, r20
    3e68:	f5 07       	cpc	r31, r21
    3e6a:	20 f0       	brcs	.+8      	; 0x3e74 <__udivmodsi4_ep>
    3e6c:	a2 1b       	sub	r26, r18
    3e6e:	b3 0b       	sbc	r27, r19
    3e70:	e4 0b       	sbc	r30, r20
    3e72:	f5 0b       	sbc	r31, r21

00003e74 <__udivmodsi4_ep>:
    3e74:	66 1f       	adc	r22, r22
    3e76:	77 1f       	adc	r23, r23
    3e78:	88 1f       	adc	r24, r24
    3e7a:	99 1f       	adc	r25, r25
    3e7c:	1a 94       	dec	r1
    3e7e:	69 f7       	brne	.-38     	; 0x3e5a <__udivmodsi4_loop>
    3e80:	60 95       	com	r22
    3e82:	70 95       	com	r23
    3e84:	80 95       	com	r24
    3e86:	90 95       	com	r25
    3e88:	9b 01       	movw	r18, r22
    3e8a:	ac 01       	movw	r20, r24
    3e8c:	bd 01       	movw	r22, r26
    3e8e:	cf 01       	movw	r24, r30
    3e90:	08 95       	ret

00003e92 <__eerd_byte_usb162>:
    3e92:	f9 99       	sbic	0x1f, 1	; 31
    3e94:	fe cf       	rjmp	.-4      	; 0x3e92 <__eerd_byte_usb162>
    3e96:	92 bd       	out	0x22, r25	; 34
    3e98:	81 bd       	out	0x21, r24	; 33
    3e9a:	f8 9a       	sbi	0x1f, 0	; 31
    3e9c:	99 27       	eor	r25, r25
    3e9e:	80 b5       	in	r24, 0x20	; 32
    3ea0:	08 95       	ret

00003ea2 <__eewr_byte_usb162>:
    3ea2:	26 2f       	mov	r18, r22

00003ea4 <__eewr_r18_usb162>:
    3ea4:	f9 99       	sbic	0x1f, 1	; 31
    3ea6:	fe cf       	rjmp	.-4      	; 0x3ea4 <__eewr_r18_usb162>
    3ea8:	1f ba       	out	0x1f, r1	; 31
    3eaa:	92 bd       	out	0x22, r25	; 34
    3eac:	81 bd       	out	0x21, r24	; 33
    3eae:	20 bd       	out	0x20, r18	; 32
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	fa 9a       	sbi	0x1f, 2	; 31
    3eb6:	f9 9a       	sbi	0x1f, 1	; 31
    3eb8:	0f be       	out	0x3f, r0	; 63
    3eba:	01 96       	adiw	r24, 0x01	; 1
    3ebc:	08 95       	ret

00003ebe <_exit>:
    3ebe:	f8 94       	cli

00003ec0 <__stop_program>:
    3ec0:	ff cf       	rjmp	.-2      	; 0x3ec0 <__stop_program>

Disassembly of section .apitable_trampolines:

00003fa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
    3fa0:	6c cc       	rjmp	.-1832   	; 0x387a <BootloaderAPI_ErasePage>

00003fa2 <BootloaderAPI_WritePage_Trampoline>:
    3fa2:	7d cc       	rjmp	.-1798   	; 0x389e <BootloaderAPI_WritePage>

00003fa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
    3fa4:	8e cc       	rjmp	.-1764   	; 0x38c2 <BootloaderAPI_FillWord>

00003fa6 <BootloaderAPI_ReadSignature_Trampoline>:
    3fa6:	9a cc       	rjmp	.-1740   	; 0x38dc <BootloaderAPI_ReadSignature>

00003fa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
    3fa8:	9f cc       	rjmp	.-1730   	; 0x38e8 <BootloaderAPI_ReadFuse>

00003faa <BootloaderAPI_ReadLock_Trampoline>:
    3faa:	a4 cc       	rjmp	.-1720   	; 0x38f4 <BootloaderAPI_ReadLock>

00003fac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
    3fac:	aa cc       	rjmp	.-1708   	; 0x3902 <BootloaderAPI_WriteLock>

00003fae <BootloaderAPI_UNUSED1>:
    3fae:	08 95       	ret

00003fb0 <BootloaderAPI_UNUSED2>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
    3fb0:	08 95       	ret

00003fb2 <BootloaderAPI_UNUSED3>:
    3fb2:	08 95       	ret

00003fb4 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
    3fb4:	08 95       	ret

00003fb6 <BootloaderAPI_UNUSED5>:
    3fb6:	08 95       	ret

Disassembly of section .apitable_jumptable:

00003fe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
    3fe0:	df cf       	rjmp	.-66     	; 0x3fa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
    3fe2:	df cf       	rjmp	.-66     	; 0x3fa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
    3fe4:	df cf       	rjmp	.-66     	; 0x3fa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
    3fe6:	df cf       	rjmp	.-66     	; 0x3fa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
    3fe8:	df cf       	rjmp	.-66     	; 0x3fa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
    3fea:	df cf       	rjmp	.-66     	; 0x3faa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
    3fec:	df cf       	rjmp	.-66     	; 0x3fac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
    3fee:	df cf       	rjmp	.-66     	; 0x3fae <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
    3ff0:	df cf       	rjmp	.-66     	; 0x3fb0 <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
    3ff2:	df cf       	rjmp	.-66     	; 0x3fb2 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
    3ff4:	df cf       	rjmp	.-66     	; 0x3fb4 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
    3ff6:	df cf       	rjmp	.-66     	; 0x3fb6 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

00003ff8 <BootloaderAPI_Signatures>:
    3ff8:	00 30       	cpi	r16, 0x00	; 0
    3ffa:	00 00       	nop
    3ffc:	00 df       	rcall	.-512    	; 0x3dfe <USB_Device_ProcessControlRequest+0x20a>
    3ffe:	fb dc       	rcall	.-1546   	; 0x39f6 <Endpoint_ConfigureEndpoint_Prv+0x14>
