
Hoodloader2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  00003ec6  00000f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec6  00003000  00003000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000018  00003fa0  00003fa0  00001032  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  00003fe0  00003fe0  0000104a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  00003ff8  00003ff8  00001062  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          00000055  00800198  00800198  0000106a  2**0
                  ALLOC
  6 .stab         00000954  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      000000e2  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000011  00000000  00000000  00001aa2  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000003b0  00000000  00000000  00001ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00005a96  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000016a2  00000000  00000000  000078fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000029a1  00000000  00000000  00008fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000994  00000000  00000000  0000b944  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ac3  00000000  00000000  0000c2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00003eaf  00000000  00000000  0000ed9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005e8  00000000  00000000  00012c50  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003000 <__vectors>:
    3000:	39 c0       	rjmp	.+114    	; 0x3074 <__ctors_end>
    3002:	00 00       	nop
    3004:	9d c0       	rjmp	.+314    	; 0x3140 <__bad_interrupt>
    3006:	00 00       	nop
    3008:	9b c0       	rjmp	.+310    	; 0x3140 <__bad_interrupt>
    300a:	00 00       	nop
    300c:	99 c0       	rjmp	.+306    	; 0x3140 <__bad_interrupt>
    300e:	00 00       	nop
    3010:	97 c0       	rjmp	.+302    	; 0x3140 <__bad_interrupt>
    3012:	00 00       	nop
    3014:	95 c0       	rjmp	.+298    	; 0x3140 <__bad_interrupt>
    3016:	00 00       	nop
    3018:	93 c0       	rjmp	.+294    	; 0x3140 <__bad_interrupt>
    301a:	00 00       	nop
    301c:	91 c0       	rjmp	.+290    	; 0x3140 <__bad_interrupt>
    301e:	00 00       	nop
    3020:	8f c0       	rjmp	.+286    	; 0x3140 <__bad_interrupt>
    3022:	00 00       	nop
    3024:	8d c0       	rjmp	.+282    	; 0x3140 <__bad_interrupt>
    3026:	00 00       	nop
    3028:	8b c0       	rjmp	.+278    	; 0x3140 <__bad_interrupt>
    302a:	00 00       	nop
    302c:	52 c5       	rjmp	.+2724   	; 0x3ad2 <__vector_11>
    302e:	00 00       	nop
    3030:	87 c0       	rjmp	.+270    	; 0x3140 <__bad_interrupt>
    3032:	00 00       	nop
    3034:	85 c0       	rjmp	.+266    	; 0x3140 <__bad_interrupt>
    3036:	00 00       	nop
    3038:	83 c0       	rjmp	.+262    	; 0x3140 <__bad_interrupt>
    303a:	00 00       	nop
    303c:	81 c0       	rjmp	.+258    	; 0x3140 <__bad_interrupt>
    303e:	00 00       	nop
    3040:	7f c0       	rjmp	.+254    	; 0x3140 <__bad_interrupt>
    3042:	00 00       	nop
    3044:	7d c0       	rjmp	.+250    	; 0x3140 <__bad_interrupt>
    3046:	00 00       	nop
    3048:	7b c0       	rjmp	.+246    	; 0x3140 <__bad_interrupt>
    304a:	00 00       	nop
    304c:	79 c0       	rjmp	.+242    	; 0x3140 <__bad_interrupt>
    304e:	00 00       	nop
    3050:	77 c0       	rjmp	.+238    	; 0x3140 <__bad_interrupt>
    3052:	00 00       	nop
    3054:	75 c0       	rjmp	.+234    	; 0x3140 <__bad_interrupt>
    3056:	00 00       	nop
    3058:	73 c0       	rjmp	.+230    	; 0x3140 <__bad_interrupt>
    305a:	00 00       	nop
    305c:	ac c3       	rjmp	.+1880   	; 0x37b6 <__vector_23>
    305e:	00 00       	nop
    3060:	6f c0       	rjmp	.+222    	; 0x3140 <__bad_interrupt>
    3062:	00 00       	nop
    3064:	6d c0       	rjmp	.+218    	; 0x3140 <__bad_interrupt>
    3066:	00 00       	nop
    3068:	6b c0       	rjmp	.+214    	; 0x3140 <__bad_interrupt>
    306a:	00 00       	nop
    306c:	69 c0       	rjmp	.+210    	; 0x3140 <__bad_interrupt>
    306e:	00 00       	nop
    3070:	67 c0       	rjmp	.+206    	; 0x3140 <__bad_interrupt>
    3072:	00 00       	nop

00003074 <__ctors_end>:
    3074:	11 24       	eor	r1, r1
    3076:	1f be       	out	0x3f, r1	; 63
    3078:	cf ef       	ldi	r28, 0xFF	; 255
    307a:	d2 e0       	ldi	r29, 0x02	; 2
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	cd bf       	out	0x3d, r28	; 61

00003080 <Application_Jump_Check>:
/** Special startup routine to check if the bootloader was started via a watchdog reset, and if the magic application
 *  start key has been loaded into \ref MagicBootKey. If the bootloader started via the watchdog and the key is valid,
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
    3080:	30 91 00 08 	lds	r19, 0x0800
	// Save the value of the boot key memory before it is overwritten
	uint8_t bootKeyPtrVal = *bootKeyPtr;
	*bootKeyPtr = 0;
    3084:	10 92 00 08 	sts	0x0800, r1

	// Check the reason for the reset so we can act accordingly
	uint8_t  mcusr_state = MCUSR;		// store the initial state of the Status register
    3088:	24 b7       	in	r18, 0x34	; 52
	MCUSR = 0;							// clear all reset flags	
    308a:	14 be       	out	0x34, r1	; 52

	/* Setup hardware required for the bootloader */
	// MAH 8/15/12- Moved this up to before the bootloader go/no-go decision tree so I could use the
	//  timer in that decision tree. Removed the USBInit() call from it; if I'm not going to stay in
	//  the bootloader, there's no point spending the time initializing the USB.
	wdt_disable();
    308c:	88 e1       	ldi	r24, 0x18	; 24
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	80 93 60 00 	sts	0x0060, r24
    3096:	10 92 60 00 	sts	0x0060, r1
    309a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    309c:	80 e8       	ldi	r24, 0x80	; 128
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	80 93 61 00 	sts	0x0061, r24
    30a8:	90 93 61 00 	sts	0x0061, r25
    30ac:	0f be       	out	0x3f, r0	; 63

	// Disable clock division 
	clock_prescale_set(clock_div_1);

	// Relocate the interrupt vector table to the bootloader section
	MCUCR = (1 << IVCE);
    30ae:	41 e0       	ldi	r20, 0x01	; 1
    30b0:	45 bf       	out	0x35, r20	; 53
	MCUCR = (1 << IVSEL);
    30b2:	92 e0       	ldi	r25, 0x02	; 2
    30b4:	95 bf       	out	0x35, r25	; 53

	CPU_PRESCALE(0);
    30b6:	80 93 61 00 	sts	0x0061, r24
    30ba:	10 92 61 00 	sts	0x0061, r1

	// MAH 8/15/12- this replaces bulky pgm_read_word(0) calls later on, to save memory.
	if (pgm_read_word(0) != 0xFFFF) sketchPresent = true;
    30be:	e0 e0       	ldi	r30, 0x00	; 0
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	85 91       	lpm	r24, Z+
    30c4:	94 91       	lpm	r25, Z+
    30c6:	01 96       	adiw	r24, 0x01	; 1
    30c8:	11 f0       	breq	.+4      	; 0x30ce <Application_Jump_Check+0x4e>
    30ca:	40 93 99 01 	sts	0x0199, r20
	//  and all comments throughout are from me.
	// First case: external reset, bootKey NOT in memory. We'll put the bootKey in memory, then spin
	//  our wheels for about 750ms, then proceed to the sketch, if there is one. If, during that 750ms,
	//  another external reset occurs, on the next pass through this decision tree, execution will fall
	//  through to the bootloader.
	if ((mcusr_state & (1 << EXTRF)) && (bootKeyPtrVal != bootKey)) {
    30ce:	21 ff       	sbrs	r18, 1
    30d0:	16 c0       	rjmp	.+44     	; 0x30fe <Application_Jump_Check+0x7e>
    30d2:	80 91 00 01 	lds	r24, 0x0100
    30d6:	38 17       	cp	r19, r24
    30d8:	91 f0       	breq	.+36     	; 0x30fe <Application_Jump_Check+0x7e>
		*bootKeyPtr = bootKey;
    30da:	80 93 00 08 	sts	0x0800, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    30de:	8f ef       	ldi	r24, 0xFF	; 255
    30e0:	9a e1       	ldi	r25, 0x1A	; 26
    30e2:	27 eb       	ldi	r18, 0xB7	; 183
    30e4:	81 50       	subi	r24, 0x01	; 1
    30e6:	90 40       	sbci	r25, 0x00	; 0
    30e8:	20 40       	sbci	r18, 0x00	; 0
    30ea:	e1 f7       	brne	.-8      	; 0x30e4 <Application_Jump_Check+0x64>
    30ec:	00 c0       	rjmp	.+0      	; 0x30ee <Application_Jump_Check+0x6e>
    30ee:	00 00       	nop

		_delay_ms(EXT_RESET_TIMEOUT_PERIOD);

		*bootKeyPtr = 0;
    30f0:	10 92 00 08 	sts	0x0800, r1
		if (sketchPresent) StartSketch();
    30f4:	80 91 99 01 	lds	r24, 0x0199
    30f8:	88 23       	and	r24, r24
    30fa:	69 f0       	breq	.+26     	; 0x3116 <__do_copy_data>
    30fc:	55 d0       	rcall	.+170    	; 0x31a8 <StartSketch>
    30fe:	80 91 99 01 	lds	r24, 0x0199
	}
	// check what to do if we have a sketch in the memory
	else if (sketchPresent){
    3102:	88 23       	and	r24, r24
    3104:	41 f0       	breq	.+16     	; 0x3116 <__do_copy_data>
    3106:	20 fd       	sbrc	r18, 0
		// On a power-on reset, we ALWAYS want to go to the sketch. If there is one.
		if ((mcusr_state & (1 << PORF))) {
    3108:	f9 cf       	rjmp	.-14     	; 0x30fc <Application_Jump_Check+0x7c>
    310a:	23 ff       	sbrs	r18, 3
			StartSketch();
		}
		// On a watchdog reset, if the bootKey isn't set, and there's a sketch, we should just
		//  go straight to the sketch.
		else if ((mcusr_state & (1 << WDRF)) && (bootKeyPtrVal != bootKey)) {
    310c:	04 c0       	rjmp	.+8      	; 0x3116 <__do_copy_data>
    310e:	80 91 00 01 	lds	r24, 0x0100
    3112:	38 13       	cpse	r19, r24
    3114:	f3 cf       	rjmp	.-26     	; 0x30fc <Application_Jump_Check+0x7c>

00003116 <__do_copy_data>:
    3116:	11 e0       	ldi	r17, 0x01	; 1
    3118:	a0 e0       	ldi	r26, 0x00	; 0
    311a:	b1 e0       	ldi	r27, 0x01	; 1
    311c:	e6 ec       	ldi	r30, 0xC6	; 198
    311e:	fe e3       	ldi	r31, 0x3E	; 62
    3120:	02 c0       	rjmp	.+4      	; 0x3126 <__do_copy_data+0x10>
    3122:	05 90       	lpm	r0, Z+
    3124:	0d 92       	st	X+, r0
    3126:	a8 39       	cpi	r26, 0x98	; 152
    3128:	b1 07       	cpc	r27, r17
    312a:	d9 f7       	brne	.-10     	; 0x3122 <__do_copy_data+0xc>

0000312c <__do_clear_bss>:
    312c:	11 e0       	ldi	r17, 0x01	; 1
    312e:	a8 e9       	ldi	r26, 0x98	; 152
    3130:	b1 e0       	ldi	r27, 0x01	; 1
    3132:	01 c0       	rjmp	.+2      	; 0x3136 <.do_clear_bss_start>

00003134 <.do_clear_bss_loop>:
    3134:	1d 92       	st	X+, r1

00003136 <.do_clear_bss_start>:
    3136:	ad 3e       	cpi	r26, 0xED	; 237
    3138:	b1 07       	cpc	r27, r17
    313a:	e1 f7       	brne	.-8      	; 0x3134 <.do_clear_bss_loop>
    313c:	50 d0       	rcall	.+160    	; 0x31de <main>
    313e:	c1 c6       	rjmp	.+3458   	; 0x3ec2 <_exit>

00003140 <__bad_interrupt>:
    3140:	5f cf       	rjmp	.-322    	; 0x3000 <__vectors>

00003142 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3142:	84 e0       	ldi	r24, 0x04	; 4
    3144:	80 93 e9 00 	sts	0x00E9, r24
    3148:	0d c0       	rjmp	.+26     	; 0x3164 <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    314a:	80 91 e8 00 	lds	r24, 0x00E8
    314e:	8b 77       	andi	r24, 0x7B	; 123
    3150:	80 93 e8 00 	sts	0x00E8, r24
    3154:	03 c0       	rjmp	.+6      	; 0x315c <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3156:	8e b3       	in	r24, 0x1e	; 30
    3158:	88 23       	and	r24, r24
    315a:	59 f0       	breq	.+22     	; 0x3172 <FetchNextCommandByte+0x30>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    315c:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    3160:	82 ff       	sbrs	r24, 2
    3162:	f9 cf       	rjmp	.-14     	; 0x3156 <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3164:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    3168:	85 ff       	sbrs	r24, 5
    316a:	ef cf       	rjmp	.-34     	; 0x314a <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    316c:	80 91 f1 00 	lds	r24, 0x00F1
				return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
    3170:	08 95       	ret
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
				return 0;
    3172:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    3174:	08 95       	ret

00003176 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3176:	93 e0       	ldi	r25, 0x03	; 3
    3178:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    317c:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    3180:	95 ff       	sbrs	r25, 5
    3182:	03 c0       	rjmp	.+6      	; 0x318a <WriteNextResponseByte+0x14>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3184:	80 93 f1 00 	sts	0x00F1, r24
    3188:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    318a:	90 91 e8 00 	lds	r25, 0x00E8
    318e:	9e 77       	andi	r25, 0x7E	; 126
    3190:	90 93 e8 00 	sts	0x00E8, r25
    3194:	03 c0       	rjmp	.+6      	; 0x319c <WriteNextResponseByte+0x26>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3196:	9e b3       	in	r25, 0x1e	; 30
    3198:	99 23       	and	r25, r25
    319a:	29 f0       	breq	.+10     	; 0x31a6 <WriteNextResponseByte+0x30>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    319c:	90 91 e8 00 	lds	r25, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    31a0:	90 ff       	sbrs	r25, 0
    31a2:	f9 cf       	rjmp	.-14     	; 0x3196 <WriteNextResponseByte+0x20>
    31a4:	ef cf       	rjmp	.-34     	; 0x3184 <WriteNextResponseByte+0xe>
    31a6:	08 95       	ret

000031a8 <StartSketch>:
//}
}

static void StartSketch(void)
{
	cli();
    31a8:	f8 94       	cli

	/* Undo TIMER1 setup and clear the count before running the sketch */
	TIMSK1 = 0;
    31aa:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = 0;
    31ae:	10 92 81 00 	sts	0x0081, r1
	// MAH 8/15/12 this clear is removed to save memory. Okay, it
	//   introduces some inaccuracy in the timer in the sketch, but
	//   not enough that it really matters.
	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
    31b2:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0;
    31b6:	10 92 84 00 	sts	0x0084, r1

	/* Relocate the interrupt vector table to the application section */
	MCUCR = (1 << IVCE);
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
    31be:	15 be       	out	0x35, r1	; 53
		PORTD &= ~LEDMask;
	}

	static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
	{
		PORTD |= LEDMask;
    31c0:	8b b1       	in	r24, 0x0b	; 11
    31c2:	80 63       	ori	r24, 0x30	; 48
    31c4:	8b b9       	out	0x0b, r24	; 11
	LEDs_TurnOffLEDs(LEDS_ALL_LEDS);

	//TODO turn off UART?

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
    31c6:	2c e0       	ldi	r18, 0x0C	; 12
    31c8:	88 e1       	ldi	r24, 0x18	; 24
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	a8 95       	wdr
    31d2:	80 93 60 00 	sts	0x0060, r24
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	20 93 60 00 	sts	0x0060, r18
    31dc:	ff cf       	rjmp	.-2      	; 0x31dc <StartSketch+0x34>

000031de <main>:
/** Main program entry point. This routine configures the hardware required by the bootloader, then continuously
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
int main(void)
{
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	27 97       	sbiw	r28, 0x07	; 7
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61


	// compacter setup for Leds, RX, TX, Reset Line
	ARDUINO_DDR |= LEDS_ALL_LEDS | (1 << PD3) | AVR_RESET_LINE_MASK;
    31f2:	8a b1       	in	r24, 0x0a	; 10
    31f4:	88 6b       	ori	r24, 0xB8	; 184
    31f6:	8a b9       	out	0x0a, r24	; 10
	ARDUINO_PORT |= LEDS_ALL_LEDS | (1 << 2) | AVR_RESET_LINE_MASK;
    31f8:	8b b1       	in	r24, 0x0b	; 11
    31fa:	84 6b       	ori	r24, 0xB4	; 180
    31fc:	8b b9       	out	0x0b, r24	; 11

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
    31fe:	5a d4       	rcall	.+2228   	; 0x3ab4 <USB_Init>
    3200:	84 e0       	ldi	r24, 0x04	; 4

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
    3202:	85 bd       	out	0x25, r24	; 37
    3204:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3206:	13 e0       	ldi	r17, 0x03	; 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3208:	99 24       	eor	r9, r9
    320a:	93 94       	inc	r9
    320c:	69 e0       	ldi	r22, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
	}
	else if (Command == AVR109_COMMAND_ReadExtendedFuses)
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    320e:	b6 2e       	mov	r11, r22
    3210:	ee c1       	rjmp	.+988    	; 0x35ee <main+0x410>
    3212:	24 e0       	ldi	r18, 0x04	; 4
    3214:	20 93 e9 00 	sts	0x00E9, r18
    3218:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    321c:	82 ff       	sbrs	r24, 2
{
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Check if endpoint has a command in it sent from the host */
	if (Endpoint_IsOUTReceived()){
    321e:	8c c1       	rjmp	.+792    	; 0x3538 <main+0x35a>
    3220:	90 df       	rcall	.-224    	; 0x3142 <FetchNextCommandByte>

		/* Read in the bootloader command (first byte sent from host) */
		uint8_t Command = FetchNextCommandByte();
    3222:	98 2f       	mov	r25, r24
    3224:	80 91 9a 01 	lds	r24, 0x019A

		// USB-Serial Mode
		if (!CDCActive){
    3228:	81 11       	cpse	r24, r1
    322a:	13 c0       	rjmp	.+38     	; 0x3252 <main+0x74>
    322c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    3230:	85 ff       	sbrs	r24, 5
    3232:	fc cf       	rjmp	.-8      	; 0x322c <main+0x4e>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    3234:	90 93 ce 00 	sts	0x00CE, r25
				UDR1 = DataByte;
    3238:	80 91 f2 00 	lds	r24, 0x00F2
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    323c:	81 11       	cpse	r24, r1
    323e:	05 c0       	rjmp	.+10     	; 0x324a <main+0x6c>
			/* Store received byte into the USART transmit buffer */
			Serial_SendByte(Command);

			// if endpoint is completely empty/read acknowledge that to the host
			if (!(Endpoint_BytesInEndpoint()))
    3240:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3244:	8b 77       	andi	r24, 0x7B	; 123
    3246:	80 93 e8 00 	sts	0x00E8, r24
    324a:	5c 98       	cbi	0x0b, 4	; 11
    324c:	10 93 9b 01 	sts	0x019B, r17
				Endpoint_ClearOUT();

			// Turn on RX LED
			LEDs_TurnOnLEDs(LEDMASK_RX);
			RxLEDPulse = TX_RX_LED_PULSE_MS;
    3250:	77 c1       	rjmp	.+750    	; 0x3540 <main+0x362>
    3252:	95 34       	cpi	r25, 0x45	; 69
    3254:	19 f4       	brne	.+6      	; 0x325c <main+0x7e>
			return;
	}
}

static void Bootloader_Task(const uint8_t Command){
	if (Command == AVR109_COMMAND_ExitBootloader)
    3256:	10 92 01 01 	sts	0x0101, r1
	{
		RunBootloader = false;
    325a:	07 c0       	rjmp	.+14     	; 0x326a <main+0x8c>
    325c:	89 2f       	mov	r24, r25
    325e:	88 57       	subi	r24, 0x78	; 120

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if ((Command == AVR109_COMMAND_SetLED) || (Command == AVR109_COMMAND_ClearLED) ||
    3260:	82 30       	cpi	r24, 0x02	; 2
    3262:	10 f0       	brcs	.+4      	; 0x3268 <main+0x8a>
    3264:	94 35       	cpi	r25, 0x54	; 84
    3266:	21 f4       	brne	.+8      	; 0x3270 <main+0x92>
    3268:	6c df       	rcall	.-296    	; 0x3142 <FetchNextCommandByte>
    326a:	8d e0       	ldi	r24, 0x0D	; 13
		(Command == AVR109_COMMAND_SelectDeviceType))
	{
		FetchNextCommandByte();
    326c:	84 df       	rcall	.-248    	; 0x3176 <WriteNextResponseByte>
    326e:	68 c1       	rjmp	.+720    	; 0x3540 <main+0x362>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
    3270:	90 35       	cpi	r25, 0x50	; 80
    3272:	d9 f3       	breq	.-10     	; 0x326a <main+0x8c>
    3274:	9c 34       	cpi	r25, 0x4C	; 76
    3276:	09 f4       	brne	.+2      	; 0x327a <main+0x9c>
	}
	else if ((Command == AVR109_COMMAND_EnterProgrammingMode) || (Command == AVR109_COMMAND_LeaveProgrammingMode))
    3278:	f8 cf       	rjmp	.-16     	; 0x326a <main+0x8c>
    327a:	94 37       	cpi	r25, 0x74	; 116
    327c:	21 f4       	brne	.+8      	; 0x3286 <main+0xa8>
    327e:	84 e4       	ldi	r24, 0x44	; 68
    3280:	7a df       	rcall	.-268    	; 0x3176 <WriteNextResponseByte>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadPartCode)
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	f3 cf       	rjmp	.-26     	; 0x326c <main+0x8e>
	{
		//TODO needed?
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
    3286:	91 36       	cpi	r25, 0x61	; 97
    3288:	11 f4       	brne	.+4      	; 0x328e <main+0xb0>
    328a:	89 e5       	ldi	r24, 0x59	; 89
		WriteNextResponseByte(0x00);
    328c:	ef cf       	rjmp	.-34     	; 0x326c <main+0x8e>
    328e:	91 34       	cpi	r25, 0x41	; 65
	}
	else if (Command == AVR109_COMMAND_ReadAutoAddressIncrement)
    3290:	d1 f4       	brne	.+52     	; 0x32c6 <main+0xe8>
    3292:	57 df       	rcall	.-338    	; 0x3142 <FetchNextCommandByte>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
    3294:	08 2f       	mov	r16, r24
    3296:	55 df       	rcall	.-342    	; 0x3142 <FetchNextCommandByte>
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	88 0f       	add	r24, r24
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress = (FetchNextCommandByte() << 9);
    329c:	99 1f       	adc	r25, r25
    329e:	00 0f       	add	r16, r16
    32a0:	0a 83       	std	Y+2, r16	; 0x02
		CurrAddress |= (FetchNextCommandByte() << 1);
    32a2:	19 82       	std	Y+1, r1	; 0x01
    32a4:	29 81       	ldd	r18, Y+1	; 0x01
    32a6:	3a 81       	ldd	r19, Y+2	; 0x02
    32a8:	82 2b       	or	r24, r18
    32aa:	93 2b       	or	r25, r19
		WriteNextResponseByte('Y');
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress = (FetchNextCommandByte() << 9);
    32ac:	aa 27       	eor	r26, r26
    32ae:	97 fd       	sbrc	r25, 7
    32b0:	a0 95       	com	r26
		CurrAddress |= (FetchNextCommandByte() << 1);
    32b2:	ba 2f       	mov	r27, r26
    32b4:	80 93 de 01 	sts	0x01DE, r24
    32b8:	90 93 df 01 	sts	0x01DF, r25
    32bc:	a0 93 e0 01 	sts	0x01E0, r26
    32c0:	b0 93 e1 01 	sts	0x01E1, r27
    32c4:	d2 cf       	rjmp	.-92     	; 0x326a <main+0x8c>
    32c6:	90 37       	cpi	r25, 0x70	; 112
    32c8:	11 f4       	brne	.+4      	; 0x32ce <main+0xf0>
    32ca:	83 e5       	ldi	r24, 0x53	; 83
    32cc:	cf cf       	rjmp	.-98     	; 0x326c <main+0x8e>
    32ce:	93 35       	cpi	r25, 0x53	; 83
    32d0:	71 f4       	brne	.+28     	; 0x32ee <main+0x110>
    32d2:	4f e8       	ldi	r20, 0x8F	; 143

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderInterface)
    32d4:	e4 2e       	mov	r14, r20
    32d6:	41 e0       	ldi	r20, 0x01	; 1
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
    32d8:	f4 2e       	mov	r15, r20
    32da:	f7 01       	movw	r30, r14
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
    32dc:	81 91       	ld	r24, Z+
    32de:	7f 01       	movw	r14, r30
    32e0:	4a df       	rcall	.-364    	; 0x3176 <WriteNextResponseByte>
    32e2:	f6 e9       	ldi	r31, 0x96	; 150
    32e4:	ef 16       	cp	r14, r31
    32e6:	f1 e0       	ldi	r31, 0x01	; 1
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
			WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    32e8:	ff 06       	cpc	r15, r31
    32ea:	b9 f7       	brne	.-18     	; 0x32da <main+0xfc>
    32ec:	29 c1       	rjmp	.+594    	; 0x3540 <main+0x362>
    32ee:	96 35       	cpi	r25, 0x56	; 86
    32f0:	21 f4       	brne	.+8      	; 0x32fa <main+0x11c>
		WriteNextResponseByte('S');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    32f2:	81 e3       	ldi	r24, 0x31	; 49
    32f4:	40 df       	rcall	.-384    	; 0x3176 <WriteNextResponseByte>
    32f6:	80 e3       	ldi	r24, 0x30	; 48
    32f8:	b9 cf       	rjmp	.-142    	; 0x326c <main+0x8e>
    32fa:	93 37       	cpi	r25, 0x73	; 115
    32fc:	31 f4       	brne	.+12     	; 0x330a <main+0x12c>
			WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderSWVersion)
    32fe:	82 e8       	ldi	r24, 0x82	; 130
    3300:	3a df       	rcall	.-396    	; 0x3176 <WriteNextResponseByte>
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    3302:	84 e9       	ldi	r24, 0x94	; 148
    3304:	38 df       	rcall	.-400    	; 0x3176 <WriteNextResponseByte>
    3306:	8e e1       	ldi	r24, 0x1E	; 30
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    3308:	b1 cf       	rjmp	.-158    	; 0x326c <main+0x8e>
    330a:	95 36       	cpi	r25, 0x65	; 101
	}
	else if (Command == AVR109_COMMAND_ReadSignature)
    330c:	b1 f4       	brne	.+44     	; 0x333a <main+0x15c>
    330e:	e0 e0       	ldi	r30, 0x00	; 0
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	10 93 57 00 	sts	0x0057, r17
		WriteNextResponseByte(AVR_SIGNATURE_2);
    3316:	e8 95       	spm
    3318:	07 b6       	in	r0, 0x37	; 55
    331a:	00 fc       	sbrc	r0, 0
		WriteNextResponseByte(AVR_SIGNATURE_1);
    331c:	fd cf       	rjmp	.-6      	; 0x3318 <main+0x13a>
    331e:	25 e0       	ldi	r18, 0x05	; 5
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
    3320:	20 93 57 00 	sts	0x0057, r18
    3324:	e8 95       	spm
    3326:	07 b6       	in	r0, 0x37	; 55
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    3328:	00 fc       	sbrc	r0, 0
    332a:	fd cf       	rjmp	.-6      	; 0x3326 <main+0x148>
    332c:	e0 58       	subi	r30, 0x80	; 128
			boot_spm_busy_wait();
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	e1 15       	cp	r30, r1
    3332:	30 e3       	ldi	r19, 0x30	; 48
			boot_page_write(CurrFlashAddress);
    3334:	f3 07       	cpc	r31, r19
    3336:	69 f7       	brne	.-38     	; 0x3312 <main+0x134>
    3338:	98 cf       	rjmp	.-208    	; 0x326a <main+0x8c>
    333a:	92 37       	cpi	r25, 0x72	; 114
			boot_spm_busy_wait();
    333c:	19 f4       	brne	.+6      	; 0x3344 <main+0x166>
    333e:	e1 e0       	ldi	r30, 0x01	; 1
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	04 c0       	rjmp	.+8      	; 0x334c <main+0x16e>
    3344:	96 34       	cpi	r25, 0x46	; 70
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    3346:	31 f4       	brne	.+12     	; 0x3354 <main+0x176>
    3348:	e0 e0       	ldi	r30, 0x00	; 0
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	b0 92 57 00 	sts	0x0057, r11

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
#endif
	else if (Command == AVR109_COMMAND_ReadLockbits)
    3350:	84 91       	lpm	r24, Z+
    3352:	8c cf       	rjmp	.-232    	; 0x326c <main+0x8e>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    3354:	9e 34       	cpi	r25, 0x4E	; 78
    3356:	19 f4       	brne	.+6      	; 0x335e <main+0x180>
    3358:	e3 e0       	ldi	r30, 0x03	; 3
	}
	else if (Command == AVR109_COMMAND_ReadLowFuses)
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	f7 cf       	rjmp	.-18     	; 0x334c <main+0x16e>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    335e:	91 35       	cpi	r25, 0x51	; 81
    3360:	19 f4       	brne	.+6      	; 0x3368 <main+0x18a>
    3362:	e2 e0       	ldi	r30, 0x02	; 2
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	f2 cf       	rjmp	.-28     	; 0x334c <main+0x16e>
    3368:	92 36       	cpi	r25, 0x62	; 98
	}
	else if (Command == AVR109_COMMAND_ReadHighFuses)
    336a:	31 f4       	brne	.+12     	; 0x3378 <main+0x19a>
    336c:	89 e5       	ldi	r24, 0x59	; 89
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    336e:	03 df       	rcall	.-506    	; 0x3176 <WriteNextResponseByte>
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	01 df       	rcall	.-510    	; 0x3176 <WriteNextResponseByte>
	}
	else if (Command == AVR109_COMMAND_ReadExtendedFuses)
    3374:	80 e8       	ldi	r24, 0x80	; 128
    3376:	7a cf       	rjmp	.-268    	; 0x326c <main+0x8e>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    3378:	92 34       	cpi	r25, 0x42	; 66
    337a:	19 f0       	breq	.+6      	; 0x3382 <main+0x1a4>
    337c:	97 36       	cpi	r25, 0x67	; 103
	}
#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == AVR109_COMMAND_GetBlockWriteSupport)
    337e:	09 f0       	breq	.+2      	; 0x3382 <main+0x1a4>
    3380:	d7 c0       	rjmp	.+430    	; 0x3530 <main+0x352>
	{
		WriteNextResponseByte('Y');
    3382:	9d 83       	std	Y+5, r25	; 0x05
    3384:	de de       	rcall	.-580    	; 0x3142 <FetchNextCommandByte>
    3386:	e8 2e       	mov	r14, r24

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    3388:	dc de       	rcall	.-584    	; 0x3142 <FetchNextCommandByte>
    338a:	f8 2e       	mov	r15, r24
    338c:	da de       	rcall	.-588    	; 0x3142 <FetchNextCommandByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    338e:	08 2f       	mov	r16, r24
    3390:	85 54       	subi	r24, 0x45	; 69
	}
	else if ((Command == AVR109_COMMAND_BlockWrite) || (Command == AVR109_COMMAND_BlockRead))
    3392:	9d 81       	ldd	r25, Y+5	; 0x05
    3394:	82 30       	cpi	r24, 0x02	; 2
    3396:	10 f0       	brcs	.+4      	; 0x339c <main+0x1be>
    3398:	8f e3       	ldi	r24, 0x3F	; 63
    339a:	68 cf       	rjmp	.-304    	; 0x326c <main+0x8e>
	char     MemoryType;

	uint8_t  HighByte = 0;
	uint8_t  LowByte = 0;

	BlockSize = (FetchNextCommandByte() << 8);
    339c:	7e 2c       	mov	r7, r14
    339e:	61 2c       	mov	r6, r1
    33a0:	93 01       	movw	r18, r6
    33a2:	2f 29       	or	r18, r15
	BlockSize |= FetchNextCommandByte();
    33a4:	3f 83       	std	Y+7, r19	; 0x07
    33a6:	2e 83       	std	Y+6, r18	; 0x06
    33a8:	97 36       	cpi	r25, 0x67	; 103

	MemoryType = FetchNextCommandByte();
    33aa:	09 f0       	breq	.+2      	; 0x33ae <main+0x1d0>
    33ac:	48 c0       	rjmp	.+144    	; 0x343e <main+0x260>
    33ae:	31 e1       	ldi	r19, 0x11	; 17

	if ((MemoryType != MEMORY_TYPE_FLASH) && (MemoryType != MEMORY_TYPE_EEPROM))
    33b0:	30 93 57 00 	sts	0x0057, r19
    33b4:	e8 95       	spm
    33b6:	a1 2c       	mov	r10, r1
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
    33b8:	3c c0       	rjmp	.+120    	; 0x3432 <main+0x254>
    33ba:	c0 90 de 01 	lds	r12, 0x01DE
	char     MemoryType;

	uint8_t  HighByte = 0;
	uint8_t  LowByte = 0;

	BlockSize = (FetchNextCommandByte() << 8);
    33be:	d0 90 df 01 	lds	r13, 0x01DF
	BlockSize |= FetchNextCommandByte();
    33c2:	e0 90 e0 01 	lds	r14, 0x01E0
    33c6:	f0 90 e1 01 	lds	r15, 0x01E1

		return;
	}

	/* Check if command is to read a memory block */
	if (Command == AVR109_COMMAND_BlockRead)
    33ca:	06 34       	cpi	r16, 0x46	; 70
    33cc:	b9 f4       	brne	.+46     	; 0x33fc <main+0x21e>
	{
		/* Re-enable RWW section */
		boot_rww_enable();
    33ce:	ea 2d       	mov	r30, r10
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	ec 29       	or	r30, r12
    33d4:	fd 29       	or	r31, r13
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	uint8_t  HighByte = 0;
    33d6:	84 91       	lpm	r24, Z+
    33d8:	ce de       	rcall	.-612    	; 0x3176 <WriteNextResponseByte>
    33da:	aa 20       	and	r10, r10
    33dc:	69 f0       	breq	.+26     	; 0x33f8 <main+0x21a>
    33de:	82 e0       	ldi	r24, 0x02	; 2
    33e0:	c8 0e       	add	r12, r24
    33e2:	d1 1c       	adc	r13, r1
    33e4:	e1 1c       	adc	r14, r1
    33e6:	f1 1c       	adc	r15, r1
    33e8:	c0 92 de 01 	sts	0x01DE, r12
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
    33ec:	d0 92 df 01 	sts	0x01DF, r13
			{
				/* Read the next FLASH byte from the current FLASH page */
#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    33f0:	e0 92 e0 01 	sts	0x01E0, r14
    33f4:	f0 92 e1 01 	sts	0x01E1, r15
    33f8:	a9 24       	eor	r10, r9
    33fa:	15 c0       	rjmp	.+42     	; 0x3426 <main+0x248>
#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    33fc:	d7 01       	movw	r26, r14
    33fe:	c6 01       	movw	r24, r12
					CurrAddress += 2;
    3400:	b6 95       	lsr	r27
    3402:	a7 95       	ror	r26
    3404:	97 95       	ror	r25
    3406:	87 95       	ror	r24
    3408:	46 d5       	rcall	.+2700   	; 0x3e96 <__eerd_byte_usb162>
    340a:	b5 de       	rcall	.-662    	; 0x3176 <WriteNextResponseByte>
    340c:	92 e0       	ldi	r25, 0x02	; 2
    340e:	c9 0e       	add	r12, r25
    3410:	d1 1c       	adc	r13, r1
    3412:	e1 1c       	adc	r14, r1
    3414:	f1 1c       	adc	r15, r1
    3416:	c0 92 de 01 	sts	0x01DE, r12
    341a:	d0 92 df 01 	sts	0x01DF, r13
				HighByte = !HighByte;
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    341e:	e0 92 e0 01 	sts	0x01E0, r14
    3422:	f0 92 e1 01 	sts	0x01E1, r15
    3426:	2e 81       	ldd	r18, Y+6	; 0x06
    3428:	3f 81       	ldd	r19, Y+7	; 0x07
    342a:	21 50       	subi	r18, 0x01	; 1
    342c:	31 09       	sbc	r19, r1
    342e:	3f 83       	std	Y+7, r19	; 0x07
    3430:	2e 83       	std	Y+6, r18	; 0x06

				/* Increment the address counter after use */
				CurrAddress += 2;
    3432:	2e 81       	ldd	r18, Y+6	; 0x06
    3434:	3f 81       	ldd	r19, Y+7	; 0x07
    3436:	23 2b       	or	r18, r19
    3438:	09 f0       	breq	.+2      	; 0x343c <main+0x25e>
    343a:	bf cf       	rjmp	.-130    	; 0x33ba <main+0x1dc>
    343c:	81 c0       	rjmp	.+258    	; 0x3540 <main+0x362>
    343e:	20 90 de 01 	lds	r2, 0x01DE
    3442:	30 90 df 01 	lds	r3, 0x01DF
    3446:	40 90 e0 01 	lds	r4, 0x01E0
    344a:	50 90 e1 01 	lds	r5, 0x01E1
    344e:	06 34       	cpi	r16, 0x46	; 70
    3450:	09 f0       	breq	.+2      	; 0x3454 <main+0x276>
    3452:	5b c0       	rjmp	.+182    	; 0x350a <main+0x32c>
    3454:	f1 01       	movw	r30, r2
    3456:	10 93 57 00 	sts	0x0057, r17
	if (Command == AVR109_COMMAND_BlockRead)
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    345a:	e8 95       	spm
    345c:	07 b6       	in	r0, 0x37	; 55
    345e:	00 fc       	sbrc	r0, 0
    3460:	fd cf       	rjmp	.-6      	; 0x345c <main+0x27e>
    3462:	53 c0       	rjmp	.+166    	; 0x350a <main+0x32c>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    3464:	06 34       	cpi	r16, 0x46	; 70
    3466:	41 f5       	brne	.+80     	; 0x34b8 <main+0x2da>
    3468:	aa 20       	and	r10, r10
    346a:	11 f1       	breq	.+68     	; 0x34b0 <main+0x2d2>
    346c:	c0 90 de 01 	lds	r12, 0x01DE
    3470:	d0 90 df 01 	lds	r13, 0x01DF

		if (MemoryType == MEMORY_TYPE_FLASH)
    3474:	e0 90 e0 01 	lds	r14, 0x01E0
    3478:	f0 90 e1 01 	lds	r15, 0x01E1
		{
			boot_page_erase(PageStartAddress);
    347c:	62 de       	rcall	.-828    	; 0x3142 <FetchNextCommandByte>
    347e:	8c 83       	std	Y+4, r24	; 0x04
    3480:	1b 82       	std	Y+3, r1	; 0x03
			boot_spm_busy_wait();
    3482:	2b 81       	ldd	r18, Y+3	; 0x03
    3484:	3c 81       	ldd	r19, Y+4	; 0x04
    3486:	28 29       	or	r18, r8
    3488:	f6 01       	movw	r30, r12
		}

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
    348a:	09 01       	movw	r0, r18
    348c:	90 92 57 00 	sts	0x0057, r9
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    3490:	e8 95       	spm
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    3492:	11 24       	eor	r1, r1
    3494:	f2 e0       	ldi	r31, 0x02	; 2
    3496:	cf 0e       	add	r12, r31
    3498:	d1 1c       	adc	r13, r1
    349a:	e1 1c       	adc	r14, r1
    349c:	f1 1c       	adc	r15, r1
    349e:	c0 92 de 01 	sts	0x01DE, r12
    34a2:	d0 92 df 01 	sts	0x01DF, r13
    34a6:	e0 92 e0 01 	sts	0x01E0, r14
    34aa:	f0 92 e1 01 	sts	0x01E1, r15
    34ae:	02 c0       	rjmp	.+4      	; 0x34b4 <main+0x2d6>
    34b0:	48 de       	rcall	.-880    	; 0x3142 <FetchNextCommandByte>
    34b2:	88 2e       	mov	r8, r24
    34b4:	a9 24       	eor	r10, r9
    34b6:	22 c0       	rjmp	.+68     	; 0x34fc <main+0x31e>
    34b8:	44 de       	rcall	.-888    	; 0x3142 <FetchNextCommandByte>
    34ba:	68 2f       	mov	r22, r24

					/* Increment the address counter after use */
					CurrAddress += 2;
    34bc:	80 91 de 01 	lds	r24, 0x01DE
    34c0:	90 91 df 01 	lds	r25, 0x01DF
    34c4:	a0 91 e0 01 	lds	r26, 0x01E0
    34c8:	b0 91 e1 01 	lds	r27, 0x01E1
    34cc:	b6 95       	lsr	r27
    34ce:	a7 95       	ror	r26
    34d0:	97 95       	ror	r25
    34d2:	87 95       	ror	r24
    34d4:	e8 d4       	rcall	.+2512   	; 0x3ea6 <__eewr_byte_usb162>
    34d6:	80 91 de 01 	lds	r24, 0x01DE
				}
				else
				{
					LowByte = FetchNextCommandByte();
    34da:	90 91 df 01 	lds	r25, 0x01DF
    34de:	a0 91 e0 01 	lds	r26, 0x01E0
				HighByte = !HighByte;
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    34e2:	b0 91 e1 01 	lds	r27, 0x01E1
    34e6:	02 96       	adiw	r24, 0x02	; 2
    34e8:	a1 1d       	adc	r26, r1
    34ea:	b1 1d       	adc	r27, r1
    34ec:	80 93 de 01 	sts	0x01DE, r24
    34f0:	90 93 df 01 	sts	0x01DF, r25
    34f4:	a0 93 e0 01 	sts	0x01E0, r26
    34f8:	b0 93 e1 01 	sts	0x01E1, r27
    34fc:	2e 81       	ldd	r18, Y+6	; 0x06
    34fe:	3f 81       	ldd	r19, Y+7	; 0x07
    3500:	21 50       	subi	r18, 0x01	; 1
    3502:	31 09       	sbc	r19, r1

				/* Increment the address counter after use */
				CurrAddress += 2;
    3504:	3f 83       	std	Y+7, r19	; 0x07
    3506:	2e 83       	std	Y+6, r18	; 0x06
    3508:	02 c0       	rjmp	.+4      	; 0x350e <main+0x330>
    350a:	81 2c       	mov	r8, r1
    350c:	a1 2c       	mov	r10, r1
    350e:	2e 81       	ldd	r18, Y+6	; 0x06
    3510:	3f 81       	ldd	r19, Y+7	; 0x07
    3512:	23 2b       	or	r18, r19
    3514:	09 f0       	breq	.+2      	; 0x3518 <main+0x33a>
    3516:	a6 cf       	rjmp	.-180    	; 0x3464 <main+0x286>
    3518:	06 34       	cpi	r16, 0x46	; 70
    351a:	09 f0       	breq	.+2      	; 0x351e <main+0x340>
    351c:	a6 ce       	rjmp	.-692    	; 0x326a <main+0x8c>
    351e:	25 e0       	ldi	r18, 0x05	; 5
    3520:	f1 01       	movw	r30, r2
    3522:	20 93 57 00 	sts	0x0057, r18
    3526:	e8 95       	spm
    3528:	07 b6       	in	r0, 0x37	; 55
    352a:	00 fc       	sbrc	r0, 0
    352c:	fd cf       	rjmp	.-6      	; 0x3528 <main+0x34a>
    352e:	9d ce       	rjmp	.-710    	; 0x326a <main+0x8c>
    3530:	9b 31       	cpi	r25, 0x1B	; 27
    3532:	09 f0       	breq	.+2      	; 0x3536 <main+0x358>
    3534:	31 cf       	rjmp	.-414    	; 0x3398 <main+0x1ba>
    3536:	04 c0       	rjmp	.+8      	; 0x3540 <main+0x362>
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == MEMORY_TYPE_FLASH)
    3538:	80 91 9a 01 	lds	r24, 0x019A
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    353c:	81 11       	cpse	r24, r1
    353e:	54 c0       	rjmp	.+168    	; 0x35e8 <main+0x40a>
    3540:	8f b7       	in	r24, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	00 91 98 01 	lds	r16, 0x0198
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
    3548:	8f bf       	out	0x3f, r24	; 63
    354a:	80 91 9a 01 	lds	r24, 0x019A
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    354e:	81 11       	cpse	r24, r1
    3550:	1d c0       	rjmp	.+58     	; 0x358c <main+0x3ae>
    3552:	00 23       	and	r16, r16
    3554:	09 f4       	brne	.+2      	; 0x3558 <main+0x37a>

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    3556:	48 c0       	rjmp	.+144    	; 0x35e8 <main+0x40a>
    3558:	5d 98       	cbi	0x0b, 5	; 11
    355a:	10 93 9c 01 	sts	0x019C, r17

		/* Increment the address after use */
		CurrAddress += 2;
	}
#endif
	else if (Command != AVR109_COMMAND_Sync)
    355e:	16 c0       	rjmp	.+44     	; 0x358c <main+0x3ae>
    3560:	f0 90 9d 01 	lds	r15, 0x019D
    3564:	ef 2d       	mov	r30, r15
		// Bootloader Mode
		else
			Bootloader_Task(Command);
	}
	// nothing received in Bootloader mode
	else if (CDCActive)
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	e2 56       	subi	r30, 0x62	; 98
    356a:	fe 4f       	sbci	r31, 0xFE	; 254
    356c:	80 81       	ld	r24, Z
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    356e:	03 de       	rcall	.-1018   	; 0x3176 <WriteNextResponseByte>
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3570:	8f 2d       	mov	r24, r15

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	// Buffercount is 0 in Bootloader mode!
	BytesToSend = BufferCount;
    3572:	8f 5f       	subi	r24, 0xFF	; 255
    3574:	8f 73       	andi	r24, 0x3F	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3576:	80 93 9d 01 	sts	0x019D, r24

	SetGlobalInterruptMask(CurrentGlobalInt);

	// dont try to flush data in USB-Serial mode if there is no data. This will block the USB
	if (!CDCActive){
    357a:	9f b7       	in	r25, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	80 91 98 01 	lds	r24, 0x0198
		if (!BytesToSend)
    3582:	81 50       	subi	r24, 0x01	; 1
    3584:	80 93 98 01 	sts	0x0198, r24
			return;
		else{
			// Turn on TX LED
			LEDs_TurnOnLEDs(LEDMASK_TX);
			TxLEDPulse = TX_RX_LED_PULSE_MS;
    3588:	9f bf       	out	0x3f, r25	; 63
    358a:	01 50       	subi	r16, 0x01	; 1
    358c:	01 11       	cpse	r16, r1
	}

	// Read bytes from the USART receive buffer into the USB IN endpoint, max 1 bank size
	while (BytesToSend--){
		// Write the Data to the Endpoint */
		WriteNextResponseByte(USARTtoUSB_Buffer_Data[BufferIndex++]);
    358e:	e8 cf       	rjmp	.-48     	; 0x3560 <main+0x382>
    3590:	10 93 e9 00 	sts	0x00E9, r17
    3594:	90 91 e8 00 	lds	r25, 0x00E8
    3598:	80 91 e8 00 	lds	r24, 0x00E8
    359c:	8e 77       	andi	r24, 0x7E	; 126
    359e:	80 93 e8 00 	sts	0x00E8, r24
    35a2:	95 fd       	sbrc	r25, 5

		// increase the buffer position and wrap around if needed
		BufferIndex %= BUFFER_SIZE;
    35a4:	11 c0       	rjmp	.+34     	; 0x35c8 <main+0x3ea>
    35a6:	80 91 e8 00 	lds	r24, 0x00E8
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    35aa:	80 fd       	sbrc	r24, 0
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    35ac:	04 c0       	rjmp	.+8      	; 0x35b6 <main+0x3d8>
		// turn off interrupts to save the value properly
		uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
		GlobalInterruptDisable();

		// decrease buffer count
		BufferCount--;
    35ae:	8e b3       	in	r24, 0x1e	; 30
    35b0:	81 11       	cpse	r24, r1
    35b2:	f9 cf       	rjmp	.-14     	; 0x35a6 <main+0x3c8>
    35b4:	0d c0       	rjmp	.+26     	; 0x35d0 <main+0x3f2>
    35b6:	80 91 e8 00 	lds	r24, 0x00E8
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    35ba:	8e 77       	andi	r24, 0x7E	; 126
			TxLEDPulse = TX_RX_LED_PULSE_MS;
		}
	}

	// Read bytes from the USART receive buffer into the USB IN endpoint, max 1 bank size
	while (BytesToSend--){
    35bc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    35c0:	03 c0       	rjmp	.+6      	; 0x35c8 <main+0x3ea>
    35c2:	8e b3       	in	r24, 0x1e	; 30
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    35c4:	88 23       	and	r24, r24
    35c6:	21 f0       	breq	.+8      	; 0x35d0 <main+0x3f2>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    35c8:	80 91 e8 00 	lds	r24, 0x00E8
    35cc:	80 ff       	sbrs	r24, 0
    35ce:	f9 cf       	rjmp	.-14     	; 0x35c2 <main+0x3e4>
    35d0:	80 91 9a 01 	lds	r24, 0x019A

	// Send the endpoint data to the host */
	Endpoint_ClearIN();

	// If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer
	if (IsEndpointFull)
    35d4:	88 23       	and	r24, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    35d6:	41 f0       	breq	.+16     	; 0x35e8 <main+0x40a>
    35d8:	34 e0       	ldi	r19, 0x04	; 4
	{
		// wait for the sending to flush
		while (!(Endpoint_IsINReady()))
    35da:	30 93 e9 00 	sts	0x00E9, r19
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    35de:	80 91 e8 00 	lds	r24, 0x00E8
    35e2:	8b 77       	andi	r24, 0x7B	; 123
    35e4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    35e8:	a8 99       	sbic	0x15, 0	; 21
    35ea:	a8 9a       	sbi	0x15, 0	; 21
    35ec:	17 d4       	rcall	.+2094   	; 0x3e1c <USB_USBTask>
    35ee:	80 91 01 01 	lds	r24, 0x0101
	}

	// Wait until the data has been sent to the host
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    35f2:	81 11       	cpse	r24, r1
    35f4:	0e ce       	rjmp	.-996    	; 0x3212 <main+0x34>
    35f6:	80 91 e0 00 	lds	r24, 0x00E0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    35fa:	81 60       	ori	r24, 0x01	; 1
		// send a zero length package
		Endpoint_ClearIN();
	}

	// Wait until the data has been sent to the host
	while (!(Endpoint_IsINReady()))
    35fc:	80 93 e0 00 	sts	0x00E0, r24
	}

	FlushCDC();

	// in Bootloader mode clear the Out endpoint
	if (CDCActive){
    3600:	d3 dd       	rcall	.-1114   	; 0x31a8 <StartSketch>

00003602 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This configures the device's endpoints ready
 *  to relay data to and from the attached USB host.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    3602:	42 e0       	ldi	r20, 0x02	; 2
    3604:	61 ec       	ldi	r22, 0xC1	; 193
    3606:	82 e0       	ldi	r24, 0x02	; 2
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3608:	ee d1       	rcall	.+988    	; 0x39e6 <Endpoint_ConfigureEndpoint_Prv>
    360a:	42 e1       	ldi	r20, 0x12	; 18
    360c:	61 e8       	ldi	r22, 0x81	; 129
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    360e:	83 e0       	ldi	r24, 0x03	; 3
    3610:	ea d1       	rcall	.+980    	; 0x39e6 <Endpoint_ConfigureEndpoint_Prv>
    3612:	42 e1       	ldi	r20, 0x12	; 18
    3614:	60 e8       	ldi	r22, 0x80	; 128
    3616:	84 e0       	ldi	r24, 0x04	; 4
	while (RunBootloader)
	{
		//TODO remove
		CDC_Task();

		if (TIFR0 & (1 << TOV0)){
    3618:	e6 c1       	rjmp	.+972    	; 0x39e6 <Endpoint_ConfigureEndpoint_Prv>

0000361a <EVENT_USB_Device_ControlRequest>:
			// reset the timer
			TIFR0 |= (1 << TOV0);
    361a:	cf 93       	push	r28
			//	// Turn off RX LED(s) once the RX pulse period has elapsed
			//	if (RxLEDPulse && !(--RxLEDPulse))
			//		LEDs_TurnOffLEDs(LEDMASK_RX);
		}

		USB_USBTask();
    361c:	80 91 e5 01 	lds	r24, 0x01E5
	//SetupHardware();

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	while (RunBootloader)
    3620:	98 2f       	mov	r25, r24
    3622:	9f 77       	andi	r25, 0x7F	; 127
    3624:	91 32       	cpi	r25, 0x21	; 33
    3626:	09 f0       	breq	.+2      	; 0x362a <EVENT_USB_Device_ControlRequest+0x10>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    3628:	c4 c0       	rjmp	.+392    	; 0x37b2 <EVENT_USB_Device_ControlRequest+0x198>
	{
		return;
	}

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    362a:	90 91 e6 01 	lds	r25, 0x01E6
    362e:	91 32       	cpi	r25, 0x21	; 33
    3630:	39 f0       	breq	.+14     	; 0x3640 <EVENT_USB_Device_ControlRequest+0x26>

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Jump to beginning of application space to run the sketch - do not reset */
	StartSketch();
    3632:	92 32       	cpi	r25, 0x22	; 34
    3634:	09 f4       	brne	.+2      	; 0x3638 <EVENT_USB_Device_ControlRequest+0x1e>
    3636:	aa c0       	rjmp	.+340    	; 0x378c <EVENT_USB_Device_ControlRequest+0x172>
    3638:	90 32       	cpi	r25, 0x20	; 32
    363a:	09 f0       	breq	.+2      	; 0x363e <EVENT_USB_Device_ControlRequest+0x24>
    363c:	ba c0       	rjmp	.+372    	; 0x37b2 <EVENT_USB_Device_ControlRequest+0x198>
    363e:	13 c0       	rjmp	.+38     	; 0x3666 <EVENT_USB_Device_ControlRequest+0x4c>

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
	{
	case CDC_REQ_GetLineEncoding:
		if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3640:	81 3a       	cpi	r24, 0xA1	; 161
    3642:	09 f0       	breq	.+2      	; 0x3646 <EVENT_USB_Device_ControlRequest+0x2c>
    3644:	b6 c0       	rjmp	.+364    	; 0x37b2 <EVENT_USB_Device_ControlRequest+0x198>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3646:	80 91 e8 00 	lds	r24, 0x00E8
    364a:	87 7f       	andi	r24, 0xF7	; 247
    364c:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearSETUP();

			/* Write the line coding data to the control endpoint */
			// this one is not inline because its already used somewhere in the usb core, so it will dupe code
			Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    3650:	67 e0       	ldi	r22, 0x07	; 7
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	82 e0       	ldi	r24, 0x02	; 2
    3656:	91 e0       	ldi	r25, 0x01	; 1
    3658:	64 d1       	rcall	.+712    	; 0x3922 <Endpoint_Write_Control_Stream_LE>
    365a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    365e:	8b 77       	andi	r24, 0x7B	; 123
    3660:	80 93 e8 00 	sts	0x00E8, r24
    3664:	a6 c0       	rjmp	.+332    	; 0x37b2 <EVENT_USB_Device_ControlRequest+0x198>
    3666:	81 32       	cpi	r24, 0x21	; 33
			Endpoint_ClearOUT();
		}

		break;
	case CDC_REQ_SetLineEncoding:
		if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3668:	09 f0       	breq	.+2      	; 0x366c <EVENT_USB_Device_ControlRequest+0x52>
    366a:	a3 c0       	rjmp	.+326    	; 0x37b2 <EVENT_USB_Device_ControlRequest+0x198>
    366c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3670:	87 7f       	andi	r24, 0xF7	; 247
    3672:	80 93 e8 00 	sts	0x00E8, r24
    3676:	27 e0       	ldi	r18, 0x07	; 7
			Endpoint_ClearSETUP();

			// Read the line coding data in from the host into the global struct (made inline)
			//Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));

			uint8_t Length = sizeof(CDC_LineEncoding_t);
    3678:	82 e0       	ldi	r24, 0x02	; 2
			uint8_t* DataStream = (uint8_t*)&LineEncoding;
    367a:	91 e0       	ldi	r25, 0x01	; 1
    367c:	3e b3       	in	r19, 0x1e	; 30

			bool skip = false;
			while (Length)
			{
				uint8_t USB_DeviceState_LCL = USB_DeviceState;
    367e:	33 23       	and	r19, r19

				if ((USB_DeviceState_LCL == DEVICE_STATE_Unattached) || (USB_DeviceState_LCL == DEVICE_STATE_Suspended) || (Endpoint_IsSETUPReceived())){
    3680:	39 f1       	breq	.+78     	; 0x36d0 <EVENT_USB_Device_ControlRequest+0xb6>
    3682:	35 30       	cpi	r19, 0x05	; 5
    3684:	29 f1       	breq	.+74     	; 0x36d0 <EVENT_USB_Device_ControlRequest+0xb6>
    3686:	30 91 e8 00 	lds	r19, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    368a:	33 fd       	sbrc	r19, 3
    368c:	21 c0       	rjmp	.+66     	; 0x36d0 <EVENT_USB_Device_ControlRequest+0xb6>
    368e:	30 91 e8 00 	lds	r19, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3692:	32 ff       	sbrs	r19, 2
					skip = true;
					break;
				}

				if (Endpoint_IsOUTReceived())
    3694:	f3 cf       	rjmp	.-26     	; 0x367c <EVENT_USB_Device_ControlRequest+0x62>
    3696:	fc 01       	movw	r30, r24
    3698:	06 c0       	rjmp	.+12     	; 0x36a6 <EVENT_USB_Device_ControlRequest+0x8c>
    369a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    369e:	81 93       	st	Z+, r24
				{
					while (Length && Endpoint_BytesInEndpoint())
					{
						*DataStream = Endpoint_Read_8();
    36a0:	cf 01       	movw	r24, r30
						DataStream++;
    36a2:	21 50       	subi	r18, 0x01	; 1
						Length--;
    36a4:	29 f0       	breq	.+10     	; 0x36b0 <EVENT_USB_Device_ControlRequest+0x96>
					break;
				}

				if (Endpoint_IsOUTReceived())
				{
					while (Length && Endpoint_BytesInEndpoint())
    36a6:	cf 01       	movw	r24, r30
    36a8:	30 91 f2 00 	lds	r19, 0x00F2
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    36ac:	31 11       	cpse	r19, r1
    36ae:	f5 cf       	rjmp	.-22     	; 0x369a <EVENT_USB_Device_ControlRequest+0x80>
    36b0:	30 91 e8 00 	lds	r19, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    36b4:	3b 77       	andi	r19, 0x7B	; 123
    36b6:	30 93 e8 00 	sts	0x00E8, r19
    36ba:	21 11       	cpse	r18, r1

			uint8_t Length = sizeof(CDC_LineEncoding_t);
			uint8_t* DataStream = (uint8_t*)&LineEncoding;

			bool skip = false;
			while (Length)
    36bc:	df cf       	rjmp	.-66     	; 0x367c <EVENT_USB_Device_ControlRequest+0x62>
    36be:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    36c2:	80 fd       	sbrc	r24, 0
					Endpoint_ClearOUT();
				}
			}

			if (!skip)
				while (!(Endpoint_IsINReady()))
    36c4:	05 c0       	rjmp	.+10     	; 0x36d0 <EVENT_USB_Device_ControlRequest+0xb6>
    36c6:	8e b3       	in	r24, 0x1e	; 30
				{
				uint8_t USB_DeviceState_LCL = USB_DeviceState;
    36c8:	88 23       	and	r24, r24

				if ((USB_DeviceState_LCL == DEVICE_STATE_Unattached) || (USB_DeviceState_LCL == DEVICE_STATE_Suspended))
    36ca:	11 f0       	breq	.+4      	; 0x36d0 <EVENT_USB_Device_ControlRequest+0xb6>
    36cc:	85 30       	cpi	r24, 0x05	; 5
    36ce:	b9 f7       	brne	.-18     	; 0x36be <EVENT_USB_Device_ControlRequest+0xa4>
    36d0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    36d4:	8e 77       	andi	r24, 0x7E	; 126
    36d6:	80 93 e8 00 	sts	0x00E8, r24
    36da:	20 91 02 01 	lds	r18, 0x0102

			// end of inline Endpoint_Read_Control_Stream_LE

			Endpoint_ClearIN();

			if (LineEncoding.BaudRateBPS == BAUDRATE_CDC_BOOTLOADER)
    36de:	30 91 03 01 	lds	r19, 0x0103
    36e2:	40 91 04 01 	lds	r20, 0x0104
    36e6:	50 91 05 01 	lds	r21, 0x0105
    36ea:	21 15       	cp	r18, r1
    36ec:	81 ee       	ldi	r24, 0xE1	; 225
    36ee:	38 07       	cpc	r19, r24
    36f0:	41 05       	cpc	r20, r1
    36f2:	51 05       	cpc	r21, r1
    36f4:	21 f4       	brne	.+8      	; 0x36fe <EVENT_USB_Device_ControlRequest+0xe4>
    36f6:	81 e0       	ldi	r24, 0x01	; 1
				CDCActive = true;
    36f8:	80 93 9a 01 	sts	0x019A, r24
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <EVENT_USB_Device_ControlRequest+0xe8>
    36fe:	10 92 9a 01 	sts	0x019A, r1
			else
				CDCActive = false;
    3702:	10 92 98 01 	sts	0x0198, r1

			// reset buffer
			BufferCount = 0;
    3706:	10 92 9d 01 	sts	0x019D, r1
			BufferIndex = 0;
    370a:	10 92 e2 01 	sts	0x01E2, r1
			BufferEnd = 0;
    370e:	e0 91 07 01 	lds	r30, 0x0107
    3712:	e1 50       	subi	r30, 0x01	; 1
    3714:	e2 30       	cpi	r30, 0x02	; 2
    3716:	28 f4       	brcc	.+10     	; 0x3722 <EVENT_USB_Device_ControlRequest+0x108>
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	e5 5f       	subi	r30, 0xF5	; 245
    371c:	fe 4f       	sbci	r31, 0xFE	; 254
    371e:	c0 81       	ld	r28, Z
    3720:	01 c0       	rjmp	.+2      	; 0x3724 <EVENT_USB_Device_ControlRequest+0x10a>
    3722:	c0 e0       	ldi	r28, 0x00	; 0
    3724:	80 91 06 01 	lds	r24, 0x0106
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
    3728:	82 30       	cpi	r24, 0x02	; 2
    372a:	09 f4       	brne	.+2      	; 0x372e <EVENT_USB_Device_ControlRequest+0x114>
    372c:	c8 60       	ori	r28, 0x08	; 8
		ConfigMask |= (1 << USBS1);
    372e:	80 91 08 01 	lds	r24, 0x0108

	switch (LineEncoding.DataBits)
    3732:	87 30       	cpi	r24, 0x07	; 7
    3734:	31 f0       	breq	.+12     	; 0x3742 <EVENT_USB_Device_ControlRequest+0x128>
    3736:	88 30       	cpi	r24, 0x08	; 8
    3738:	31 f0       	breq	.+12     	; 0x3746 <EVENT_USB_Device_ControlRequest+0x12c>
    373a:	86 30       	cpi	r24, 0x06	; 6
    373c:	29 f4       	brne	.+10     	; 0x3748 <EVENT_USB_Device_ControlRequest+0x12e>
    373e:	c2 60       	ori	r28, 0x02	; 2
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    3740:	03 c0       	rjmp	.+6      	; 0x3748 <EVENT_USB_Device_ControlRequest+0x12e>
    3742:	c4 60       	ori	r28, 0x04	; 4
		break;
	case 7:
		ConfigMask |= (1 << UCSZ11);
    3744:	01 c0       	rjmp	.+2      	; 0x3748 <EVENT_USB_Device_ControlRequest+0x12e>
    3746:	c6 60       	ori	r28, 0x06	; 6
		break;
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    3748:	5b 9a       	sbi	0x0b, 3	; 11
		break;
	}

	/* Keep the TX line held high (idle) while the USART is reconfigured */
	PORTD |= (1 << 3);
    374a:	10 92 c9 00 	sts	0x00C9, r1

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
    374e:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1A = 0;
    3752:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C = 0;
    3756:	ca 01       	movw	r24, r20

	/* Set the new baud rate before configuring the USART */
	UBRR1 = SERIAL_2X_UBBRVAL(LineEncoding.BaudRateBPS);
    3758:	b9 01       	movw	r22, r18
    375a:	96 95       	lsr	r25
    375c:	87 95       	ror	r24
    375e:	77 95       	ror	r23
    3760:	67 95       	ror	r22
    3762:	60 58       	subi	r22, 0x80	; 128
    3764:	7b 47       	sbci	r23, 0x7B	; 123
    3766:	81 4e       	sbci	r24, 0xE1	; 225
    3768:	9f 4f       	sbci	r25, 0xFF	; 255
    376a:	73 d3       	rcall	.+1766   	; 0x3e52 <__udivmodsi4>
    376c:	21 50       	subi	r18, 0x01	; 1
    376e:	31 09       	sbc	r19, r1
    3770:	30 93 cd 00 	sts	0x00CD, r19
    3774:	20 93 cc 00 	sts	0x00CC, r18
    3778:	c0 93 ca 00 	sts	0x00CA, r28
	//UBRR1 = (LineEncoding.BaudRateBPS == 57600)
	//	? SERIAL_UBBRVAL(LineEncoding.BaudRateBPS)
	//	: SERIAL_2X_UBBRVAL(LineEncoding.BaudRateBPS);

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
    377c:	82 e0       	ldi	r24, 0x02	; 2
    377e:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1A = (1 << U2X1);
    3782:	88 e9       	ldi	r24, 0x98	; 152
    3784:	80 93 c9 00 	sts	0x00C9, r24
	//UCSR1A = (LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    3788:	5b 98       	cbi	0x0b, 3	; 11
    378a:	13 c0       	rjmp	.+38     	; 0x37b2 <EVENT_USB_Device_ControlRequest+0x198>

	/* Release the TX line after the USART has been reconfigured */
	PORTD &= ~(1 << 3);
    378c:	81 32       	cpi	r24, 0x21	; 33
    378e:	89 f4       	brne	.+34     	; 0x37b2 <EVENT_USB_Device_ControlRequest+0x198>

		}

		break;
	case CDC_REQ_SetControlLineState:
		if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3790:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3794:	87 7f       	andi	r24, 0xF7	; 247
    3796:	80 93 e8 00 	sts	0x00E8, r24
    379a:	39 d1       	rcall	.+626    	; 0x3a0e <Endpoint_ClearStatusStage>
    379c:	80 91 9a 01 	lds	r24, 0x019A
		{
			Endpoint_ClearSETUP();
			Endpoint_ClearStatusStage();
    37a0:	81 11       	cpse	r24, r1

			// check DTR state and reset the MCU
			if (!CDCActive && (USB_ControlRequest.wValue & CDC_CONTROL_LINE_OUT_DTR))
    37a2:	06 c0       	rjmp	.+12     	; 0x37b0 <EVENT_USB_Device_ControlRequest+0x196>
    37a4:	80 91 e7 01 	lds	r24, 0x01E7
    37a8:	80 ff       	sbrs	r24, 0
    37aa:	02 c0       	rjmp	.+4      	; 0x37b0 <EVENT_USB_Device_ControlRequest+0x196>
    37ac:	5f 98       	cbi	0x0b, 7	; 11
    37ae:	01 c0       	rjmp	.+2      	; 0x37b2 <EVENT_USB_Device_ControlRequest+0x198>
    37b0:	5f 9a       	sbi	0x0b, 7	; 11
				AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    37b2:	cf 91       	pop	r28
    37b4:	08 95       	ret

000037b6 <__vector_23>:
			else
				AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    37b6:	1f 92       	push	r1
		}

		break;
	}
}
    37b8:	0f 92       	push	r0
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	0f 92       	push	r0
    37be:	11 24       	eor	r1, r1
    37c0:	8f 93       	push	r24
    37c2:	9f 93       	push	r25
    37c4:	ef 93       	push	r30
    37c6:	ff 93       	push	r31
*  for later transmission to the host.
*/
ISR(USART1_RX_vect, ISR_BLOCK)
{
	// read the newest byte from the UART, important to clear interrupt flag!
	uint8_t ReceivedByte = UDR1;
    37c8:	90 91 ce 00 	lds	r25, 0x00CE

	// only save the new byte if USB device is ready and buffer is not full
	if (!CDCActive && (USB_DeviceState == DEVICE_STATE_Configured) && (BufferCount <= BUFFER_SIZE)){
    37cc:	80 91 9a 01 	lds	r24, 0x019A
    37d0:	81 11       	cpse	r24, r1
    37d2:	17 c0       	rjmp	.+46     	; 0x3802 <__vector_23+0x4c>
    37d4:	8e b3       	in	r24, 0x1e	; 30
    37d6:	84 30       	cpi	r24, 0x04	; 4
    37d8:	a1 f4       	brne	.+40     	; 0x3802 <__vector_23+0x4c>
    37da:	80 91 98 01 	lds	r24, 0x0198
    37de:	81 34       	cpi	r24, 0x41	; 65
    37e0:	80 f4       	brcc	.+32     	; 0x3802 <__vector_23+0x4c>
		// save new byte
		USARTtoUSB_Buffer_Data[BufferEnd++] = ReceivedByte;
    37e2:	80 91 e2 01 	lds	r24, 0x01E2
    37e6:	e8 2f       	mov	r30, r24
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	e2 56       	subi	r30, 0x62	; 98
    37ec:	fe 4f       	sbci	r31, 0xFE	; 254
    37ee:	90 83       	st	Z, r25
    37f0:	8f 5f       	subi	r24, 0xFF	; 255

		// increase the buffer position and wrap around if needed
		BufferEnd %= BUFFER_SIZE;
    37f2:	8f 73       	andi	r24, 0x3F	; 63
    37f4:	80 93 e2 01 	sts	0x01E2, r24

		// increase buffer count
		BufferCount++;
    37f8:	80 91 98 01 	lds	r24, 0x0198
    37fc:	8f 5f       	subi	r24, 0xFF	; 255
    37fe:	80 93 98 01 	sts	0x0198, r24
	}
}
    3802:	ff 91       	pop	r31
    3804:	ef 91       	pop	r30
    3806:	9f 91       	pop	r25
    3808:	8f 91       	pop	r24
    380a:	0f 90       	pop	r0
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	0f 90       	pop	r0
    3810:	1f 90       	pop	r1
    3812:	18 95       	reti

00003814 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    3814:	29 2f       	mov	r18, r25
    3816:	30 e0       	ldi	r19, 0x00	; 0
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
    3818:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    381a:	22 30       	cpi	r18, 0x02	; 2
    381c:	31 05       	cpc	r19, r1
    381e:	39 f0       	breq	.+14     	; 0x382e <CALLBACK_USB_GetDescriptor+0x1a>
    3820:	23 30       	cpi	r18, 0x03	; 3
    3822:	31 05       	cpc	r19, r1
    3824:	49 f0       	breq	.+18     	; 0x3838 <CALLBACK_USB_GetDescriptor+0x24>
    3826:	21 30       	cpi	r18, 0x01	; 1
    3828:	31 05       	cpc	r19, r1
    382a:	89 f0       	breq	.+34     	; 0x384e <CALLBACK_USB_GetDescriptor+0x3a>
    382c:	0b c0       	rjmp	.+22     	; 0x3844 <CALLBACK_USB_GetDescriptor+0x30>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    382e:	2e e3       	ldi	r18, 0x3E	; 62
    3830:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    3832:	8f e3       	ldi	r24, 0x3F	; 63
    3834:	91 e0       	ldi	r25, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    3836:	1e c0       	rjmp	.+60     	; 0x3874 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
    3838:	88 23       	and	r24, r24
    383a:	71 f0       	breq	.+28     	; 0x3858 <CALLBACK_USB_GetDescriptor+0x44>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
    383c:	81 30       	cpi	r24, 0x01	; 1
    383e:	89 f0       	breq	.+34     	; 0x3862 <CALLBACK_USB_GetDescriptor+0x4e>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
    3840:	82 30       	cpi	r24, 0x02	; 2
    3842:	a1 f0       	breq	.+40     	; 0x386c <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	13 c0       	rjmp	.+38     	; 0x3874 <CALLBACK_USB_GetDescriptor+0x60>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    384e:	22 e1       	ldi	r18, 0x12	; 18
    3850:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    3852:	8d e7       	ldi	r24, 0x7D	; 125
    3854:	91 e0       	ldi	r25, 0x01	; 1
    3856:	0e c0       	rjmp	.+28     	; 0x3874 <CALLBACK_USB_GetDescriptor+0x60>
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    3858:	24 e0       	ldi	r18, 0x04	; 4
    385a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
    385c:	8b e3       	ldi	r24, 0x3B	; 59
    385e:	91 e0       	ldi	r25, 0x01	; 1
    3860:	09 c0       	rjmp	.+18     	; 0x3874 <CALLBACK_USB_GetDescriptor+0x60>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
    3862:	22 e1       	ldi	r18, 0x12	; 18
    3864:	30 e0       	ldi	r19, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
    3866:	87 e2       	ldi	r24, 0x27	; 39
    3868:	91 e0       	ldi	r25, 0x01	; 1
    386a:	04 c0       	rjmp	.+8      	; 0x3874 <CALLBACK_USB_GetDescriptor+0x60>
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    386c:	28 e1       	ldi	r18, 0x18	; 24
    386e:	30 e0       	ldi	r19, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
    3870:	8d e0       	ldi	r24, 0x0D	; 13
    3872:	91 e0       	ldi	r25, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    3874:	fa 01       	movw	r30, r20
    3876:	91 83       	std	Z+1, r25	; 0x01
    3878:	80 83       	st	Z, r24
	return Size;
}
    387a:	c9 01       	movw	r24, r18
    387c:	08 95       	ret

0000387e <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
    387e:	07 b6       	in	r0, 0x37	; 55
    3880:	00 fc       	sbrc	r0, 0
    3882:	fd cf       	rjmp	.-6      	; 0x387e <BootloaderAPI_ErasePage>
    3884:	f9 99       	sbic	0x1f, 1	; 31
    3886:	fe cf       	rjmp	.-4      	; 0x3884 <BootloaderAPI_ErasePage+0x6>
    3888:	23 e0       	ldi	r18, 0x03	; 3
    388a:	fb 01       	movw	r30, r22
    388c:	20 93 57 00 	sts	0x0057, r18
    3890:	e8 95       	spm
	boot_spm_busy_wait();
    3892:	07 b6       	in	r0, 0x37	; 55
    3894:	00 fc       	sbrc	r0, 0
    3896:	fd cf       	rjmp	.-6      	; 0x3892 <BootloaderAPI_ErasePage+0x14>
	boot_rww_enable();
    3898:	81 e1       	ldi	r24, 0x11	; 17
    389a:	80 93 57 00 	sts	0x0057, r24
    389e:	e8 95       	spm
    38a0:	08 95       	ret

000038a2 <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
    38a2:	07 b6       	in	r0, 0x37	; 55
    38a4:	00 fc       	sbrc	r0, 0
    38a6:	fd cf       	rjmp	.-6      	; 0x38a2 <BootloaderAPI_WritePage>
    38a8:	f9 99       	sbic	0x1f, 1	; 31
    38aa:	fe cf       	rjmp	.-4      	; 0x38a8 <BootloaderAPI_WritePage+0x6>
    38ac:	25 e0       	ldi	r18, 0x05	; 5
    38ae:	fb 01       	movw	r30, r22
    38b0:	20 93 57 00 	sts	0x0057, r18
    38b4:	e8 95       	spm
	boot_spm_busy_wait();
    38b6:	07 b6       	in	r0, 0x37	; 55
    38b8:	00 fc       	sbrc	r0, 0
    38ba:	fd cf       	rjmp	.-6      	; 0x38b6 <BootloaderAPI_WritePage+0x14>
	boot_rww_enable();
    38bc:	81 e1       	ldi	r24, 0x11	; 17
    38be:	80 93 57 00 	sts	0x0057, r24
    38c2:	e8 95       	spm
    38c4:	08 95       	ret

000038c6 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
    38c6:	07 b6       	in	r0, 0x37	; 55
    38c8:	00 fc       	sbrc	r0, 0
    38ca:	fd cf       	rjmp	.-6      	; 0x38c6 <BootloaderAPI_FillWord>
    38cc:	f9 99       	sbic	0x1f, 1	; 31
    38ce:	fe cf       	rjmp	.-4      	; 0x38cc <BootloaderAPI_FillWord+0x6>
    38d0:	21 e0       	ldi	r18, 0x01	; 1
    38d2:	fb 01       	movw	r30, r22
    38d4:	0a 01       	movw	r0, r20
    38d6:	20 93 57 00 	sts	0x0057, r18
    38da:	e8 95       	spm
    38dc:	11 24       	eor	r1, r1
    38de:	08 95       	ret

000038e0 <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
    38e0:	21 e2       	ldi	r18, 0x21	; 33
    38e2:	fc 01       	movw	r30, r24
    38e4:	20 93 57 00 	sts	0x0057, r18
    38e8:	84 91       	lpm	r24, Z+
}
    38ea:	08 95       	ret

000038ec <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
    38ec:	29 e0       	ldi	r18, 0x09	; 9
    38ee:	fc 01       	movw	r30, r24
    38f0:	20 93 57 00 	sts	0x0057, r18
    38f4:	84 91       	lpm	r24, Z+
}
    38f6:	08 95       	ret

000038f8 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
    38f8:	e1 e0       	ldi	r30, 0x01	; 1
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	89 e0       	ldi	r24, 0x09	; 9
    38fe:	80 93 57 00 	sts	0x0057, r24
    3902:	84 91       	lpm	r24, Z+
}
    3904:	08 95       	ret

00003906 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
    3906:	07 b6       	in	r0, 0x37	; 55
    3908:	00 fc       	sbrc	r0, 0
    390a:	fd cf       	rjmp	.-6      	; 0x3906 <BootloaderAPI_WriteLock>
    390c:	f9 99       	sbic	0x1f, 1	; 31
    390e:	fe cf       	rjmp	.-4      	; 0x390c <BootloaderAPI_WriteLock+0x6>
    3910:	80 95       	com	r24
    3912:	99 e0       	ldi	r25, 0x09	; 9
    3914:	e1 e0       	ldi	r30, 0x01	; 1
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	08 2e       	mov	r0, r24
    391a:	90 93 57 00 	sts	0x0057, r25
    391e:	e8 95       	spm
    3920:	08 95       	ret

00003922 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3922:	20 91 eb 01 	lds	r18, 0x01EB
    3926:	30 91 ec 01 	lds	r19, 0x01EC
    392a:	26 17       	cp	r18, r22
    392c:	37 07       	cpc	r19, r23
    392e:	48 f0       	brcs	.+18     	; 0x3942 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3930:	61 15       	cp	r22, r1
    3932:	71 05       	cpc	r23, r1
    3934:	39 f4       	brne	.+14     	; 0x3944 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3936:	20 91 e8 00 	lds	r18, 0x00E8
    393a:	2e 77       	andi	r18, 0x7E	; 126
    393c:	20 93 e8 00 	sts	0x00E8, r18
    3940:	01 c0       	rjmp	.+2      	; 0x3944 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3942:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3944:	9c 01       	movw	r18, r24
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	33 c0       	rjmp	.+102    	; 0x39b0 <Endpoint_Write_Control_Stream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    394a:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    394c:	99 23       	and	r25, r25
    394e:	09 f4       	brne	.+2      	; 0x3952 <Endpoint_Write_Control_Stream_LE+0x30>
    3950:	44 c0       	rjmp	.+136    	; 0x39da <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3952:	95 30       	cpi	r25, 0x05	; 5
    3954:	09 f4       	brne	.+2      	; 0x3958 <Endpoint_Write_Control_Stream_LE+0x36>
    3956:	43 c0       	rjmp	.+134    	; 0x39de <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3958:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    395c:	93 fd       	sbrc	r25, 3
    395e:	41 c0       	rjmp	.+130    	; 0x39e2 <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3960:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3964:	92 fd       	sbrc	r25, 2
    3966:	33 c0       	rjmp	.+102    	; 0x39ce <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3968:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    396c:	90 ff       	sbrs	r25, 0
    396e:	20 c0       	rjmp	.+64     	; 0x39b0 <Endpoint_Write_Control_Stream_LE+0x8e>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    3970:	80 91 f2 00 	lds	r24, 0x00F2
    3974:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3976:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    3978:	82 1b       	sub	r24, r18
    397a:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    397c:	05 c0       	rjmp	.+10     	; 0x3988 <Endpoint_Write_Control_Stream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    397e:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3980:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    3984:	61 50       	subi	r22, 0x01	; 1
    3986:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    3988:	9f 01       	movw	r18, r30
    398a:	28 0f       	add	r18, r24
    398c:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    398e:	61 15       	cp	r22, r1
    3990:	71 05       	cpc	r23, r1
    3992:	19 f0       	breq	.+6      	; 0x399a <Endpoint_Write_Control_Stream_LE+0x78>
    3994:	28 30       	cpi	r18, 0x08	; 8
    3996:	31 05       	cpc	r19, r1
    3998:	90 f3       	brcs	.-28     	; 0x397e <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	28 30       	cpi	r18, 0x08	; 8
    399e:	31 05       	cpc	r19, r1
    39a0:	09 f0       	breq	.+2      	; 0x39a4 <Endpoint_Write_Control_Stream_LE+0x82>
    39a2:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    39a4:	90 91 e8 00 	lds	r25, 0x00E8
    39a8:	9e 77       	andi	r25, 0x7E	; 126
    39aa:	90 93 e8 00 	sts	0x00E8, r25
    39ae:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    39b0:	61 15       	cp	r22, r1
    39b2:	71 05       	cpc	r23, r1
    39b4:	51 f6       	brne	.-108    	; 0x394a <Endpoint_Write_Control_Stream_LE+0x28>
    39b6:	81 11       	cpse	r24, r1
    39b8:	c8 cf       	rjmp	.-112    	; 0x394a <Endpoint_Write_Control_Stream_LE+0x28>
    39ba:	09 c0       	rjmp	.+18     	; 0x39ce <Endpoint_Write_Control_Stream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39bc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    39be:	88 23       	and	r24, r24
    39c0:	61 f0       	breq	.+24     	; 0x39da <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39c2:	85 30       	cpi	r24, 0x05	; 5
    39c4:	61 f0       	breq	.+24     	; 0x39de <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    39c6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    39ca:	83 fd       	sbrc	r24, 3
    39cc:	0a c0       	rjmp	.+20     	; 0x39e2 <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    39ce:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    39d2:	82 ff       	sbrs	r24, 2
    39d4:	f3 cf       	rjmp	.-26     	; 0x39bc <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    39da:	82 e0       	ldi	r24, 0x02	; 2
    39dc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    39de:	83 e0       	ldi	r24, 0x03	; 3
    39e0:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    39e2:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    39e4:	08 95       	ret

000039e6 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    39e6:	8f 70       	andi	r24, 0x0F	; 15
    39e8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    39ec:	eb ee       	ldi	r30, 0xEB	; 235
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	80 81       	ld	r24, Z
    39f2:	81 60       	ori	r24, 0x01	; 1
    39f4:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    39f6:	ed ee       	ldi	r30, 0xED	; 237
    39f8:	f0 e0       	ldi	r31, 0x00	; 0
    39fa:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    39fc:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    3a00:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    3a02:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    3a06:	88 1f       	adc	r24, r24
    3a08:	88 27       	eor	r24, r24
    3a0a:	88 1f       	adc	r24, r24
    3a0c:	08 95       	ret

00003a0e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3a0e:	80 91 e5 01 	lds	r24, 0x01E5
    3a12:	87 fd       	sbrc	r24, 7
    3a14:	05 c0       	rjmp	.+10     	; 0x3a20 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3a16:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3a1a:	80 ff       	sbrs	r24, 0
    3a1c:	0d c0       	rjmp	.+26     	; 0x3a38 <Endpoint_ClearStatusStage+0x2a>
    3a1e:	10 c0       	rjmp	.+32     	; 0x3a40 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3a20:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3a24:	82 fd       	sbrc	r24, 2
    3a26:	04 c0       	rjmp	.+8      	; 0x3a30 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a28:	8e b3       	in	r24, 0x1e	; 30
    3a2a:	81 11       	cpse	r24, r1
    3a2c:	f9 cf       	rjmp	.-14     	; 0x3a20 <Endpoint_ClearStatusStage+0x12>
    3a2e:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3a30:	80 91 e8 00 	lds	r24, 0x00E8
    3a34:	8b 77       	andi	r24, 0x7B	; 123
    3a36:	07 c0       	rjmp	.+14     	; 0x3a46 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a38:	8e b3       	in	r24, 0x1e	; 30
    3a3a:	81 11       	cpse	r24, r1
    3a3c:	ec cf       	rjmp	.-40     	; 0x3a16 <Endpoint_ClearStatusStage+0x8>
    3a3e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3a40:	80 91 e8 00 	lds	r24, 0x00E8
    3a44:	8e 77       	andi	r24, 0x7E	; 126
    3a46:	80 93 e8 00 	sts	0x00E8, r24
    3a4a:	08 95       	ret

00003a4c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3a4c:	3c d0       	rcall	.+120    	; 0x3ac6 <USB_INT_DisableAllInterrupts>
    3a4e:	3e d0       	rcall	.+124    	; 0x3acc <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3a50:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3a54:	8f 77       	andi	r24, 0x7F	; 127
    3a56:	80 93 d8 00 	sts	0x00D8, r24
    3a5a:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    3a5e:	80 68       	ori	r24, 0x80	; 128
    3a60:	80 93 d8 00 	sts	0x00D8, r24
    3a64:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3a68:	8f 7d       	andi	r24, 0xDF	; 223
    3a6a:	80 93 d8 00 	sts	0x00D8, r24
    3a6e:	84 e0       	ldi	r24, 0x04	; 4
    3a70:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3a72:	86 e0       	ldi	r24, 0x06	; 6
    3a74:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3a76:	09 b4       	in	r0, 0x29	; 41
    3a78:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3a7a:	fd cf       	rjmp	.-6      	; 0x3a76 <USB_ResetInterface+0x2a>
    3a7c:	1e ba       	out	0x1e, r1	; 30
    3a7e:	10 92 e3 01 	sts	0x01E3, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    3a82:	42 e0       	ldi	r20, 0x02	; 2
    3a84:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	ae df       	rcall	.-164    	; 0x39e6 <Endpoint_ConfigureEndpoint_Prv>
    3a8a:	80 91 e1 00 	lds	r24, 0x00E1
    3a8e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3a90:	80 93 e1 00 	sts	0x00E1, r24
    3a94:	80 91 e2 00 	lds	r24, 0x00E2
    3a98:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3a9a:	80 93 e2 00 	sts	0x00E2, r24
    3a9e:	80 91 e2 00 	lds	r24, 0x00E2
    3aa2:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3aa4:	80 93 e2 00 	sts	0x00E2, r24
    3aa8:	80 91 e0 00 	lds	r24, 0x00E0
    3aac:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3aae:	80 93 e0 00 	sts	0x00E0, r24
    3ab2:	08 95       	ret

00003ab4 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    3ab4:	e3 e6       	ldi	r30, 0x63	; 99
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	80 81       	ld	r24, Z
    3aba:	8e 7f       	andi	r24, 0xFE	; 254
    3abc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	80 93 e4 01 	sts	0x01E4, r24

	USB_ResetInterface();
    3ac4:	c3 cf       	rjmp	.-122    	; 0x3a4c <USB_ResetInterface>

00003ac6 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3ac6:	10 92 e2 00 	sts	0x00E2, r1
    3aca:	08 95       	ret

00003acc <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3acc:	10 92 e1 00 	sts	0x00E1, r1
    3ad0:	08 95       	ret

00003ad2 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3ad2:	1f 92       	push	r1
    3ad4:	0f 92       	push	r0
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	0f 92       	push	r0
    3ada:	11 24       	eor	r1, r1
    3adc:	2f 93       	push	r18
    3ade:	3f 93       	push	r19
    3ae0:	4f 93       	push	r20
    3ae2:	5f 93       	push	r21
    3ae4:	6f 93       	push	r22
    3ae6:	7f 93       	push	r23
    3ae8:	8f 93       	push	r24
    3aea:	9f 93       	push	r25
    3aec:	af 93       	push	r26
    3aee:	bf 93       	push	r27
    3af0:	ef 93       	push	r30
    3af2:	ff 93       	push	r31
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3af4:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3af8:	80 ff       	sbrs	r24, 0
    3afa:	16 c0       	rjmp	.+44     	; 0x3b28 <__vector_11+0x56>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3afc:	80 91 e2 00 	lds	r24, 0x00E2
    3b00:	80 ff       	sbrs	r24, 0
    3b02:	12 c0       	rjmp	.+36     	; 0x3b28 <__vector_11+0x56>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3b04:	80 91 e2 00 	lds	r24, 0x00E2
    3b08:	8e 7f       	andi	r24, 0xFE	; 254
    3b0a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3b0e:	80 91 e2 00 	lds	r24, 0x00E2
    3b12:	80 61       	ori	r24, 0x10	; 16
    3b14:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3b18:	80 91 d8 00 	lds	r24, 0x00D8
    3b1c:	80 62       	ori	r24, 0x20	; 32
    3b1e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3b22:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    3b24:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
    3b26:	79 d1       	rcall	.+754    	; 0x3e1a <USB_Event_Stub>
    3b28:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3b2c:	84 ff       	sbrs	r24, 4
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3b2e:	2e c0       	rjmp	.+92     	; 0x3b8c <__vector_11+0xba>
    3b30:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3b34:	84 ff       	sbrs	r24, 4
    3b36:	2a c0       	rjmp	.+84     	; 0x3b8c <__vector_11+0xba>
    3b38:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3b3a:	89 bd       	out	0x29, r24	; 41
    3b3c:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3b3e:	89 bd       	out	0x29, r24	; 41
    3b40:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3b42:	00 fe       	sbrs	r0, 0
    3b44:	fd cf       	rjmp	.-6      	; 0x3b40 <__vector_11+0x6e>
    3b46:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3b4a:	8f 7d       	andi	r24, 0xDF	; 223
    3b4c:	80 93 d8 00 	sts	0x00D8, r24
    3b50:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3b54:	8f 7e       	andi	r24, 0xEF	; 239
    3b56:	80 93 e1 00 	sts	0x00E1, r24
    3b5a:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3b5e:	8f 7e       	andi	r24, 0xEF	; 239
    3b60:	80 93 e2 00 	sts	0x00E2, r24
    3b64:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3b68:	81 60       	ori	r24, 0x01	; 1
    3b6a:	80 93 e2 00 	sts	0x00E2, r24
    3b6e:	80 91 e3 01 	lds	r24, 0x01E3
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3b72:	88 23       	and	r24, r24
    3b74:	11 f0       	breq	.+4      	; 0x3b7a <__vector_11+0xa8>
    3b76:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
    3b78:	07 c0       	rjmp	.+14     	; 0x3b88 <__vector_11+0xb6>
    3b7a:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3b7e:	87 ff       	sbrs	r24, 7
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3b80:	02 c0       	rjmp	.+4      	; 0x3b86 <__vector_11+0xb4>
    3b82:	83 e0       	ldi	r24, 0x03	; 3
    3b84:	01 c0       	rjmp	.+2      	; 0x3b88 <__vector_11+0xb6>
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	8e bb       	out	0x1e, r24	; 30
    3b8a:	47 d1       	rcall	.+654    	; 0x3e1a <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    3b8c:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3b90:	83 ff       	sbrs	r24, 3
    3b92:	21 c0       	rjmp	.+66     	; 0x3bd6 <__vector_11+0x104>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3b94:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3b98:	83 ff       	sbrs	r24, 3
    3b9a:	1d c0       	rjmp	.+58     	; 0x3bd6 <__vector_11+0x104>
    3b9c:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3ba0:	87 7f       	andi	r24, 0xF7	; 247
    3ba2:	80 93 e1 00 	sts	0x00E1, r24
    3ba6:	82 e0       	ldi	r24, 0x02	; 2
    3ba8:	8e bb       	out	0x1e, r24	; 30
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3baa:	10 92 e3 01 	sts	0x01E3, r1
		USB_Device_ConfigurationNumber = 0;
    3bae:	80 91 e1 00 	lds	r24, 0x00E1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3bb2:	8e 7f       	andi	r24, 0xFE	; 254
    3bb4:	80 93 e1 00 	sts	0x00E1, r24
    3bb8:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3bbc:	8e 7f       	andi	r24, 0xFE	; 254
    3bbe:	80 93 e2 00 	sts	0x00E2, r24
    3bc2:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3bc6:	80 61       	ori	r24, 0x10	; 16
    3bc8:	80 93 e2 00 	sts	0x00E2, r24
    3bcc:	42 e0       	ldi	r20, 0x02	; 2
    3bce:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3bd0:	80 e0       	ldi	r24, 0x00	; 0
    3bd2:	09 df       	rcall	.-494    	; 0x39e6 <Endpoint_ConfigureEndpoint_Prv>
    3bd4:	22 d1       	rcall	.+580    	; 0x3e1a <USB_Event_Stub>
    3bd6:	ff 91       	pop	r31
    3bd8:	ef 91       	pop	r30

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3bda:	bf 91       	pop	r27
    3bdc:	af 91       	pop	r26
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3bde:	9f 91       	pop	r25
    3be0:	8f 91       	pop	r24
    3be2:	7f 91       	pop	r23
    3be4:	6f 91       	pop	r22
    3be6:	5f 91       	pop	r21
    3be8:	4f 91       	pop	r20
    3bea:	3f 91       	pop	r19
    3bec:	2f 91       	pop	r18
    3bee:	0f 90       	pop	r0
    3bf0:	0f be       	out	0x3f, r0	; 63
    3bf2:	0f 90       	pop	r0
    3bf4:	1f 90       	pop	r1
    3bf6:	18 95       	reti

00003bf8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3bf8:	1f 93       	push	r17
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	00 d0       	rcall	.+0      	; 0x3c00 <USB_Device_ProcessControlRequest+0x8>
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    3c04:	e5 ee       	ldi	r30, 0xE5	; 229
    3c06:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3c08:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3c0c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
    3c10:	ed 3e       	cpi	r30, 0xED	; 237
    3c12:	f8 07       	cpc	r31, r24
    3c14:	c9 f7       	brne	.-14     	; 0x3c08 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3c16:	01 dd       	rcall	.-1534   	; 0x361a <EVENT_USB_Device_ControlRequest>
    3c18:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3c1c:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    3c1e:	e9 c0       	rjmp	.+466    	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3c20:	80 91 e5 01 	lds	r24, 0x01E5
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3c24:	90 91 e6 01 	lds	r25, 0x01E6

		switch (USB_ControlRequest.bRequest)
    3c28:	95 30       	cpi	r25, 0x05	; 5
    3c2a:	09 f4       	brne	.+2      	; 0x3c2e <USB_Device_ProcessControlRequest+0x36>
    3c2c:	70 c0       	rjmp	.+224    	; 0x3d0e <USB_Device_ProcessControlRequest+0x116>
    3c2e:	38 f4       	brcc	.+14     	; 0x3c3e <USB_Device_ProcessControlRequest+0x46>
    3c30:	91 30       	cpi	r25, 0x01	; 1
    3c32:	79 f1       	breq	.+94     	; 0x3c92 <USB_Device_ProcessControlRequest+0x9a>
    3c34:	70 f0       	brcs	.+28     	; 0x3c52 <USB_Device_ProcessControlRequest+0x5a>
    3c36:	93 30       	cpi	r25, 0x03	; 3
    3c38:	09 f0       	breq	.+2      	; 0x3c3c <USB_Device_ProcessControlRequest+0x44>
    3c3a:	db c0       	rjmp	.+438    	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3c3c:	2a c0       	rjmp	.+84     	; 0x3c92 <USB_Device_ProcessControlRequest+0x9a>
    3c3e:	98 30       	cpi	r25, 0x08	; 8
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <USB_Device_ProcessControlRequest+0x4c>
    3c42:	aa c0       	rjmp	.+340    	; 0x3d98 <USB_Device_ProcessControlRequest+0x1a0>
    3c44:	99 30       	cpi	r25, 0x09	; 9
    3c46:	09 f4       	brne	.+2      	; 0x3c4a <USB_Device_ProcessControlRequest+0x52>
    3c48:	b9 c0       	rjmp	.+370    	; 0x3dbc <USB_Device_ProcessControlRequest+0x1c4>
    3c4a:	96 30       	cpi	r25, 0x06	; 6
    3c4c:	09 f0       	breq	.+2      	; 0x3c50 <USB_Device_ProcessControlRequest+0x58>
    3c4e:	d1 c0       	rjmp	.+418    	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3c50:	83 c0       	rjmp	.+262    	; 0x3d58 <USB_Device_ProcessControlRequest+0x160>
    3c52:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3c54:	99 f0       	breq	.+38     	; 0x3c7c <USB_Device_ProcessControlRequest+0x84>
    3c56:	82 38       	cpi	r24, 0x82	; 130
    3c58:	09 f0       	breq	.+2      	; 0x3c5c <USB_Device_ProcessControlRequest+0x64>
    3c5a:	cb c0       	rjmp	.+406    	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3c5c:	80 91 e9 01 	lds	r24, 0x01E9
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3c60:	90 91 ea 01 	lds	r25, 0x01EA
    3c64:	8f 70       	andi	r24, 0x0F	; 15
    3c66:	99 27       	eor	r25, r25
    3c68:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c6c:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3c70:	95 fb       	bst	r25, 5
    3c72:	99 27       	eor	r25, r25
    3c74:	90 f9       	bld	r25, 0
    3c76:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c7a:	01 c0       	rjmp	.+2      	; 0x3c7e <USB_Device_ProcessControlRequest+0x86>
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    3c7e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3c82:	87 7f       	andi	r24, 0xF7	; 247
    3c84:	80 93 e8 00 	sts	0x00E8, r24
    3c88:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3c8c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    3c90:	8e c0       	rjmp	.+284    	; 0x3dae <USB_Device_ProcessControlRequest+0x1b6>
    3c92:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3c94:	19 f0       	breq	.+6      	; 0x3c9c <USB_Device_ProcessControlRequest+0xa4>
    3c96:	82 30       	cpi	r24, 0x02	; 2
    3c98:	09 f0       	breq	.+2      	; 0x3c9c <USB_Device_ProcessControlRequest+0xa4>
    3c9a:	ab c0       	rjmp	.+342    	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3c9c:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3c9e:	82 30       	cpi	r24, 0x02	; 2
    3ca0:	09 f0       	breq	.+2      	; 0x3ca4 <USB_Device_ProcessControlRequest+0xac>
    3ca2:	a7 c0       	rjmp	.+334    	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3ca4:	80 91 e7 01 	lds	r24, 0x01E7

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3ca8:	81 11       	cpse	r24, r1
    3caa:	2b c0       	rjmp	.+86     	; 0x3d02 <USB_Device_ProcessControlRequest+0x10a>
    3cac:	80 91 e9 01 	lds	r24, 0x01E9
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3cb0:	90 91 ea 01 	lds	r25, 0x01EA
    3cb4:	8f 70       	andi	r24, 0x0F	; 15
    3cb6:	99 27       	eor	r25, r25
    3cb8:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3cba:	09 f4       	brne	.+2      	; 0x3cbe <USB_Device_ProcessControlRequest+0xc6>
    3cbc:	9a c0       	rjmp	.+308    	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3cbe:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3cc2:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3cc6:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3cc8:	1c c0       	rjmp	.+56     	; 0x3d02 <USB_Device_ProcessControlRequest+0x10a>
    3cca:	20 91 e6 01 	lds	r18, 0x01E6
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3cce:	23 30       	cpi	r18, 0x03	; 3
    3cd0:	21 f4       	brne	.+8      	; 0x3cda <USB_Device_ProcessControlRequest+0xe2>
    3cd2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3cd6:	80 62       	ori	r24, 0x20	; 32
    3cd8:	12 c0       	rjmp	.+36     	; 0x3cfe <USB_Device_ProcessControlRequest+0x106>
    3cda:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3cde:	90 61       	ori	r25, 0x10	; 16
    3ce0:	90 93 eb 00 	sts	0x00EB, r25
    3ce4:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	01 c0       	rjmp	.+2      	; 0x3cec <USB_Device_ProcessControlRequest+0xf4>
    3cea:	22 0f       	add	r18, r18
    3cec:	8a 95       	dec	r24
    3cee:	ea f7       	brpl	.-6      	; 0x3cea <USB_Device_ProcessControlRequest+0xf2>
    3cf0:	20 93 ea 00 	sts	0x00EA, r18
    3cf4:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    3cf8:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3cfc:	88 60       	ori	r24, 0x08	; 8
    3cfe:	80 93 eb 00 	sts	0x00EB, r24
    3d02:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d06:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d0a:	87 7f       	andi	r24, 0xF7	; 247
    3d0c:	53 c0       	rjmp	.+166    	; 0x3db4 <USB_Device_ProcessControlRequest+0x1bc>
    3d0e:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3d10:	70 c0       	rjmp	.+224    	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3d12:	80 91 e7 01 	lds	r24, 0x01E7
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3d16:	90 91 e8 01 	lds	r25, 0x01E8
    3d1a:	8f 77       	andi	r24, 0x7F	; 127
    3d1c:	99 27       	eor	r25, r25
    3d1e:	18 2f       	mov	r17, r24
    3d20:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3d24:	90 78       	andi	r25, 0x80	; 128
    3d26:	98 2b       	or	r25, r24
    3d28:	90 93 e3 00 	sts	0x00E3, r25
    3d2c:	80 91 e8 00 	lds	r24, 0x00E8
    3d30:	87 7f       	andi	r24, 0xF7	; 247
    3d32:	80 93 e8 00 	sts	0x00E8, r24
    3d36:	6b de       	rcall	.-810    	; 0x3a0e <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3d38:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3d3c:	80 ff       	sbrs	r24, 0
    3d3e:	fc cf       	rjmp	.-8      	; 0x3d38 <USB_Device_ProcessControlRequest+0x140>

	while (!(Endpoint_IsINReady()));
    3d40:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    3d44:	80 68       	ori	r24, 0x80	; 128
    3d46:	80 93 e3 00 	sts	0x00E3, r24
    3d4a:	11 23       	and	r17, r17
    3d4c:	11 f0       	breq	.+4      	; 0x3d52 <USB_Device_ProcessControlRequest+0x15a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3d4e:	83 e0       	ldi	r24, 0x03	; 3
    3d50:	01 c0       	rjmp	.+2      	; 0x3d54 <USB_Device_ProcessControlRequest+0x15c>
    3d52:	82 e0       	ldi	r24, 0x02	; 2
    3d54:	8e bb       	out	0x1e, r24	; 30
    3d56:	4d c0       	rjmp	.+154    	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3d58:	80 58       	subi	r24, 0x80	; 128
    3d5a:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3d5c:	08 f0       	brcs	.+2      	; 0x3d60 <USB_Device_ProcessControlRequest+0x168>
    3d5e:	49 c0       	rjmp	.+146    	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3d60:	ae 01       	movw	r20, r28
    3d62:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3d64:	5f 4f       	sbci	r21, 0xFF	; 255
    3d66:	60 91 e9 01 	lds	r22, 0x01E9
    3d6a:	80 91 e7 01 	lds	r24, 0x01E7
    3d6e:	90 91 e8 01 	lds	r25, 0x01E8
    3d72:	50 dd       	rcall	.-1376   	; 0x3814 <CALLBACK_USB_GetDescriptor>
    3d74:	00 97       	sbiw	r24, 0x00	; 0
    3d76:	09 f4       	brne	.+2      	; 0x3d7a <USB_Device_ProcessControlRequest+0x182>
    3d78:	3c c0       	rjmp	.+120    	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3d7a:	20 91 e8 00 	lds	r18, 0x00E8
    3d7e:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d80:	20 93 e8 00 	sts	0x00E8, r18
    3d84:	bc 01       	movw	r22, r24
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    3d8a:	cb dd       	rcall	.-1130   	; 0x3922 <Endpoint_Write_Control_Stream_LE>
    3d8c:	80 91 e8 00 	lds	r24, 0x00E8
    3d90:	8b 77       	andi	r24, 0x7B	; 123
    3d92:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3d96:	2d c0       	rjmp	.+90     	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3d98:	80 38       	cpi	r24, 0x80	; 128
    3d9a:	59 f5       	brne	.+86     	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3d9c:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3da0:	87 7f       	andi	r24, 0xF7	; 247
    3da2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3da6:	80 91 e3 01 	lds	r24, 0x01E3
    3daa:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3dae:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3db2:	8e 77       	andi	r24, 0x7E	; 126
    3db4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3db8:	2a de       	rcall	.-940    	; 0x3a0e <Endpoint_ClearStatusStage>
    3dba:	1b c0       	rjmp	.+54     	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3dbc:	81 11       	cpse	r24, r1
    3dbe:	19 c0       	rjmp	.+50     	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3dc0:	90 91 e7 01 	lds	r25, 0x01E7
    3dc4:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3dc6:	a8 f4       	brcc	.+42     	; 0x3df2 <USB_Device_ProcessControlRequest+0x1fa>
    3dc8:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3dcc:	87 7f       	andi	r24, 0xF7	; 247
    3dce:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3dd2:	90 93 e3 01 	sts	0x01E3, r25
    3dd6:	1b de       	rcall	.-970    	; 0x3a0e <Endpoint_ClearStatusStage>
    3dd8:	80 91 e3 01 	lds	r24, 0x01E3
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3ddc:	81 11       	cpse	r24, r1
    3dde:	04 c0       	rjmp	.+8      	; 0x3de8 <USB_Device_ProcessControlRequest+0x1f0>

	Endpoint_ClearStatusStage();
    3de0:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    3de4:	87 ff       	sbrs	r24, 7
    3de6:	02 c0       	rjmp	.+4      	; 0x3dec <USB_Device_ProcessControlRequest+0x1f4>
    3de8:	84 e0       	ldi	r24, 0x04	; 4
    3dea:	01 c0       	rjmp	.+2      	; 0x3dee <USB_Device_ProcessControlRequest+0x1f6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3df0:	08 dc       	rcall	.-2032   	; 0x3602 <EVENT_USB_Device_ConfigurationChanged>
    3df2:	80 91 e8 00 	lds	r24, 0x00E8
    3df6:	83 ff       	sbrs	r24, 3
    3df8:	0a c0       	rjmp	.+20     	; 0x3e0e <USB_Device_ProcessControlRequest+0x216>
    3dfa:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    3dfe:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3e00:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3e04:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3e08:	80 62       	ori	r24, 0x20	; 32
    3e0a:	80 93 eb 00 	sts	0x00EB, r24
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3e12:	df 91       	pop	r29
    3e14:	cf 91       	pop	r28
    3e16:	1f 91       	pop	r17
    3e18:	08 95       	ret

00003e1a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    3e1a:	08 95       	ret

00003e1c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3e1c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3e1e:	8e b3       	in	r24, 0x1e	; 30
    3e20:	88 23       	and	r24, r24
    3e22:	a9 f0       	breq	.+42     	; 0x3e4e <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3e24:	80 91 e9 00 	lds	r24, 0x00E9
    3e28:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3e2a:	90 91 ec 00 	lds	r25, 0x00EC
    3e2e:	90 ff       	sbrs	r25, 0
    3e30:	02 c0       	rjmp	.+4      	; 0x3e36 <USB_USBTask+0x1a>
    3e32:	90 e8       	ldi	r25, 0x80	; 128
    3e34:	01 c0       	rjmp	.+2      	; 0x3e38 <USB_USBTask+0x1c>
    3e36:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3e38:	c9 2f       	mov	r28, r25
    3e3a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e3c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3e40:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    3e44:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    3e46:	d8 de       	rcall	.-592    	; 0x3bf8 <USB_Device_ProcessControlRequest>
    3e48:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e4a:	c0 93 e9 00 	sts	0x00E9, r28
    3e4e:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3e50:	08 95       	ret

00003e52 <__udivmodsi4>:
    3e52:	a1 e2       	ldi	r26, 0x21	; 33
    3e54:	1a 2e       	mov	r1, r26
    3e56:	aa 1b       	sub	r26, r26
    3e58:	bb 1b       	sub	r27, r27
    3e5a:	fd 01       	movw	r30, r26
    3e5c:	0d c0       	rjmp	.+26     	; 0x3e78 <__udivmodsi4_ep>

00003e5e <__udivmodsi4_loop>:
    3e5e:	aa 1f       	adc	r26, r26
    3e60:	bb 1f       	adc	r27, r27
    3e62:	ee 1f       	adc	r30, r30
    3e64:	ff 1f       	adc	r31, r31
    3e66:	a2 17       	cp	r26, r18
    3e68:	b3 07       	cpc	r27, r19
    3e6a:	e4 07       	cpc	r30, r20
    3e6c:	f5 07       	cpc	r31, r21
    3e6e:	20 f0       	brcs	.+8      	; 0x3e78 <__udivmodsi4_ep>
    3e70:	a2 1b       	sub	r26, r18
    3e72:	b3 0b       	sbc	r27, r19
    3e74:	e4 0b       	sbc	r30, r20
    3e76:	f5 0b       	sbc	r31, r21

00003e78 <__udivmodsi4_ep>:
    3e78:	66 1f       	adc	r22, r22
    3e7a:	77 1f       	adc	r23, r23
    3e7c:	88 1f       	adc	r24, r24
    3e7e:	99 1f       	adc	r25, r25
    3e80:	1a 94       	dec	r1
    3e82:	69 f7       	brne	.-38     	; 0x3e5e <__udivmodsi4_loop>
    3e84:	60 95       	com	r22
    3e86:	70 95       	com	r23
    3e88:	80 95       	com	r24
    3e8a:	90 95       	com	r25
    3e8c:	9b 01       	movw	r18, r22
    3e8e:	ac 01       	movw	r20, r24
    3e90:	bd 01       	movw	r22, r26
    3e92:	cf 01       	movw	r24, r30
    3e94:	08 95       	ret

00003e96 <__eerd_byte_usb162>:
    3e96:	f9 99       	sbic	0x1f, 1	; 31
    3e98:	fe cf       	rjmp	.-4      	; 0x3e96 <__eerd_byte_usb162>
    3e9a:	92 bd       	out	0x22, r25	; 34
    3e9c:	81 bd       	out	0x21, r24	; 33
    3e9e:	f8 9a       	sbi	0x1f, 0	; 31
    3ea0:	99 27       	eor	r25, r25
    3ea2:	80 b5       	in	r24, 0x20	; 32
    3ea4:	08 95       	ret

00003ea6 <__eewr_byte_usb162>:
    3ea6:	26 2f       	mov	r18, r22

00003ea8 <__eewr_r18_usb162>:
    3ea8:	f9 99       	sbic	0x1f, 1	; 31
    3eaa:	fe cf       	rjmp	.-4      	; 0x3ea8 <__eewr_r18_usb162>
    3eac:	1f ba       	out	0x1f, r1	; 31
    3eae:	92 bd       	out	0x22, r25	; 34
    3eb0:	81 bd       	out	0x21, r24	; 33
    3eb2:	20 bd       	out	0x20, r18	; 32
    3eb4:	0f b6       	in	r0, 0x3f	; 63
    3eb6:	f8 94       	cli
    3eb8:	fa 9a       	sbi	0x1f, 2	; 31
    3eba:	f9 9a       	sbi	0x1f, 1	; 31
    3ebc:	0f be       	out	0x3f, r0	; 63
    3ebe:	01 96       	adiw	r24, 0x01	; 1
    3ec0:	08 95       	ret

00003ec2 <_exit>:
    3ec2:	f8 94       	cli

00003ec4 <__stop_program>:
    3ec4:	ff cf       	rjmp	.-2      	; 0x3ec4 <__stop_program>

Disassembly of section .apitable_trampolines:

00003fa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
    3fa0:	6e cc       	rjmp	.-1828   	; 0x387e <BootloaderAPI_ErasePage>

00003fa2 <BootloaderAPI_WritePage_Trampoline>:
    3fa2:	7f cc       	rjmp	.-1794   	; 0x38a2 <BootloaderAPI_WritePage>

00003fa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
    3fa4:	90 cc       	rjmp	.-1760   	; 0x38c6 <BootloaderAPI_FillWord>

00003fa6 <BootloaderAPI_ReadSignature_Trampoline>:
    3fa6:	9c cc       	rjmp	.-1736   	; 0x38e0 <BootloaderAPI_ReadSignature>

00003fa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
    3fa8:	a1 cc       	rjmp	.-1726   	; 0x38ec <BootloaderAPI_ReadFuse>

00003faa <BootloaderAPI_ReadLock_Trampoline>:
    3faa:	a6 cc       	rjmp	.-1716   	; 0x38f8 <BootloaderAPI_ReadLock>

00003fac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
    3fac:	ac cc       	rjmp	.-1704   	; 0x3906 <BootloaderAPI_WriteLock>

00003fae <BootloaderAPI_UNUSED1>:
    3fae:	08 95       	ret

00003fb0 <BootloaderAPI_UNUSED2>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
    3fb0:	08 95       	ret

00003fb2 <BootloaderAPI_UNUSED3>:
    3fb2:	08 95       	ret

00003fb4 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
    3fb4:	08 95       	ret

00003fb6 <BootloaderAPI_UNUSED5>:
    3fb6:	08 95       	ret

Disassembly of section .apitable_jumptable:

00003fe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
    3fe0:	df cf       	rjmp	.-66     	; 0x3fa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
    3fe2:	df cf       	rjmp	.-66     	; 0x3fa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
    3fe4:	df cf       	rjmp	.-66     	; 0x3fa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
    3fe6:	df cf       	rjmp	.-66     	; 0x3fa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
    3fe8:	df cf       	rjmp	.-66     	; 0x3fa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
    3fea:	df cf       	rjmp	.-66     	; 0x3faa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
    3fec:	df cf       	rjmp	.-66     	; 0x3fac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
    3fee:	df cf       	rjmp	.-66     	; 0x3fae <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
    3ff0:	df cf       	rjmp	.-66     	; 0x3fb0 <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
    3ff2:	df cf       	rjmp	.-66     	; 0x3fb2 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
    3ff4:	df cf       	rjmp	.-66     	; 0x3fb4 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
    3ff6:	df cf       	rjmp	.-66     	; 0x3fb6 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

00003ff8 <BootloaderAPI_Signatures>:
    3ff8:	00 30       	cpi	r16, 0x00	; 0
    3ffa:	00 00       	nop
    3ffc:	00 df       	rcall	.-512    	; 0x3dfe <USB_Device_ProcessControlRequest+0x206>
    3ffe:	fb dc       	rcall	.-1546   	; 0x39f6 <Endpoint_ConfigureEndpoint_Prv+0x10>
