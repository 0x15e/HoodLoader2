
Hoodloader2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00003e90  00000f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e90  00003000  00003000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000018  00003fa0  00003fa0  00000ff0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  00003fe0  00003fe0  00001008  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  00003ff8  00003ff8  00001020  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          00000052  0080018c  0080018c  00001028  2**0
                  ALLOC
  6 .noinit       00000002  008001de  008001de  00001028  2**0
                  ALLOC
  7 .stab         00000954  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      000000e2  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00001a5e  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000003a0  00000000  00000000  00001a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000056b7  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000165e  00000000  00000000  000074c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000287e  00000000  00000000  00008b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000978  00000000  00000000  0000b3a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a00  00000000  00000000  0000bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00003cb7  00000000  00000000  0000e71c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000600  00000000  00000000  000123d8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003000 <__vectors>:
    3000:	39 c0       	rjmp	.+114    	; 0x3074 <__ctors_end>
    3002:	00 00       	nop
    3004:	6e c0       	rjmp	.+220    	; 0x30e2 <__bad_interrupt>
    3006:	00 00       	nop
    3008:	6c c0       	rjmp	.+216    	; 0x30e2 <__bad_interrupt>
    300a:	00 00       	nop
    300c:	6a c0       	rjmp	.+212    	; 0x30e2 <__bad_interrupt>
    300e:	00 00       	nop
    3010:	68 c0       	rjmp	.+208    	; 0x30e2 <__bad_interrupt>
    3012:	00 00       	nop
    3014:	66 c0       	rjmp	.+204    	; 0x30e2 <__bad_interrupt>
    3016:	00 00       	nop
    3018:	64 c0       	rjmp	.+200    	; 0x30e2 <__bad_interrupt>
    301a:	00 00       	nop
    301c:	62 c0       	rjmp	.+196    	; 0x30e2 <__bad_interrupt>
    301e:	00 00       	nop
    3020:	60 c0       	rjmp	.+192    	; 0x30e2 <__bad_interrupt>
    3022:	00 00       	nop
    3024:	5e c0       	rjmp	.+188    	; 0x30e2 <__bad_interrupt>
    3026:	00 00       	nop
    3028:	5c c0       	rjmp	.+184    	; 0x30e2 <__bad_interrupt>
    302a:	00 00       	nop
    302c:	3f c5       	rjmp	.+2686   	; 0x3aac <__vector_11>
    302e:	00 00       	nop
    3030:	58 c0       	rjmp	.+176    	; 0x30e2 <__bad_interrupt>
    3032:	00 00       	nop
    3034:	56 c0       	rjmp	.+172    	; 0x30e2 <__bad_interrupt>
    3036:	00 00       	nop
    3038:	54 c0       	rjmp	.+168    	; 0x30e2 <__bad_interrupt>
    303a:	00 00       	nop
    303c:	52 c0       	rjmp	.+164    	; 0x30e2 <__bad_interrupt>
    303e:	00 00       	nop
    3040:	50 c0       	rjmp	.+160    	; 0x30e2 <__bad_interrupt>
    3042:	00 00       	nop
    3044:	4e c0       	rjmp	.+156    	; 0x30e2 <__bad_interrupt>
    3046:	00 00       	nop
    3048:	4c c0       	rjmp	.+152    	; 0x30e2 <__bad_interrupt>
    304a:	00 00       	nop
    304c:	4a c0       	rjmp	.+148    	; 0x30e2 <__bad_interrupt>
    304e:	00 00       	nop
    3050:	48 c0       	rjmp	.+144    	; 0x30e2 <__bad_interrupt>
    3052:	00 00       	nop
    3054:	46 c0       	rjmp	.+140    	; 0x30e2 <__bad_interrupt>
    3056:	00 00       	nop
    3058:	44 c0       	rjmp	.+136    	; 0x30e2 <__bad_interrupt>
    305a:	00 00       	nop
    305c:	5b c3       	rjmp	.+1718   	; 0x3714 <__vector_23>
    305e:	00 00       	nop
    3060:	40 c0       	rjmp	.+128    	; 0x30e2 <__bad_interrupt>
    3062:	00 00       	nop
    3064:	3e c0       	rjmp	.+124    	; 0x30e2 <__bad_interrupt>
    3066:	00 00       	nop
    3068:	3c c0       	rjmp	.+120    	; 0x30e2 <__bad_interrupt>
    306a:	00 00       	nop
    306c:	3a c0       	rjmp	.+116    	; 0x30e2 <__bad_interrupt>
    306e:	00 00       	nop
    3070:	38 c0       	rjmp	.+112    	; 0x30e2 <__bad_interrupt>
    3072:	00 00       	nop

00003074 <__ctors_end>:
    3074:	11 24       	eor	r1, r1
    3076:	1f be       	out	0x3f, r1	; 63
    3078:	cf ef       	ldi	r28, 0xFF	; 255
    307a:	d2 e0       	ldi	r29, 0x02	; 2
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	cd bf       	out	0x3d, r28	; 61

00003080 <Application_Jump_Check>:
/** Special startup routine to check if the bootloader was started via a watchdog reset, and if the magic application
 *  start key has been loaded into \ref MagicBootKey. If the bootloader started via the watchdog and the key is valid,
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
    3080:	04 b6       	in	r0, 0x34	; 52
    3082:	03 fe       	sbrs	r0, 3
    3084:	19 c0       	rjmp	.+50     	; 0x30b8 <__do_copy_data>
	/* Re-enable JTAG debugging */
	JTAG_ENABLE();
#endif

	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
    3086:	80 91 de 01 	lds	r24, 0x01DE
    308a:	90 91 df 01 	lds	r25, 0x01DF
    308e:	82 34       	cpi	r24, 0x42	; 66
    3090:	9c 4d       	sbci	r25, 0xDC	; 220
    3092:	91 f4       	brne	.+36     	; 0x30b8 <__do_copy_data>

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication)
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1 << WDRF);
    3094:	84 b7       	in	r24, 0x34	; 52
    3096:	87 7f       	andi	r24, 0xF7	; 247
    3098:	84 bf       	out	0x34, r24	; 52
		wdt_disable();
    309a:	88 e1       	ldi	r24, 0x18	; 24
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	80 93 60 00 	sts	0x0060, r24
    30a4:	10 92 60 00 	sts	0x0060, r1
    30a8:	0f be       	out	0x3f, r0	; 63

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
    30aa:	10 92 df 01 	sts	0x01DF, r1
    30ae:	10 92 de 01 	sts	0x01DE, r1

		// cppcheck-suppress constStatement
		((void(*)(void))0x0000)();
    30b2:	e0 e0       	ldi	r30, 0x00	; 0
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	09 95       	icall

000030b8 <__do_copy_data>:
    30b8:	11 e0       	ldi	r17, 0x01	; 1
    30ba:	a0 e0       	ldi	r26, 0x00	; 0
    30bc:	b1 e0       	ldi	r27, 0x01	; 1
    30be:	e0 e9       	ldi	r30, 0x90	; 144
    30c0:	fe e3       	ldi	r31, 0x3E	; 62
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <__do_copy_data+0x10>
    30c4:	05 90       	lpm	r0, Z+
    30c6:	0d 92       	st	X+, r0
    30c8:	ac 38       	cpi	r26, 0x8C	; 140
    30ca:	b1 07       	cpc	r27, r17
    30cc:	d9 f7       	brne	.-10     	; 0x30c4 <__do_copy_data+0xc>

000030ce <__do_clear_bss>:
    30ce:	11 e0       	ldi	r17, 0x01	; 1
    30d0:	ac e8       	ldi	r26, 0x8C	; 140
    30d2:	b1 e0       	ldi	r27, 0x01	; 1
    30d4:	01 c0       	rjmp	.+2      	; 0x30d8 <.do_clear_bss_start>

000030d6 <.do_clear_bss_loop>:
    30d6:	1d 92       	st	X+, r1

000030d8 <.do_clear_bss_start>:
    30d8:	ae 3d       	cpi	r26, 0xDE	; 222
    30da:	b1 07       	cpc	r27, r17
    30dc:	e1 f7       	brne	.-8      	; 0x30d6 <.do_clear_bss_loop>
    30de:	1c d0       	rcall	.+56     	; 0x3118 <main>
    30e0:	d5 c6       	rjmp	.+3498   	; 0x3e8c <_exit>

000030e2 <__bad_interrupt>:
    30e2:	8e cf       	rjmp	.-228    	; 0x3000 <__vectors>

000030e4 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    30e4:	84 e0       	ldi	r24, 0x04	; 4
    30e6:	80 93 e9 00 	sts	0x00E9, r24
    30ea:	0d c0       	rjmp	.+26     	; 0x3106 <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    30ec:	80 91 e8 00 	lds	r24, 0x00E8
    30f0:	8b 77       	andi	r24, 0x7B	; 123
    30f2:	80 93 e8 00 	sts	0x00E8, r24
    30f6:	03 c0       	rjmp	.+6      	; 0x30fe <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    30f8:	8e b3       	in	r24, 0x1e	; 30
    30fa:	88 23       	and	r24, r24
    30fc:	59 f0       	breq	.+22     	; 0x3114 <FetchNextCommandByte+0x30>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    30fe:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    3102:	82 ff       	sbrs	r24, 2
    3104:	f9 cf       	rjmp	.-14     	; 0x30f8 <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3106:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    310a:	85 ff       	sbrs	r24, 5
    310c:	ef cf       	rjmp	.-34     	; 0x30ec <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    310e:	80 91 f1 00 	lds	r24, 0x00F1
				return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
    3112:	08 95       	ret
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
				return 0;
    3114:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    3116:	08 95       	ret

00003118 <main>:
/** Main program entry point. This routine configures the hardware required by the bootloader, then continuously
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
int main(void)
{
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	27 97       	sbiw	r28, 0x07	; 7
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    312c:	84 b7       	in	r24, 0x34	; 52
    312e:	87 7f       	andi	r24, 0xF7	; 247
    3130:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    3132:	88 e1       	ldi	r24, 0x18	; 24
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	80 93 60 00 	sts	0x0060, r24
    313c:	10 92 60 00 	sts	0x0060, r1
    3140:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	80 e8       	ldi	r24, 0x80	; 128
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	80 93 61 00 	sts	0x0061, r24
    314e:	90 93 61 00 	sts	0x0061, r25
    3152:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    3158:	82 e0       	ldi	r24, 0x02	; 2
    315a:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
    315c:	98 d4       	rcall	.+2352   	; 0x3a8e <USB_Init>
    315e:	8a b1       	in	r24, 0x0a	; 10

	/* Inline Functions: */
#if !defined(__DOXYGEN__)
	static inline void LEDs_Init(void)
	{
		DDRD |= LEDS_ALL_LEDS;
    3160:	80 63       	ori	r24, 0x30	; 48
    3162:	8a b9       	out	0x0a, r24	; 10
    3164:	8b b1       	in	r24, 0x0b	; 11
		PORTD |= LEDS_ALL_LEDS;
    3166:	80 63       	ori	r24, 0x30	; 48
    3168:	8b b9       	out	0x0b, r24	; 11
    316a:	53 9a       	sbi	0x0a, 3	; 10
	//TODO leds
	LEDs_Init();

	// Setup the TX Pin to OUTPUT and RX with PULLUP
	DDRD |= (1 << 3);
    316c:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD |= (1 << 2);
    316e:	5f 9a       	sbi	0x0b, 7	; 11

	/* Pull target /RESET line high */
	//TODO merge led + reset line init
	AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    3170:	57 9a       	sbi	0x0a, 7	; 10
	AVR_RESET_LINE_DDR |= AVR_RESET_LINE_MASK;
    3172:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3174:	53 e0       	ldi	r21, 0x03	; 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3176:	b5 2e       	mov	r11, r21
    3178:	11 e0       	ldi	r17, 0x01	; 1
    317a:	65 e0       	ldi	r22, 0x05	; 5

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    317c:	96 2e       	mov	r9, r22
    317e:	09 e0       	ldi	r16, 0x09	; 9
			{
				WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
			}
			else if (Command == AVR109_COMMAND_ReadExtendedFuses)
			{
				WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    3180:	02 c2       	rjmp	.+1028   	; 0x3586 <main+0x46e>
    3182:	24 e0       	ldi	r18, 0x04	; 4
    3184:	20 93 e9 00 	sts	0x00E9, r18
    3188:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    318c:	82 ff       	sbrs	r24, 2
{
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Check if endpoint has a command in it sent from the host */
	if ((Endpoint_IsOUTReceived())){
    318e:	cd c1       	rjmp	.+922    	; 0x352a <main+0x412>
    3190:	a9 df       	rcall	.-174    	; 0x30e4 <FetchNextCommandByte>

		/* Read in the bootloader command (first byte sent from host) */
		uint8_t Command = FetchNextCommandByte();
    3192:	98 2f       	mov	r25, r24
    3194:	80 91 8c 01 	lds	r24, 0x018C

		if (!CDCActive){
    3198:	81 11       	cpse	r24, r1
    319a:	0b c0       	rjmp	.+22     	; 0x31b2 <main+0x9a>
    319c:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    31a0:	85 ff       	sbrs	r24, 5
    31a2:	fc cf       	rjmp	.-8      	; 0x319c <main+0x84>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    31a4:	90 93 ce 00 	sts	0x00CE, r25
				UDR1 = DataByte;
    31a8:	80 91 f2 00 	lds	r24, 0x00F2
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    31ac:	81 11       	cpse	r24, r1
    31ae:	bd c1       	rjmp	.+890    	; 0x352a <main+0x412>
			/* Store received byte into the USART transmit buffer */
			//if (Endpoint_BytesInEndpoint())
			Serial_SendByte(Command);

			// if endpoint is completely empty/read acknowledge that to the host
			if (!(Endpoint_BytesInEndpoint()))
    31b0:	b7 c1       	rjmp	.+878    	; 0x3520 <main+0x408>
    31b2:	95 34       	cpi	r25, 0x45	; 69
    31b4:	19 f4       	brne	.+6      	; 0x31bc <main+0xa4>
				Endpoint_ClearOUT();
		}
		else{

			if (Command == AVR109_COMMAND_ExitBootloader)
    31b6:	10 92 00 01 	sts	0x0100, r1
			{
				RunBootloader = false;
    31ba:	8f c1       	rjmp	.+798    	; 0x34da <main+0x3c2>
    31bc:	89 2f       	mov	r24, r25
    31be:	88 57       	subi	r24, 0x78	; 120

				/* Send confirmation byte back to the host */
				WriteNextResponseByte('\r');
			}
			else if ((Command == AVR109_COMMAND_SetLED) || (Command == AVR109_COMMAND_ClearLED) ||
    31c0:	82 30       	cpi	r24, 0x02	; 2
    31c2:	10 f0       	brcs	.+4      	; 0x31c8 <main+0xb0>
    31c4:	94 35       	cpi	r25, 0x54	; 84
    31c6:	11 f4       	brne	.+4      	; 0x31cc <main+0xb4>
    31c8:	8d df       	rcall	.-230    	; 0x30e4 <FetchNextCommandByte>
    31ca:	87 c1       	rjmp	.+782    	; 0x34da <main+0x3c2>
				(Command == AVR109_COMMAND_SelectDeviceType))
			{
				FetchNextCommandByte();
    31cc:	90 35       	cpi	r25, 0x50	; 80
    31ce:	09 f4       	brne	.+2      	; 0x31d2 <main+0xba>
    31d0:	84 c1       	rjmp	.+776    	; 0x34da <main+0x3c2>

				/* Send confirmation byte back to the host */
				WriteNextResponseByte('\r');
			}
			else if ((Command == AVR109_COMMAND_EnterProgrammingMode) || (Command == AVR109_COMMAND_LeaveProgrammingMode))
    31d2:	9c 34       	cpi	r25, 0x4C	; 76
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <main+0xc0>
    31d6:	81 c1       	rjmp	.+770    	; 0x34da <main+0x3c2>
    31d8:	94 37       	cpi	r25, 0x74	; 116
    31da:	09 f4       	brne	.+2      	; 0x31de <main+0xc6>
    31dc:	7e c1       	rjmp	.+764    	; 0x34da <main+0x3c2>
			{
				/* Send confirmation byte back to the host */
				WriteNextResponseByte('\r');
			}
			else if (Command == AVR109_COMMAND_ReadPartCode)
    31de:	91 36       	cpi	r25, 0x61	; 97
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <main+0xcc>
    31e2:	7b c1       	rjmp	.+758    	; 0x34da <main+0x3c2>
			{
				/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
				WriteNextResponseByte(0x44);
				WriteNextResponseByte(0x00);
			}
			else if (Command == AVR109_COMMAND_ReadAutoAddressIncrement)
    31e4:	91 34       	cpi	r25, 0x41	; 65
    31e6:	91 f4       	brne	.+36     	; 0x320c <main+0xf4>
    31e8:	7d df       	rcall	.-262    	; 0x30e4 <FetchNextCommandByte>
			{
				/* Indicate auto-address increment is supported */
				WriteNextResponseByte('Y');
			}
			else if (Command == AVR109_COMMAND_SetCurrentAddress)
    31ea:	f8 2e       	mov	r15, r24
    31ec:	7b df       	rcall	.-266    	; 0x30e4 <FetchNextCommandByte>
			{
				/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
				CurrAddress = (FetchNextCommandByte() << 9);
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	88 0f       	add	r24, r24
    31f2:	99 1f       	adc	r25, r25
				CurrAddress |= (FetchNextCommandByte() << 1);
    31f4:	ff 0c       	add	r15, r15
    31f6:	fa 82       	std	Y+2, r15	; 0x02
    31f8:	19 82       	std	Y+1, r1	; 0x01
    31fa:	29 81       	ldd	r18, Y+1	; 0x01
    31fc:	3a 81       	ldd	r19, Y+2	; 0x02
				WriteNextResponseByte('Y');
			}
			else if (Command == AVR109_COMMAND_SetCurrentAddress)
			{
				/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
				CurrAddress = (FetchNextCommandByte() << 9);
    31fe:	82 2b       	or	r24, r18
    3200:	93 2b       	or	r25, r19
    3202:	aa 27       	eor	r26, r26
				CurrAddress |= (FetchNextCommandByte() << 1);
    3204:	97 fd       	sbrc	r25, 7
    3206:	a0 95       	com	r26
    3208:	ba 2f       	mov	r27, r26
    320a:	5f c1       	rjmp	.+702    	; 0x34ca <main+0x3b2>
    320c:	90 37       	cpi	r25, 0x70	; 112
    320e:	09 f4       	brne	.+2      	; 0x3212 <main+0xfa>
    3210:	64 c1       	rjmp	.+712    	; 0x34da <main+0x3c2>
    3212:	93 35       	cpi	r25, 0x53	; 83
    3214:	09 f4       	brne	.+2      	; 0x3218 <main+0x100>

				/* Send confirmation byte back to the host */
				WriteNextResponseByte('\r');
			}
			else if (Command == AVR109_COMMAND_ReadBootloaderInterface)
    3216:	61 c1       	rjmp	.+706    	; 0x34da <main+0x3c2>
    3218:	96 35       	cpi	r25, 0x56	; 86
    321a:	09 f4       	brne	.+2      	; 0x321e <main+0x106>
			{
				/* Indicate serial programmer back to the host */
				WriteNextResponseByte('S');
			}
			else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
    321c:	5e c1       	rjmp	.+700    	; 0x34da <main+0x3c2>
    321e:	93 37       	cpi	r25, 0x73	; 115
    3220:	09 f4       	brne	.+2      	; 0x3224 <main+0x10c>
			{
				/* Write the 7-byte software identifier to the endpoint */
				for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
					WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
			}
			else if (Command == AVR109_COMMAND_ReadBootloaderSWVersion)
    3222:	5b c1       	rjmp	.+694    	; 0x34da <main+0x3c2>
    3224:	95 36       	cpi	r25, 0x65	; 101
    3226:	a9 f4       	brne	.+42     	; 0x3252 <main+0x13a>
			{
				WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
				WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
			}
			else if (Command == AVR109_COMMAND_ReadSignature)
    3228:	e0 e0       	ldi	r30, 0x00	; 0
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	b0 92 57 00 	sts	0x0057, r11
			{
				WriteNextResponseByte(AVR_SIGNATURE_3);
				WriteNextResponseByte(AVR_SIGNATURE_2);
				WriteNextResponseByte(AVR_SIGNATURE_1);
			}
			else if (Command == AVR109_COMMAND_EraseFLASH)
    3230:	e8 95       	spm
    3232:	07 b6       	in	r0, 0x37	; 55
    3234:	00 fc       	sbrc	r0, 0
			{
				/* Clear the application section of flash */
				for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
				{
					boot_page_erase(CurrFlashAddress);
    3236:	fd cf       	rjmp	.-6      	; 0x3232 <main+0x11a>
    3238:	90 92 57 00 	sts	0x0057, r9
					boot_spm_busy_wait();
    323c:	e8 95       	spm
    323e:	07 b6       	in	r0, 0x37	; 55
    3240:	00 fc       	sbrc	r0, 0
					boot_page_write(CurrFlashAddress);
    3242:	fd cf       	rjmp	.-6      	; 0x323e <main+0x126>
    3244:	e0 58       	subi	r30, 0x80	; 128
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
					boot_spm_busy_wait();
    3248:	e1 15       	cp	r30, r1
    324a:	30 e3       	ldi	r19, 0x30	; 48
    324c:	f3 07       	cpc	r31, r19
    324e:	71 f7       	brne	.-36     	; 0x322c <main+0x114>
    3250:	44 c1       	rjmp	.+648    	; 0x34da <main+0x3c2>
				WriteNextResponseByte(AVR_SIGNATURE_1);
			}
			else if (Command == AVR109_COMMAND_EraseFLASH)
			{
				/* Clear the application section of flash */
				for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    3252:	9c 36       	cpi	r25, 0x6C	; 108
    3254:	49 f4       	brne	.+18     	; 0x3268 <main+0x150>
    3256:	46 df       	rcall	.-372    	; 0x30e4 <FetchNextCommandByte>
    3258:	80 95       	com	r24
    325a:	e1 e0       	ldi	r30, 0x01	; 1

				/* Send confirmation byte back to the host */
				WriteNextResponseByte('\r');
			}
#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
			else if (Command == AVR109_COMMAND_WriteLockbits)
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	08 2e       	mov	r0, r24
			{
				/* Set the lock bits to those given by the host */
				boot_lock_bits_set(FetchNextCommandByte());
    3260:	00 93 57 00 	sts	0x0057, r16
    3264:	e8 95       	spm
    3266:	39 c1       	rjmp	.+626    	; 0x34da <main+0x3c2>
    3268:	92 37       	cpi	r25, 0x72	; 114
    326a:	31 f4       	brne	.+12     	; 0x3278 <main+0x160>
    326c:	e1 e0       	ldi	r30, 0x01	; 1
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	00 93 57 00 	sts	0x0057, r16

				/* Send confirmation byte back to the host */
				WriteNextResponseByte('\r');
			}
#endif
			else if (Command == AVR109_COMMAND_ReadLockbits)
    3274:	e4 91       	lpm	r30, Z+
    3276:	31 c1       	rjmp	.+610    	; 0x34da <main+0x3c2>
			{
				WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    3278:	96 34       	cpi	r25, 0x46	; 70
    327a:	19 f4       	brne	.+6      	; 0x3282 <main+0x16a>
    327c:	e0 e0       	ldi	r30, 0x00	; 0
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	04 c0       	rjmp	.+8      	; 0x328a <main+0x172>
    3282:	9e 34       	cpi	r25, 0x4E	; 78
			}
			else if (Command == AVR109_COMMAND_ReadLowFuses)
    3284:	31 f4       	brne	.+12     	; 0x3292 <main+0x17a>
    3286:	e3 e0       	ldi	r30, 0x03	; 3
			{
				WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	00 93 57 00 	sts	0x0057, r16
			}
			else if (Command == AVR109_COMMAND_ReadHighFuses)
    328e:	84 91       	lpm	r24, Z+
    3290:	24 c1       	rjmp	.+584    	; 0x34da <main+0x3c2>
			{
				WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    3292:	91 35       	cpi	r25, 0x51	; 81
    3294:	19 f4       	brne	.+6      	; 0x329c <main+0x184>
    3296:	e2 e0       	ldi	r30, 0x02	; 2
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	f7 cf       	rjmp	.-18     	; 0x328a <main+0x172>
    329c:	92 36       	cpi	r25, 0x62	; 98
			}
			else if (Command == AVR109_COMMAND_ReadExtendedFuses)
    329e:	09 f4       	brne	.+2      	; 0x32a2 <main+0x18a>
    32a0:	1c c1       	rjmp	.+568    	; 0x34da <main+0x3c2>
			{
				WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    32a2:	92 34       	cpi	r25, 0x42	; 66
    32a4:	19 f0       	breq	.+6      	; 0x32ac <main+0x194>
    32a6:	97 36       	cpi	r25, 0x67	; 103
			}
#if !defined(NO_BLOCK_SUPPORT)
			else if (Command == AVR109_COMMAND_GetBlockWriteSupport)
    32a8:	09 f0       	breq	.+2      	; 0x32ac <main+0x194>
    32aa:	af c0       	rjmp	.+350    	; 0x340a <main+0x2f2>
    32ac:	9d 83       	std	Y+5, r25	; 0x05

				/* Send block size to the host */
				WriteNextResponseByte(SPM_PAGESIZE >> 8);
				WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
			}
			else if ((Command == AVR109_COMMAND_BlockWrite) || (Command == AVR109_COMMAND_BlockRead))
    32ae:	1a df       	rcall	.-460    	; 0x30e4 <FetchNextCommandByte>
    32b0:	78 2e       	mov	r7, r24
    32b2:	61 2c       	mov	r6, r1
    32b4:	17 df       	rcall	.-466    	; 0x30e4 <FetchNextCommandByte>
    32b6:	93 01       	movw	r18, r6
	char     MemoryType;

	uint8_t  HighByte = 0;
	uint8_t  LowByte = 0;

	BlockSize = (FetchNextCommandByte() << 8);
    32b8:	28 2b       	or	r18, r24
    32ba:	3f 83       	std	Y+7, r19	; 0x07
    32bc:	2e 83       	std	Y+6, r18	; 0x06
    32be:	12 df       	rcall	.-476    	; 0x30e4 <FetchNextCommandByte>
    32c0:	48 2f       	mov	r20, r24
	BlockSize |= FetchNextCommandByte();
    32c2:	85 54       	subi	r24, 0x45	; 69
    32c4:	9d 81       	ldd	r25, Y+5	; 0x05
    32c6:	82 30       	cpi	r24, 0x02	; 2
    32c8:	08 f0       	brcs	.+2      	; 0x32cc <main+0x1b4>
    32ca:	07 c1       	rjmp	.+526    	; 0x34da <main+0x3c2>
    32cc:	c0 90 8d 01 	lds	r12, 0x018D

	MemoryType = FetchNextCommandByte();
    32d0:	d0 90 8e 01 	lds	r13, 0x018E

	if ((MemoryType != MEMORY_TYPE_FLASH) && (MemoryType != MEMORY_TYPE_EEPROM))
    32d4:	e0 90 8f 01 	lds	r14, 0x018F
    32d8:	f0 90 90 01 	lds	r15, 0x0190
    32dc:	97 36       	cpi	r25, 0x67	; 103
    32de:	01 f5       	brne	.+64     	; 0x3320 <main+0x208>
    32e0:	31 e1       	ldi	r19, 0x11	; 17
    32e2:	30 93 57 00 	sts	0x0057, r19
    32e6:	e8 95       	spm
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	10 c0       	rjmp	.+32     	; 0x330c <main+0x1f4>
    32ec:	46 34       	cpi	r20, 0x46	; 70

		return;
	}

	/* Check if command is to read a memory block */
	if (Command == AVR109_COMMAND_BlockRead)
    32ee:	49 f4       	brne	.+18     	; 0x3302 <main+0x1ea>
    32f0:	88 23       	and	r24, r24
	{
		/* Re-enable RWW section */
		boot_rww_enable();
    32f2:	29 f0       	breq	.+10     	; 0x32fe <main+0x1e6>
    32f4:	92 e0       	ldi	r25, 0x02	; 2
    32f6:	c9 0e       	add	r12, r25
    32f8:	d1 1c       	adc	r13, r1
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	uint8_t  HighByte = 0;
    32fa:	e1 1c       	adc	r14, r1
    32fc:	f1 1c       	adc	r15, r1
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
    32fe:	81 27       	eor	r24, r17
    3300:	05 c0       	rjmp	.+10     	; 0x330c <main+0x1f4>
#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    3302:	e2 e0       	ldi	r30, 0x02	; 2
    3304:	ce 0e       	add	r12, r30
					CurrAddress += 2;
    3306:	d1 1c       	adc	r13, r1
    3308:	e1 1c       	adc	r14, r1
    330a:	f1 1c       	adc	r15, r1
    330c:	2e 81       	ldd	r18, Y+6	; 0x06
    330e:	3f 81       	ldd	r19, Y+7	; 0x07
    3310:	21 50       	subi	r18, 0x01	; 1
    3312:	31 09       	sbc	r19, r1
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));

				/* Increment the address counter after use */
				CurrAddress += 2;
    3314:	3f 83       	std	Y+7, r19	; 0x07
    3316:	2e 83       	std	Y+6, r18	; 0x06
    3318:	2f 3f       	cpi	r18, 0xFF	; 255
    331a:	3f 4f       	sbci	r19, 0xFF	; 255
    331c:	39 f7       	brne	.-50     	; 0x32ec <main+0x1d4>
	if (Command == AVR109_COMMAND_BlockRead)
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    331e:	9e c0       	rjmp	.+316    	; 0x345c <main+0x344>
    3320:	46 34       	cpi	r20, 0x46	; 70
    3322:	09 f0       	breq	.+2      	; 0x3326 <main+0x20e>
    3324:	60 c0       	rjmp	.+192    	; 0x33e6 <main+0x2ce>
    3326:	f6 01       	movw	r30, r12
    3328:	b0 92 57 00 	sts	0x0057, r11
    332c:	e8 95       	spm
    332e:	07 b6       	in	r0, 0x37	; 55
    3330:	00 fc       	sbrc	r0, 0
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == MEMORY_TYPE_FLASH)
    3332:	fd cf       	rjmp	.-6      	; 0x332e <main+0x216>
    3334:	58 c0       	rjmp	.+176    	; 0x33e6 <main+0x2ce>
    3336:	46 34       	cpi	r20, 0x46	; 70
		{
			boot_page_erase(PageStartAddress);
    3338:	59 f5       	brne	.+86     	; 0x3390 <main+0x278>
    333a:	aa 20       	and	r10, r10
    333c:	19 f1       	breq	.+70     	; 0x3384 <main+0x26c>
    333e:	20 90 8d 01 	lds	r2, 0x018D
			boot_spm_busy_wait();
    3342:	30 90 8e 01 	lds	r3, 0x018E
    3346:	40 90 8f 01 	lds	r4, 0x018F
		}

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
    334a:	50 90 90 01 	lds	r5, 0x0190
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    334e:	4d 83       	std	Y+5, r20	; 0x05
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    3350:	c9 de       	rcall	.-622    	; 0x30e4 <FetchNextCommandByte>
    3352:	8c 83       	std	Y+4, r24	; 0x04
    3354:	1b 82       	std	Y+3, r1	; 0x03
    3356:	2b 81       	ldd	r18, Y+3	; 0x03
    3358:	3c 81       	ldd	r19, Y+4	; 0x04
    335a:	28 29       	or	r18, r8
    335c:	f1 01       	movw	r30, r2
    335e:	09 01       	movw	r0, r18
    3360:	10 93 57 00 	sts	0x0057, r17
    3364:	e8 95       	spm
    3366:	11 24       	eor	r1, r1
    3368:	d2 01       	movw	r26, r4
    336a:	c1 01       	movw	r24, r2
    336c:	02 96       	adiw	r24, 0x02	; 2
    336e:	a1 1d       	adc	r26, r1
    3370:	b1 1d       	adc	r27, r1
    3372:	80 93 8d 01 	sts	0x018D, r24
    3376:	90 93 8e 01 	sts	0x018E, r25
    337a:	a0 93 8f 01 	sts	0x018F, r26

					/* Increment the address counter after use */
					CurrAddress += 2;
    337e:	b0 93 90 01 	sts	0x0190, r27
    3382:	03 c0       	rjmp	.+6      	; 0x338a <main+0x272>
    3384:	4d 83       	std	Y+5, r20	; 0x05
    3386:	ae de       	rcall	.-676    	; 0x30e4 <FetchNextCommandByte>
    3388:	88 2e       	mov	r8, r24
    338a:	4d 81       	ldd	r20, Y+5	; 0x05
    338c:	a1 26       	eor	r10, r17
    338e:	24 c0       	rjmp	.+72     	; 0x33d8 <main+0x2c0>
    3390:	4d 83       	std	Y+5, r20	; 0x05
    3392:	a8 de       	rcall	.-688    	; 0x30e4 <FetchNextCommandByte>
    3394:	68 2f       	mov	r22, r24
    3396:	80 91 8d 01 	lds	r24, 0x018D
				}
				else
				{
					LowByte = FetchNextCommandByte();
    339a:	90 91 8e 01 	lds	r25, 0x018E
    339e:	a0 91 8f 01 	lds	r26, 0x018F
    33a2:	b0 91 90 01 	lds	r27, 0x0190
				HighByte = !HighByte;
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    33a6:	b6 95       	lsr	r27
    33a8:	a7 95       	ror	r26
    33aa:	97 95       	ror	r25
    33ac:	87 95       	ror	r24
    33ae:	60 d5       	rcall	.+2752   	; 0x3e70 <__eewr_byte_m16u2>
    33b0:	80 91 8d 01 	lds	r24, 0x018D
    33b4:	90 91 8e 01 	lds	r25, 0x018E
    33b8:	a0 91 8f 01 	lds	r26, 0x018F
    33bc:	b0 91 90 01 	lds	r27, 0x0190
    33c0:	02 96       	adiw	r24, 0x02	; 2
    33c2:	a1 1d       	adc	r26, r1
    33c4:	b1 1d       	adc	r27, r1
    33c6:	80 93 8d 01 	sts	0x018D, r24

				/* Increment the address counter after use */
				CurrAddress += 2;
    33ca:	90 93 8e 01 	sts	0x018E, r25
    33ce:	a0 93 8f 01 	sts	0x018F, r26
    33d2:	b0 93 90 01 	sts	0x0190, r27
    33d6:	4d 81       	ldd	r20, Y+5	; 0x05
    33d8:	2e 81       	ldd	r18, Y+6	; 0x06
    33da:	3f 81       	ldd	r19, Y+7	; 0x07
    33dc:	21 50       	subi	r18, 0x01	; 1
    33de:	31 09       	sbc	r19, r1
    33e0:	3f 83       	std	Y+7, r19	; 0x07
    33e2:	2e 83       	std	Y+6, r18	; 0x06
    33e4:	02 c0       	rjmp	.+4      	; 0x33ea <main+0x2d2>
    33e6:	81 2c       	mov	r8, r1
    33e8:	a1 2c       	mov	r10, r1
    33ea:	2e 81       	ldd	r18, Y+6	; 0x06
    33ec:	3f 81       	ldd	r19, Y+7	; 0x07
    33ee:	23 2b       	or	r18, r19
    33f0:	09 f0       	breq	.+2      	; 0x33f4 <main+0x2dc>
    33f2:	a1 cf       	rjmp	.-190    	; 0x3336 <main+0x21e>
    33f4:	46 34       	cpi	r20, 0x46	; 70
    33f6:	09 f0       	breq	.+2      	; 0x33fa <main+0x2e2>
    33f8:	70 c0       	rjmp	.+224    	; 0x34da <main+0x3c2>
    33fa:	f6 01       	movw	r30, r12
    33fc:	90 92 57 00 	sts	0x0057, r9
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == MEMORY_TYPE_FLASH)
    3400:	e8 95       	spm
    3402:	07 b6       	in	r0, 0x37	; 55
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    3404:	00 fc       	sbrc	r0, 0
    3406:	fd cf       	rjmp	.-6      	; 0x3402 <main+0x2ea>
    3408:	68 c0       	rjmp	.+208    	; 0x34da <main+0x3c2>
    340a:	93 34       	cpi	r25, 0x43	; 67
    340c:	69 f4       	brne	.+26     	; 0x3428 <main+0x310>
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
    340e:	e0 90 8d 01 	lds	r14, 0x018D
    3412:	f0 90 8e 01 	lds	r15, 0x018E
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    3416:	66 de       	rcall	.-820    	; 0x30e4 <FetchNextCommandByte>
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	f7 01       	movw	r30, r14

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    341c:	0c 01       	movw	r0, r24
    341e:	10 93 57 00 	sts	0x0057, r17
    3422:	e8 95       	spm
				/* Delegate the block write/read to a separate function for clarity */
				ReadWriteMemoryBlock(Command);
			}
#endif
#if !defined(NO_FLASH_BYTE_SUPPORT)
			else if (Command == AVR109_COMMAND_FillFlashPageWordHigh)
    3424:	11 24       	eor	r1, r1
    3426:	59 c0       	rjmp	.+178    	; 0x34da <main+0x3c2>
			{
				/* Write the high byte to the current flash page */
				boot_page_fill(CurrAddress, FetchNextCommandByte());
    3428:	93 36       	cpi	r25, 0x63	; 99
    342a:	09 f5       	brne	.+66     	; 0x346e <main+0x356>
    342c:	c0 90 8d 01 	lds	r12, 0x018D
    3430:	d0 90 8e 01 	lds	r13, 0x018E
    3434:	e0 90 8f 01 	lds	r14, 0x018F
    3438:	f0 90 90 01 	lds	r15, 0x0190
    343c:	53 de       	rcall	.-858    	; 0x30e4 <FetchNextCommandByte>
    343e:	b7 01       	movw	r22, r14
    3440:	a6 01       	movw	r20, r12
    3442:	41 60       	ori	r20, 0x01	; 1

				/* Send confirmation byte back to the host */
				WriteNextResponseByte('\r');
			}
			else if (Command == AVR109_COMMAND_FillFlashPageWordLow)
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	fa 01       	movw	r30, r20
			{
				/* Write the low byte to the current flash page */
				boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    3448:	0c 01       	movw	r0, r24
    344a:	10 93 57 00 	sts	0x0057, r17
    344e:	e8 95       	spm
    3450:	11 24       	eor	r1, r1
    3452:	f2 e0       	ldi	r31, 0x02	; 2
    3454:	cf 0e       	add	r12, r31
    3456:	d1 1c       	adc	r13, r1
    3458:	e1 1c       	adc	r14, r1
    345a:	f1 1c       	adc	r15, r1
    345c:	c0 92 8d 01 	sts	0x018D, r12
    3460:	d0 92 8e 01 	sts	0x018E, r13
    3464:	e0 92 8f 01 	sts	0x018F, r14
    3468:	f0 92 90 01 	sts	0x0190, r15
    346c:	36 c0       	rjmp	.+108    	; 0x34da <main+0x3c2>
    346e:	9d 36       	cpi	r25, 0x6D	; 109

				/* Increment the address */
				CurrAddress += 2;
    3470:	59 f4       	brne	.+22     	; 0x3488 <main+0x370>
    3472:	e0 91 8d 01 	lds	r30, 0x018D
    3476:	f0 91 8e 01 	lds	r31, 0x018E
    347a:	90 92 57 00 	sts	0x0057, r9
    347e:	e8 95       	spm
    3480:	07 b6       	in	r0, 0x37	; 55
    3482:	00 fc       	sbrc	r0, 0
    3484:	fd cf       	rjmp	.-6      	; 0x3480 <main+0x368>
    3486:	29 c0       	rjmp	.+82     	; 0x34da <main+0x3c2>
    3488:	92 35       	cpi	r25, 0x52	; 82
    348a:	39 f1       	breq	.+78     	; 0x34da <main+0x3c2>

				/* Send confirmation byte back to the host */
				WriteNextResponseByte('\r');
			}
			else if (Command == AVR109_COMMAND_WriteFlashPage)
    348c:	94 34       	cpi	r25, 0x44	; 68
    348e:	81 f4       	brne	.+32     	; 0x34b0 <main+0x398>
			{
				/* Commit the flash page to memory */
				boot_page_write(CurrAddress);
    3490:	29 de       	rcall	.-942    	; 0x30e4 <FetchNextCommandByte>
    3492:	68 2f       	mov	r22, r24
    3494:	80 91 8d 01 	lds	r24, 0x018D
    3498:	90 91 8e 01 	lds	r25, 0x018E
    349c:	a0 91 8f 01 	lds	r26, 0x018F

				/* Wait until write operation has completed */
				boot_spm_busy_wait();
    34a0:	b0 91 90 01 	lds	r27, 0x0190
    34a4:	b6 95       	lsr	r27

				/* Send confirmation byte back to the host */
				WriteNextResponseByte('\r');
			}
			else if (Command == AVR109_COMMAND_ReadFLASHWord)
    34a6:	a7 95       	ror	r26
    34a8:	97 95       	ror	r25
				WriteNextResponseByte(ProgramWord >> 8);
				WriteNextResponseByte(ProgramWord & 0xFF);
			}
#endif
#if !defined(NO_EEPROM_BYTE_SUPPORT)
			else if (Command == AVR109_COMMAND_WriteEEPROM)
    34aa:	87 95       	ror	r24
    34ac:	e1 d4       	rcall	.+2498   	; 0x3e70 <__eewr_byte_m16u2>
			{
				/* Read the byte from the endpoint and write it to the EEPROM */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    34ae:	02 c0       	rjmp	.+4      	; 0x34b4 <main+0x39c>
    34b0:	94 36       	cpi	r25, 0x64	; 100
    34b2:	99 f4       	brne	.+38     	; 0x34da <main+0x3c2>
    34b4:	80 91 8d 01 	lds	r24, 0x018D
    34b8:	90 91 8e 01 	lds	r25, 0x018E
    34bc:	a0 91 8f 01 	lds	r26, 0x018F
    34c0:	b0 91 90 01 	lds	r27, 0x0190
    34c4:	02 96       	adiw	r24, 0x02	; 2
    34c6:	a1 1d       	adc	r26, r1
    34c8:	b1 1d       	adc	r27, r1
    34ca:	80 93 8d 01 	sts	0x018D, r24
    34ce:	90 93 8e 01 	sts	0x018E, r25
				CurrAddress += 2;

				/* Send confirmation byte back to the host */
				WriteNextResponseByte('\r');
			}
			else if (Command == AVR109_COMMAND_ReadEEPROM)
    34d2:	a0 93 8f 01 	sts	0x018F, r26
			{
				/* Read the EEPROM byte and write it to the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));

				/* Increment the address after use */
				CurrAddress += 2;
    34d6:	b0 93 90 01 	sts	0x0190, r27
    34da:	b0 92 e9 00 	sts	0x00E9, r11
    34de:	90 91 e8 00 	lds	r25, 0x00E8
    34e2:	80 91 e8 00 	lds	r24, 0x00E8
    34e6:	8e 77       	andi	r24, 0x7E	; 126
    34e8:	80 93 e8 00 	sts	0x00E8, r24
    34ec:	95 fd       	sbrc	r25, 5
    34ee:	11 c0       	rjmp	.+34     	; 0x3512 <main+0x3fa>
    34f0:	80 91 e8 00 	lds	r24, 0x00E8
    34f4:	80 fd       	sbrc	r24, 0
    34f6:	04 c0       	rjmp	.+8      	; 0x3500 <main+0x3e8>
    34f8:	8e b3       	in	r24, 0x1e	; 30
    34fa:	81 11       	cpse	r24, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    34fc:	f9 cf       	rjmp	.-14     	; 0x34f0 <main+0x3d8>
    34fe:	42 c0       	rjmp	.+132    	; 0x3584 <main+0x46c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3500:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3504:	8e 77       	andi	r24, 0x7E	; 126
    3506:	80 93 e8 00 	sts	0x00E8, r24
    350a:	03 c0       	rjmp	.+6      	; 0x3512 <main+0x3fa>
    350c:	8e b3       	in	r24, 0x1e	; 30

			/* Send the endpoint data to the host */
			Endpoint_ClearIN();

			/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
			if (IsEndpointFull)
    350e:	88 23       	and	r24, r24
    3510:	c9 f1       	breq	.+114    	; 0x3584 <main+0x46c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3512:	80 91 e8 00 	lds	r24, 0x00E8
			{
				while (!(Endpoint_IsINReady()))
    3516:	80 ff       	sbrs	r24, 0
    3518:	f9 cf       	rjmp	.-14     	; 0x350c <main+0x3f4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    351a:	24 e0       	ldi	r18, 0x04	; 4
    351c:	20 93 e9 00 	sts	0x00E9, r18
    3520:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3524:	8b 77       	andi	r24, 0x7B	; 123
    3526:	80 93 e8 00 	sts	0x00E8, r24
    352a:	80 91 8c 01 	lds	r24, 0x018C
			}

			/* Wait until the data has been sent to the host */
			while (!(Endpoint_IsINReady()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
    352e:	81 11       	cpse	r24, r1
    3530:	29 c0       	rjmp	.+82     	; 0x3584 <main+0x46c>
    3532:	b0 92 e9 00 	sts	0x00E9, r11
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3536:	80 91 e8 00 	lds	r24, 0x00E8

				Endpoint_ClearIN();
			}

			/* Wait until the data has been sent to the host */
			while (!(Endpoint_IsINReady()))
    353a:	80 fd       	sbrc	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    353c:	1a c0       	rjmp	.+52     	; 0x3572 <main+0x45a>
    353e:	22 c0       	rjmp	.+68     	; 0x3584 <main+0x46c>
    3540:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3544:	85 ff       	sbrs	r24, 5
    3546:	19 c0       	rjmp	.+50     	; 0x357a <main+0x462>
    3548:	80 91 91 01 	lds	r24, 0x0191

			/* Acknowledge the command from the host */
			Endpoint_ClearOUT();
		}
	}
	if (!CDCActive){
    354c:	e8 2f       	mov	r30, r24
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	ee 56       	subi	r30, 0x6E	; 110
    3552:	fe 4f       	sbci	r31, 0xFE	; 254
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3554:	90 81       	ld	r25, Z
    3556:	8f 5f       	subi	r24, 0xFF	; 255
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3558:	90 93 f1 00 	sts	0x00F1, r25
	// Select the Serial Tx Endpoint
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);

	// check if endpoint is ready for new data, last sending flushed without errors
	if (Endpoint_IsINReady()){
    355c:	8f 73       	andi	r24, 0x3F	; 63
    355e:	80 93 91 01 	sts	0x0191, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3562:	9f b7       	in	r25, 0x3f	; 63
    3564:	f8 94       	cli

		// Read bytes from the USART receive buffer into the USB IN endpoint, max 1 bank size
		while (BufferCount){
			//TODO check later after interrupt (what if bootloader leaves bank full?)
			// check if bank is full and try to send
			if (!(Endpoint_IsReadWriteAllowed()))
    3566:	80 91 d2 01 	lds	r24, 0x01D2
				break;

			// Write the Data to the Endpoint */
			Endpoint_Write_8(USARTtoUSB_Buffer_Data[BufferIndex++]);
    356a:	81 50       	subi	r24, 0x01	; 1
    356c:	80 93 d2 01 	sts	0x01D2, r24
    3570:	9f bf       	out	0x3f, r25	; 63
    3572:	80 91 d2 01 	lds	r24, 0x01D2
    3576:	81 11       	cpse	r24, r1
    3578:	e3 cf       	rjmp	.-58     	; 0x3540 <main+0x428>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    357a:	80 91 e8 00 	lds	r24, 0x00E8

			// increase the buffer position and wrap around if needed
			BufferIndex %= BUFFER_SIZE;
    357e:	8e 77       	andi	r24, 0x7E	; 126
    3580:	80 93 e8 00 	sts	0x00E8, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3584:	38 d4       	rcall	.+2160   	; 0x3df6 <USB_USBTask>
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3586:	80 91 00 01 	lds	r24, 0x0100
			// turn off interrupts to save the value properly
			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			// decrease buffer count
			BufferCount--;
    358a:	81 11       	cpse	r24, r1
    358c:	fa cd       	rjmp	.-1036   	; 0x3182 <main+0x6a>
    358e:	80 91 e0 00 	lds	r24, 0x00E0
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3592:	81 60       	ori	r24, 0x01	; 1

	// check if endpoint is ready for new data, last sending flushed without errors
	if (Endpoint_IsINReady()){

		// Read bytes from the USART receive buffer into the USB IN endpoint, max 1 bank size
		while (BufferCount){
    3594:	80 93 e0 00 	sts	0x00E0, r24
    3598:	82 e4       	ldi	r24, 0x42	; 66
    359a:	9c ed       	ldi	r25, 0xDC	; 220
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    359c:	90 93 df 01 	sts	0x01DF, r25
    35a0:	80 93 de 01 	sts	0x01DE, r24
    35a4:	2c e0       	ldi	r18, 0x0C	; 12

		CDC_Task();
		//if (!CDCActive)
		//	USBSerialBridge_Task();

		USB_USBTask();
    35a6:	88 e1       	ldi	r24, 0x18	; 24
    35a8:	90 e0       	ldi	r25, 0x00	; 0
	SetupHardware();

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	while (RunBootloader)
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	a8 95       	wdr
    35b0:	80 93 60 00 	sts	0x0060, r24
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	20 93 60 00 	sts	0x0060, r18
    35ba:	ff cf       	rjmp	.-2      	; 0x35ba <main+0x4a2>

000035bc <EVENT_USB_Device_ConfigurationChanged>:

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
    35bc:	42 e0       	ldi	r20, 0x02	; 2
    35be:	61 ec       	ldi	r22, 0xC1	; 193
    35c0:	82 e0       	ldi	r24, 0x02	; 2
    35c2:	fe d1       	rcall	.+1020   	; 0x39c0 <Endpoint_ConfigureEndpoint_Prv>
    35c4:	46 e1       	ldi	r20, 0x16	; 22
    35c6:	61 e8       	ldi	r22, 0x81	; 129

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
    35c8:	83 e0       	ldi	r24, 0x03	; 3
    35ca:	fa d1       	rcall	.+1012   	; 0x39c0 <Endpoint_ConfigureEndpoint_Prv>
    35cc:	42 e1       	ldi	r20, 0x12	; 18
    35ce:	60 e8       	ldi	r22, 0x80	; 128
    35d0:	84 e0       	ldi	r24, 0x04	; 4
    35d2:	f6 c1       	rjmp	.+1004   	; 0x39c0 <Endpoint_ConfigureEndpoint_Prv>

000035d4 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    35d4:	cf 93       	push	r28
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    35d6:	80 91 d6 01 	lds	r24, 0x01D6
    35da:	98 2f       	mov	r25, r24
    35dc:	9f 77       	andi	r25, 0x7F	; 127
    35de:	91 32       	cpi	r25, 0x21	; 33
    35e0:	09 f0       	breq	.+2      	; 0x35e4 <EVENT_USB_Device_ControlRequest+0x10>
    35e2:	96 c0       	rjmp	.+300    	; 0x3710 <EVENT_USB_Device_ControlRequest+0x13c>
	{
		return;
	}

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    35e4:	90 91 d7 01 	lds	r25, 0x01D7
    35e8:	91 32       	cpi	r25, 0x21	; 33
    35ea:	39 f0       	breq	.+14     	; 0x35fa <EVENT_USB_Device_ControlRequest+0x26>
    35ec:	92 32       	cpi	r25, 0x22	; 34
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <EVENT_USB_Device_ControlRequest+0x1e>
    35f0:	7c c0       	rjmp	.+248    	; 0x36ea <EVENT_USB_Device_ControlRequest+0x116>
    35f2:	90 32       	cpi	r25, 0x20	; 32
    35f4:	09 f0       	breq	.+2      	; 0x35f8 <EVENT_USB_Device_ControlRequest+0x24>
    35f6:	8c c0       	rjmp	.+280    	; 0x3710 <EVENT_USB_Device_ControlRequest+0x13c>
    35f8:	13 c0       	rjmp	.+38     	; 0x3620 <EVENT_USB_Device_ControlRequest+0x4c>
	{
	case CDC_REQ_GetLineEncoding:
		if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    35fa:	81 3a       	cpi	r24, 0xA1	; 161
    35fc:	09 f0       	breq	.+2      	; 0x3600 <EVENT_USB_Device_ControlRequest+0x2c>
    35fe:	88 c0       	rjmp	.+272    	; 0x3710 <EVENT_USB_Device_ControlRequest+0x13c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3600:	80 91 e8 00 	lds	r24, 0x00E8
    3604:	87 7f       	andi	r24, 0xF7	; 247
    3606:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearSETUP();

			/* Write the line coding data to the control endpoint */
			Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    360a:	67 e0       	ldi	r22, 0x07	; 7
    360c:	70 e0       	ldi	r23, 0x00	; 0
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	91 e0       	ldi	r25, 0x01	; 1
    3612:	36 d1       	rcall	.+620    	; 0x3880 <Endpoint_Write_Control_Stream_LE>
    3614:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3618:	8b 77       	andi	r24, 0x7B	; 123
    361a:	80 93 e8 00 	sts	0x00E8, r24
    361e:	78 c0       	rjmp	.+240    	; 0x3710 <EVENT_USB_Device_ControlRequest+0x13c>
    3620:	81 32       	cpi	r24, 0x21	; 33
			Endpoint_ClearOUT();
		}

		break;
	case CDC_REQ_SetLineEncoding:
		if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3622:	09 f0       	breq	.+2      	; 0x3626 <EVENT_USB_Device_ControlRequest+0x52>
    3624:	75 c0       	rjmp	.+234    	; 0x3710 <EVENT_USB_Device_ControlRequest+0x13c>
    3626:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    362a:	87 7f       	andi	r24, 0xF7	; 247
    362c:	80 93 e8 00 	sts	0x00E8, r24
    3630:	67 e0       	ldi	r22, 0x07	; 7
		{
			Endpoint_ClearSETUP();

			/* Read the line coding data in from the host into the global struct */
			Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    3632:	70 e0       	ldi	r23, 0x00	; 0
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	91 e0       	ldi	r25, 0x01	; 1
    3638:	85 d1       	rcall	.+778    	; 0x3944 <Endpoint_Read_Control_Stream_LE>
    363a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    363e:	8e 77       	andi	r24, 0x7E	; 126
    3640:	80 93 e8 00 	sts	0x00E8, r24
    3644:	20 91 01 01 	lds	r18, 0x0101
			Endpoint_ClearIN();

			if (LineEncoding.BaudRateBPS == BAUDRATE_CDC_BOOTLOADER)
    3648:	30 91 02 01 	lds	r19, 0x0102
    364c:	40 91 03 01 	lds	r20, 0x0103
    3650:	50 91 04 01 	lds	r21, 0x0104
    3654:	20 3b       	cpi	r18, 0xB0	; 176
    3656:	84 e0       	ldi	r24, 0x04	; 4
    3658:	38 07       	cpc	r19, r24
    365a:	41 05       	cpc	r20, r1
    365c:	51 05       	cpc	r21, r1
    365e:	21 f4       	brne	.+8      	; 0x3668 <EVENT_USB_Device_ControlRequest+0x94>
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	80 93 8c 01 	sts	0x018C, r24
				CDCActive = true;
    3666:	02 c0       	rjmp	.+4      	; 0x366c <EVENT_USB_Device_ControlRequest+0x98>
    3668:	10 92 8c 01 	sts	0x018C, r1
			else
				CDCActive = false;
    366c:	e0 91 06 01 	lds	r30, 0x0106
    3670:	e1 50       	subi	r30, 0x01	; 1
    3672:	e2 30       	cpi	r30, 0x02	; 2
    3674:	28 f4       	brcc	.+10     	; 0x3680 <EVENT_USB_Device_ControlRequest+0xac>
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	e8 5f       	subi	r30, 0xF8	; 248
    367a:	fe 4f       	sbci	r31, 0xFE	; 254
    367c:	c0 81       	ld	r28, Z
    367e:	01 c0       	rjmp	.+2      	; 0x3682 <EVENT_USB_Device_ControlRequest+0xae>
    3680:	c0 e0       	ldi	r28, 0x00	; 0
    3682:	80 91 05 01 	lds	r24, 0x0105
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
		break;
	}

	if (LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
    3686:	82 30       	cpi	r24, 0x02	; 2
    3688:	09 f4       	brne	.+2      	; 0x368c <EVENT_USB_Device_ControlRequest+0xb8>
    368a:	c8 60       	ori	r28, 0x08	; 8
    368c:	80 91 07 01 	lds	r24, 0x0107
		ConfigMask |= (1 << USBS1);

	switch (LineEncoding.DataBits)
    3690:	87 30       	cpi	r24, 0x07	; 7
    3692:	31 f0       	breq	.+12     	; 0x36a0 <EVENT_USB_Device_ControlRequest+0xcc>
    3694:	88 30       	cpi	r24, 0x08	; 8
    3696:	31 f0       	breq	.+12     	; 0x36a4 <EVENT_USB_Device_ControlRequest+0xd0>
    3698:	86 30       	cpi	r24, 0x06	; 6
    369a:	29 f4       	brne	.+10     	; 0x36a6 <EVENT_USB_Device_ControlRequest+0xd2>
    369c:	c2 60       	ori	r28, 0x02	; 2
    369e:	03 c0       	rjmp	.+6      	; 0x36a6 <EVENT_USB_Device_ControlRequest+0xd2>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
    36a0:	c4 60       	ori	r28, 0x04	; 4
    36a2:	01 c0       	rjmp	.+2      	; 0x36a6 <EVENT_USB_Device_ControlRequest+0xd2>
		break;
	case 7:
		ConfigMask |= (1 << UCSZ11);
    36a4:	c6 60       	ori	r28, 0x06	; 6
    36a6:	5b 9a       	sbi	0x0b, 3	; 11
		break;
	case 8:
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    36a8:	10 92 c9 00 	sts	0x00C9, r1

	/* Keep the TX line held high (idle) while the USART is reconfigured */
	PORTD |= (1 << 3);

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
    36ac:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1A = 0;
    36b0:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C = 0;
    36b4:	ca 01       	movw	r24, r20
    36b6:	b9 01       	movw	r22, r18

	/* Set the new baud rate before configuring the USART */
	UBRR1 = SERIAL_2X_UBBRVAL(LineEncoding.BaudRateBPS);
    36b8:	96 95       	lsr	r25
    36ba:	87 95       	ror	r24
    36bc:	77 95       	ror	r23
    36be:	67 95       	ror	r22
    36c0:	60 58       	subi	r22, 0x80	; 128
    36c2:	7b 47       	sbci	r23, 0x7B	; 123
    36c4:	81 4e       	sbci	r24, 0xE1	; 225
    36c6:	9f 4f       	sbci	r25, 0xFF	; 255
    36c8:	b1 d3       	rcall	.+1890   	; 0x3e2c <__udivmodsi4>
    36ca:	21 50       	subi	r18, 0x01	; 1
    36cc:	31 09       	sbc	r19, r1
    36ce:	30 93 cd 00 	sts	0x00CD, r19
    36d2:	20 93 cc 00 	sts	0x00CC, r18
    36d6:	c0 93 ca 00 	sts	0x00CA, r28
    36da:	82 e0       	ldi	r24, 0x02	; 2
	//UBRR1 = (LineEncoding.BaudRateBPS == 57600)
	//	? SERIAL_UBBRVAL(LineEncoding.BaudRateBPS)
	//	: SERIAL_2X_UBBRVAL(LineEncoding.BaudRateBPS);

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
    36dc:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1A = (1 << U2X1);
    36e0:	88 e9       	ldi	r24, 0x98	; 152
    36e2:	80 93 c9 00 	sts	0x00C9, r24
	//UCSR1A = (LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
    36e6:	5b 98       	cbi	0x0b, 3	; 11
    36e8:	13 c0       	rjmp	.+38     	; 0x3710 <EVENT_USB_Device_ControlRequest+0x13c>
    36ea:	81 32       	cpi	r24, 0x21	; 33

	/* Release the TX line after the USART has been reconfigured */
	PORTD &= ~(1 << 3);
    36ec:	89 f4       	brne	.+34     	; 0x3710 <EVENT_USB_Device_ControlRequest+0x13c>
    36ee:	80 91 e8 00 	lds	r24, 0x00E8
			
		}

		break;
	case CDC_REQ_SetControlLineState:
		if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    36f2:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    36f4:	80 93 e8 00 	sts	0x00E8, r24
    36f8:	77 d1       	rcall	.+750    	; 0x39e8 <Endpoint_ClearStatusStage>
    36fa:	80 91 8c 01 	lds	r24, 0x018C
		{
			Endpoint_ClearSETUP();
			Endpoint_ClearStatusStage();
    36fe:	81 11       	cpse	r24, r1
    3700:	06 c0       	rjmp	.+12     	; 0x370e <EVENT_USB_Device_ControlRequest+0x13a>

			// check DTR state and reset the MCU
			if (!CDCActive && (USB_ControlRequest.wValue & CDC_CONTROL_LINE_OUT_DTR))
    3702:	80 91 d8 01 	lds	r24, 0x01D8
    3706:	80 ff       	sbrs	r24, 0
    3708:	02 c0       	rjmp	.+4      	; 0x370e <EVENT_USB_Device_ControlRequest+0x13a>
    370a:	5f 98       	cbi	0x0b, 7	; 11
    370c:	01 c0       	rjmp	.+2      	; 0x3710 <EVENT_USB_Device_ControlRequest+0x13c>
    370e:	5f 9a       	sbi	0x0b, 7	; 11
    3710:	cf 91       	pop	r28
				AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    3712:	08 95       	ret

00003714 <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
*  for later transmission to the host.
*/
ISR(USART1_RX_vect, ISR_BLOCK)
{
    3714:	1f 92       	push	r1

			// check DTR state and reset the MCU
			if (!CDCActive && (USB_ControlRequest.wValue & CDC_CONTROL_LINE_OUT_DTR))
				AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
			else
				AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    3716:	0f 92       	push	r0
		}

		break;
	}
}
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	0f 92       	push	r0
    371c:	11 24       	eor	r1, r1
    371e:	2f 93       	push	r18
    3720:	8f 93       	push	r24
    3722:	9f 93       	push	r25
    3724:	ef 93       	push	r30
    3726:	ff 93       	push	r31
*  for later transmission to the host.
*/
ISR(USART1_RX_vect, ISR_BLOCK)
{
	// read the newest byte from the UART, important to clear interrupt flag!
	uint8_t ReceivedByte = UDR1;
    3728:	20 91 ce 00 	lds	r18, 0x00CE

	// only save the new byte if USB device is ready and buffer is not full
	if (!CDCActive && (USB_DeviceState == DEVICE_STATE_Configured) && BufferCount <= BUFFER_SIZE){
    372c:	80 91 8c 01 	lds	r24, 0x018C
    3730:	81 11       	cpse	r24, r1
    3732:	15 c0       	rjmp	.+42     	; 0x375e <__vector_23+0x4a>
    3734:	8e b3       	in	r24, 0x1e	; 30
    3736:	84 30       	cpi	r24, 0x04	; 4
    3738:	91 f4       	brne	.+36     	; 0x375e <__vector_23+0x4a>
    373a:	90 91 d2 01 	lds	r25, 0x01D2
    373e:	91 34       	cpi	r25, 0x41	; 65
    3740:	70 f4       	brcc	.+28     	; 0x375e <__vector_23+0x4a>
		// save new byte
		USARTtoUSB_Buffer_Data[BufferEnd++] = ReceivedByte;
    3742:	80 91 d3 01 	lds	r24, 0x01D3
    3746:	e8 2f       	mov	r30, r24
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	ee 56       	subi	r30, 0x6E	; 110
    374c:	fe 4f       	sbci	r31, 0xFE	; 254
    374e:	20 83       	st	Z, r18
    3750:	8f 5f       	subi	r24, 0xFF	; 255

		// increase the buffer position and wrap around if needed
		BufferEnd %= BUFFER_SIZE;
    3752:	8f 73       	andi	r24, 0x3F	; 63
    3754:	80 93 d3 01 	sts	0x01D3, r24

		// increase buffer count
		BufferCount++;
    3758:	9f 5f       	subi	r25, 0xFF	; 255
    375a:	90 93 d2 01 	sts	0x01D2, r25
	}
}
    375e:	ff 91       	pop	r31
    3760:	ef 91       	pop	r30
    3762:	9f 91       	pop	r25
    3764:	8f 91       	pop	r24
    3766:	2f 91       	pop	r18
    3768:	0f 90       	pop	r0
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	0f 90       	pop	r0
    376e:	1f 90       	pop	r1
    3770:	18 95       	reti

00003772 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    3772:	29 2f       	mov	r18, r25
    3774:	30 e0       	ldi	r19, 0x00	; 0
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
    3776:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    3778:	22 30       	cpi	r18, 0x02	; 2
    377a:	31 05       	cpc	r19, r1
    377c:	39 f0       	breq	.+14     	; 0x378c <CALLBACK_USB_GetDescriptor+0x1a>
    377e:	23 30       	cpi	r18, 0x03	; 3
    3780:	31 05       	cpc	r19, r1
    3782:	49 f0       	breq	.+18     	; 0x3796 <CALLBACK_USB_GetDescriptor+0x24>
    3784:	21 30       	cpi	r18, 0x01	; 1
    3786:	31 05       	cpc	r19, r1
    3788:	89 f0       	breq	.+34     	; 0x37ac <CALLBACK_USB_GetDescriptor+0x3a>
    378a:	0b c0       	rjmp	.+22     	; 0x37a2 <CALLBACK_USB_GetDescriptor+0x30>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    378c:	2e e3       	ldi	r18, 0x3E	; 62
    378e:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    3790:	8c e3       	ldi	r24, 0x3C	; 60
    3792:	91 e0       	ldi	r25, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    3794:	1e c0       	rjmp	.+60     	; 0x37d2 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
    3796:	88 23       	and	r24, r24
    3798:	71 f0       	breq	.+28     	; 0x37b6 <CALLBACK_USB_GetDescriptor+0x44>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
    379a:	81 30       	cpi	r24, 0x01	; 1
    379c:	89 f0       	breq	.+34     	; 0x37c0 <CALLBACK_USB_GetDescriptor+0x4e>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
    379e:	82 30       	cpi	r24, 0x02	; 2
    37a0:	a1 f0       	breq	.+40     	; 0x37ca <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	13 c0       	rjmp	.+38     	; 0x37d2 <CALLBACK_USB_GetDescriptor+0x60>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    37ac:	22 e1       	ldi	r18, 0x12	; 18
    37ae:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    37b0:	8a e7       	ldi	r24, 0x7A	; 122
    37b2:	91 e0       	ldi	r25, 0x01	; 1
    37b4:	0e c0       	rjmp	.+28     	; 0x37d2 <CALLBACK_USB_GetDescriptor+0x60>
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    37b6:	24 e0       	ldi	r18, 0x04	; 4
    37b8:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
    37ba:	88 e3       	ldi	r24, 0x38	; 56
    37bc:	91 e0       	ldi	r25, 0x01	; 1
    37be:	09 c0       	rjmp	.+18     	; 0x37d2 <CALLBACK_USB_GetDescriptor+0x60>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
    37c0:	22 e1       	ldi	r18, 0x12	; 18
    37c2:	30 e0       	ldi	r19, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
    37c4:	84 e2       	ldi	r24, 0x24	; 36
    37c6:	91 e0       	ldi	r25, 0x01	; 1
    37c8:	04 c0       	rjmp	.+8      	; 0x37d2 <CALLBACK_USB_GetDescriptor+0x60>
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    37ca:	28 e1       	ldi	r18, 0x18	; 24
    37cc:	30 e0       	ldi	r19, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
    37ce:	8a e0       	ldi	r24, 0x0A	; 10
    37d0:	91 e0       	ldi	r25, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    37d2:	fa 01       	movw	r30, r20
    37d4:	91 83       	std	Z+1, r25	; 0x01
    37d6:	80 83       	st	Z, r24
	return Size;
}
    37d8:	c9 01       	movw	r24, r18
    37da:	08 95       	ret

000037dc <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
    37dc:	07 b6       	in	r0, 0x37	; 55
    37de:	00 fc       	sbrc	r0, 0
    37e0:	fd cf       	rjmp	.-6      	; 0x37dc <BootloaderAPI_ErasePage>
    37e2:	f9 99       	sbic	0x1f, 1	; 31
    37e4:	fe cf       	rjmp	.-4      	; 0x37e2 <BootloaderAPI_ErasePage+0x6>
    37e6:	23 e0       	ldi	r18, 0x03	; 3
    37e8:	fb 01       	movw	r30, r22
    37ea:	20 93 57 00 	sts	0x0057, r18
    37ee:	e8 95       	spm
	boot_spm_busy_wait();
    37f0:	07 b6       	in	r0, 0x37	; 55
    37f2:	00 fc       	sbrc	r0, 0
    37f4:	fd cf       	rjmp	.-6      	; 0x37f0 <BootloaderAPI_ErasePage+0x14>
	boot_rww_enable();
    37f6:	81 e1       	ldi	r24, 0x11	; 17
    37f8:	80 93 57 00 	sts	0x0057, r24
    37fc:	e8 95       	spm
    37fe:	08 95       	ret

00003800 <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
    3800:	07 b6       	in	r0, 0x37	; 55
    3802:	00 fc       	sbrc	r0, 0
    3804:	fd cf       	rjmp	.-6      	; 0x3800 <BootloaderAPI_WritePage>
    3806:	f9 99       	sbic	0x1f, 1	; 31
    3808:	fe cf       	rjmp	.-4      	; 0x3806 <BootloaderAPI_WritePage+0x6>
    380a:	25 e0       	ldi	r18, 0x05	; 5
    380c:	fb 01       	movw	r30, r22
    380e:	20 93 57 00 	sts	0x0057, r18
    3812:	e8 95       	spm
	boot_spm_busy_wait();
    3814:	07 b6       	in	r0, 0x37	; 55
    3816:	00 fc       	sbrc	r0, 0
    3818:	fd cf       	rjmp	.-6      	; 0x3814 <BootloaderAPI_WritePage+0x14>
	boot_rww_enable();
    381a:	81 e1       	ldi	r24, 0x11	; 17
    381c:	80 93 57 00 	sts	0x0057, r24
    3820:	e8 95       	spm
    3822:	08 95       	ret

00003824 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
    3824:	07 b6       	in	r0, 0x37	; 55
    3826:	00 fc       	sbrc	r0, 0
    3828:	fd cf       	rjmp	.-6      	; 0x3824 <BootloaderAPI_FillWord>
    382a:	f9 99       	sbic	0x1f, 1	; 31
    382c:	fe cf       	rjmp	.-4      	; 0x382a <BootloaderAPI_FillWord+0x6>
    382e:	21 e0       	ldi	r18, 0x01	; 1
    3830:	fb 01       	movw	r30, r22
    3832:	0a 01       	movw	r0, r20
    3834:	20 93 57 00 	sts	0x0057, r18
    3838:	e8 95       	spm
    383a:	11 24       	eor	r1, r1
    383c:	08 95       	ret

0000383e <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
    383e:	21 e2       	ldi	r18, 0x21	; 33
    3840:	fc 01       	movw	r30, r24
    3842:	20 93 57 00 	sts	0x0057, r18
    3846:	84 91       	lpm	r24, Z+
}
    3848:	08 95       	ret

0000384a <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
    384a:	29 e0       	ldi	r18, 0x09	; 9
    384c:	fc 01       	movw	r30, r24
    384e:	20 93 57 00 	sts	0x0057, r18
    3852:	84 91       	lpm	r24, Z+
}
    3854:	08 95       	ret

00003856 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
    3856:	e1 e0       	ldi	r30, 0x01	; 1
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	89 e0       	ldi	r24, 0x09	; 9
    385c:	80 93 57 00 	sts	0x0057, r24
    3860:	84 91       	lpm	r24, Z+
}
    3862:	08 95       	ret

00003864 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
    3864:	07 b6       	in	r0, 0x37	; 55
    3866:	00 fc       	sbrc	r0, 0
    3868:	fd cf       	rjmp	.-6      	; 0x3864 <BootloaderAPI_WriteLock>
    386a:	f9 99       	sbic	0x1f, 1	; 31
    386c:	fe cf       	rjmp	.-4      	; 0x386a <BootloaderAPI_WriteLock+0x6>
    386e:	80 95       	com	r24
    3870:	99 e0       	ldi	r25, 0x09	; 9
    3872:	e1 e0       	ldi	r30, 0x01	; 1
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	08 2e       	mov	r0, r24
    3878:	90 93 57 00 	sts	0x0057, r25
    387c:	e8 95       	spm
    387e:	08 95       	ret

00003880 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3880:	20 91 dc 01 	lds	r18, 0x01DC
    3884:	30 91 dd 01 	lds	r19, 0x01DD
    3888:	26 17       	cp	r18, r22
    388a:	37 07       	cpc	r19, r23
    388c:	48 f0       	brcs	.+18     	; 0x38a0 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    388e:	61 15       	cp	r22, r1
    3890:	71 05       	cpc	r23, r1
    3892:	39 f4       	brne	.+14     	; 0x38a2 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3894:	20 91 e8 00 	lds	r18, 0x00E8
    3898:	2e 77       	andi	r18, 0x7E	; 126
    389a:	20 93 e8 00 	sts	0x00E8, r18
    389e:	01 c0       	rjmp	.+2      	; 0x38a2 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    38a0:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    38a2:	9c 01       	movw	r18, r24
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	33 c0       	rjmp	.+102    	; 0x390e <Endpoint_Write_Control_Stream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    38a8:	9e b3       	in	r25, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    38aa:	99 23       	and	r25, r25
    38ac:	09 f4       	brne	.+2      	; 0x38b0 <Endpoint_Write_Control_Stream_LE+0x30>
    38ae:	44 c0       	rjmp	.+136    	; 0x3938 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    38b0:	95 30       	cpi	r25, 0x05	; 5
    38b2:	09 f4       	brne	.+2      	; 0x38b6 <Endpoint_Write_Control_Stream_LE+0x36>
    38b4:	43 c0       	rjmp	.+134    	; 0x393c <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    38b6:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    38ba:	93 fd       	sbrc	r25, 3
    38bc:	41 c0       	rjmp	.+130    	; 0x3940 <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    38be:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    38c2:	92 fd       	sbrc	r25, 2
    38c4:	33 c0       	rjmp	.+102    	; 0x392c <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    38c6:	90 91 e8 00 	lds	r25, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    38ca:	90 ff       	sbrs	r25, 0
    38cc:	20 c0       	rjmp	.+64     	; 0x390e <Endpoint_Write_Control_Stream_LE+0x8e>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    38ce:	80 91 f2 00 	lds	r24, 0x00F2
    38d2:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    38d4:	f9 01       	movw	r30, r18
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    38d6:	82 1b       	sub	r24, r18
    38d8:	93 0b       	sbc	r25, r19

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    38da:	05 c0       	rjmp	.+10     	; 0x38e6 <Endpoint_Write_Control_Stream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    38dc:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    38de:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    38e2:	61 50       	subi	r22, 0x01	; 1
    38e4:	71 09       	sbc	r23, r1
  this software.
*/

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
    38e6:	9f 01       	movw	r18, r30
    38e8:	28 0f       	add	r18, r24
    38ea:	39 1f       	adc	r19, r25

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    38ec:	61 15       	cp	r22, r1
    38ee:	71 05       	cpc	r23, r1
    38f0:	19 f0       	breq	.+6      	; 0x38f8 <Endpoint_Write_Control_Stream_LE+0x78>
    38f2:	28 30       	cpi	r18, 0x08	; 8
    38f4:	31 05       	cpc	r19, r1
    38f6:	90 f3       	brcs	.-28     	; 0x38dc <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	28 30       	cpi	r18, 0x08	; 8
    38fc:	31 05       	cpc	r19, r1
    38fe:	09 f0       	breq	.+2      	; 0x3902 <Endpoint_Write_Control_Stream_LE+0x82>
    3900:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3902:	90 91 e8 00 	lds	r25, 0x00E8
    3906:	9e 77       	andi	r25, 0x7E	; 126
    3908:	90 93 e8 00 	sts	0x00E8, r25
    390c:	9f 01       	movw	r18, r30
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    390e:	61 15       	cp	r22, r1
    3910:	71 05       	cpc	r23, r1
    3912:	51 f6       	brne	.-108    	; 0x38a8 <Endpoint_Write_Control_Stream_LE+0x28>
    3914:	81 11       	cpse	r24, r1
    3916:	c8 cf       	rjmp	.-112    	; 0x38a8 <Endpoint_Write_Control_Stream_LE+0x28>
    3918:	09 c0       	rjmp	.+18     	; 0x392c <Endpoint_Write_Control_Stream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    391a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    391c:	88 23       	and	r24, r24
    391e:	61 f0       	breq	.+24     	; 0x3938 <Endpoint_Write_Control_Stream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3920:	85 30       	cpi	r24, 0x05	; 5
    3922:	61 f0       	breq	.+24     	; 0x393c <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3924:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3928:	83 fd       	sbrc	r24, 3
    392a:	0a c0       	rjmp	.+20     	; 0x3940 <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    392c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3930:	82 ff       	sbrs	r24, 2
    3932:	f3 cf       	rjmp	.-26     	; 0x391a <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3938:	82 e0       	ldi	r24, 0x02	; 2
    393a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    393c:	83 e0       	ldi	r24, 0x03	; 3
    393e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3940:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3942:	08 95       	ret

00003944 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    3944:	61 15       	cp	r22, r1
    3946:	71 05       	cpc	r23, r1
    3948:	29 f4       	brne	.+10     	; 0x3954 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    394a:	20 91 e8 00 	lds	r18, 0x00E8
    394e:	2b 77       	andi	r18, 0x7B	; 123
    3950:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    3954:	9c 01       	movw	r18, r24
    3956:	20 c0       	rjmp	.+64     	; 0x3998 <Endpoint_Read_Control_Stream_LE+0x54>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3958:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    395a:	88 23       	and	r24, r24
    395c:	79 f1       	breq	.+94     	; 0x39bc <Endpoint_Read_Control_Stream_LE+0x78>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    395e:	85 30       	cpi	r24, 0x05	; 5
    3960:	39 f1       	breq	.+78     	; 0x39b0 <Endpoint_Read_Control_Stream_LE+0x6c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3962:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3966:	83 fd       	sbrc	r24, 3
    3968:	25 c0       	rjmp	.+74     	; 0x39b4 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    396a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    396e:	82 ff       	sbrs	r24, 2
    3970:	f3 cf       	rjmp	.-26     	; 0x3958 <Endpoint_Read_Control_Stream_LE+0x14>
    3972:	f9 01       	movw	r30, r18
    3974:	07 c0       	rjmp	.+14     	; 0x3984 <Endpoint_Read_Control_Stream_LE+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3976:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    397a:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    397c:	9f 01       	movw	r18, r30
				Length--;
    397e:	61 50       	subi	r22, 0x01	; 1
    3980:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    3982:	29 f0       	breq	.+10     	; 0x398e <Endpoint_Read_Control_Stream_LE+0x4a>
    3984:	9f 01       	movw	r18, r30
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    3986:	80 91 f2 00 	lds	r24, 0x00F2
    398a:	81 11       	cpse	r24, r1
    398c:	f4 cf       	rjmp	.-24     	; 0x3976 <Endpoint_Read_Control_Stream_LE+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    398e:	80 91 e8 00 	lds	r24, 0x00E8
    3992:	8b 77       	andi	r24, 0x7B	; 123
    3994:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    3998:	61 15       	cp	r22, r1
    399a:	71 05       	cpc	r23, r1
    399c:	e9 f6       	brne	.-70     	; 0x3958 <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    399e:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    39a2:	80 fd       	sbrc	r24, 0
    39a4:	09 c0       	rjmp	.+18     	; 0x39b8 <Endpoint_Read_Control_Stream_LE+0x74>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39a6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    39a8:	88 23       	and	r24, r24
    39aa:	41 f0       	breq	.+16     	; 0x39bc <Endpoint_Read_Control_Stream_LE+0x78>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39ac:	85 30       	cpi	r24, 0x05	; 5
    39ae:	b9 f7       	brne	.-18     	; 0x399e <Endpoint_Read_Control_Stream_LE+0x5a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    39b0:	83 e0       	ldi	r24, 0x03	; 3
    39b2:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    39b8:	80 e0       	ldi	r24, 0x00	; 0
    39ba:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    39bc:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    39be:	08 95       	ret

000039c0 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    39c0:	8f 70       	andi	r24, 0x0F	; 15
    39c2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    39c6:	eb ee       	ldi	r30, 0xEB	; 235
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	80 81       	ld	r24, Z
    39cc:	81 60       	ori	r24, 0x01	; 1
    39ce:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    39d0:	ed ee       	ldi	r30, 0xED	; 237
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    39d6:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    39da:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    39dc:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    39e0:	88 1f       	adc	r24, r24
    39e2:	88 27       	eor	r24, r24
    39e4:	88 1f       	adc	r24, r24
    39e6:	08 95       	ret

000039e8 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    39e8:	80 91 d6 01 	lds	r24, 0x01D6
    39ec:	87 fd       	sbrc	r24, 7
    39ee:	05 c0       	rjmp	.+10     	; 0x39fa <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    39f0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    39f4:	80 ff       	sbrs	r24, 0
    39f6:	0d c0       	rjmp	.+26     	; 0x3a12 <Endpoint_ClearStatusStage+0x2a>
    39f8:	10 c0       	rjmp	.+32     	; 0x3a1a <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    39fa:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    39fe:	82 fd       	sbrc	r24, 2
    3a00:	04 c0       	rjmp	.+8      	; 0x3a0a <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a02:	8e b3       	in	r24, 0x1e	; 30
    3a04:	81 11       	cpse	r24, r1
    3a06:	f9 cf       	rjmp	.-14     	; 0x39fa <Endpoint_ClearStatusStage+0x12>
    3a08:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3a0a:	80 91 e8 00 	lds	r24, 0x00E8
    3a0e:	8b 77       	andi	r24, 0x7B	; 123
    3a10:	07 c0       	rjmp	.+14     	; 0x3a20 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a12:	8e b3       	in	r24, 0x1e	; 30
    3a14:	81 11       	cpse	r24, r1
    3a16:	ec cf       	rjmp	.-40     	; 0x39f0 <Endpoint_ClearStatusStage+0x8>
    3a18:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3a1a:	80 91 e8 00 	lds	r24, 0x00E8
    3a1e:	8e 77       	andi	r24, 0x7E	; 126
    3a20:	80 93 e8 00 	sts	0x00E8, r24
    3a24:	08 95       	ret

00003a26 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3a26:	3c d0       	rcall	.+120    	; 0x3aa0 <USB_INT_DisableAllInterrupts>
    3a28:	3e d0       	rcall	.+124    	; 0x3aa6 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3a2a:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3a2e:	8f 77       	andi	r24, 0x7F	; 127
    3a30:	80 93 d8 00 	sts	0x00D8, r24
    3a34:	80 91 d8 00 	lds	r24, 0x00D8
				USBCON |=  (1 << USBE);
    3a38:	80 68       	ori	r24, 0x80	; 128
    3a3a:	80 93 d8 00 	sts	0x00D8, r24
    3a3e:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3a42:	8f 7d       	andi	r24, 0xDF	; 223
    3a44:	80 93 d8 00 	sts	0x00D8, r24
    3a48:	84 e0       	ldi	r24, 0x04	; 4
    3a4a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3a4c:	86 e0       	ldi	r24, 0x06	; 6
    3a4e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3a50:	09 b4       	in	r0, 0x29	; 41
    3a52:	00 fe       	sbrs	r0, 0

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3a54:	fd cf       	rjmp	.-6      	; 0x3a50 <USB_ResetInterface+0x2a>
    3a56:	1e ba       	out	0x1e, r1	; 30
    3a58:	10 92 d4 01 	sts	0x01D4, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    3a5c:	42 e0       	ldi	r20, 0x02	; 2
    3a5e:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	ae df       	rcall	.-164    	; 0x39c0 <Endpoint_ConfigureEndpoint_Prv>
    3a64:	80 91 e1 00 	lds	r24, 0x00E1
    3a68:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3a6a:	80 93 e1 00 	sts	0x00E1, r24
    3a6e:	80 91 e2 00 	lds	r24, 0x00E2
    3a72:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3a74:	80 93 e2 00 	sts	0x00E2, r24
    3a78:	80 91 e2 00 	lds	r24, 0x00E2
    3a7c:	88 60       	ori	r24, 0x08	; 8
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3a7e:	80 93 e2 00 	sts	0x00E2, r24
    3a82:	80 91 e0 00 	lds	r24, 0x00E0
    3a86:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3a88:	80 93 e0 00 	sts	0x00E0, r24
    3a8c:	08 95       	ret

00003a8e <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    3a8e:	e3 e6       	ldi	r30, 0x63	; 99
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	80 81       	ld	r24, Z
    3a94:	8e 7f       	andi	r24, 0xFE	; 254
    3a96:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	80 93 d5 01 	sts	0x01D5, r24

	USB_ResetInterface();
    3a9e:	c3 cf       	rjmp	.-122    	; 0x3a26 <USB_ResetInterface>

00003aa0 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3aa0:	10 92 e2 00 	sts	0x00E2, r1
    3aa4:	08 95       	ret

00003aa6 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3aa6:	10 92 e1 00 	sts	0x00E1, r1
    3aaa:	08 95       	ret

00003aac <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3aac:	1f 92       	push	r1
    3aae:	0f 92       	push	r0
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	0f 92       	push	r0
    3ab4:	11 24       	eor	r1, r1
    3ab6:	2f 93       	push	r18
    3ab8:	3f 93       	push	r19
    3aba:	4f 93       	push	r20
    3abc:	5f 93       	push	r21
    3abe:	6f 93       	push	r22
    3ac0:	7f 93       	push	r23
    3ac2:	8f 93       	push	r24
    3ac4:	9f 93       	push	r25
    3ac6:	af 93       	push	r26
    3ac8:	bf 93       	push	r27
    3aca:	ef 93       	push	r30
    3acc:	ff 93       	push	r31
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3ace:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3ad2:	80 ff       	sbrs	r24, 0
    3ad4:	16 c0       	rjmp	.+44     	; 0x3b02 <__vector_11+0x56>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3ad6:	80 91 e2 00 	lds	r24, 0x00E2
    3ada:	80 ff       	sbrs	r24, 0
    3adc:	12 c0       	rjmp	.+36     	; 0x3b02 <__vector_11+0x56>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3ade:	80 91 e2 00 	lds	r24, 0x00E2
    3ae2:	8e 7f       	andi	r24, 0xFE	; 254
    3ae4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3ae8:	80 91 e2 00 	lds	r24, 0x00E2
    3aec:	80 61       	ori	r24, 0x10	; 16
    3aee:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3af2:	80 91 d8 00 	lds	r24, 0x00D8
    3af6:	80 62       	ori	r24, 0x20	; 32
    3af8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3afc:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    3afe:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
    3b00:	79 d1       	rcall	.+754    	; 0x3df4 <USB_Event_Stub>
    3b02:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3b06:	84 ff       	sbrs	r24, 4
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3b08:	2e c0       	rjmp	.+92     	; 0x3b66 <__vector_11+0xba>
    3b0a:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3b0e:	84 ff       	sbrs	r24, 4
    3b10:	2a c0       	rjmp	.+84     	; 0x3b66 <__vector_11+0xba>
    3b12:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3b14:	89 bd       	out	0x29, r24	; 41
    3b16:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3b18:	89 bd       	out	0x29, r24	; 41
    3b1a:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3b1c:	00 fe       	sbrs	r0, 0
    3b1e:	fd cf       	rjmp	.-6      	; 0x3b1a <__vector_11+0x6e>
    3b20:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3b24:	8f 7d       	andi	r24, 0xDF	; 223
    3b26:	80 93 d8 00 	sts	0x00D8, r24
    3b2a:	80 91 e1 00 	lds	r24, 0x00E1
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3b2e:	8f 7e       	andi	r24, 0xEF	; 239
    3b30:	80 93 e1 00 	sts	0x00E1, r24
    3b34:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3b38:	8f 7e       	andi	r24, 0xEF	; 239
    3b3a:	80 93 e2 00 	sts	0x00E2, r24
    3b3e:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3b42:	81 60       	ori	r24, 0x01	; 1
    3b44:	80 93 e2 00 	sts	0x00E2, r24
    3b48:	80 91 d4 01 	lds	r24, 0x01D4
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3b4c:	88 23       	and	r24, r24
    3b4e:	11 f0       	breq	.+4      	; 0x3b54 <__vector_11+0xa8>
    3b50:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
    3b52:	07 c0       	rjmp	.+14     	; 0x3b62 <__vector_11+0xb6>
    3b54:	80 91 e3 00 	lds	r24, 0x00E3
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3b58:	87 ff       	sbrs	r24, 7
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3b5a:	02 c0       	rjmp	.+4      	; 0x3b60 <__vector_11+0xb4>
    3b5c:	83 e0       	ldi	r24, 0x03	; 3
    3b5e:	01 c0       	rjmp	.+2      	; 0x3b62 <__vector_11+0xb6>
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	8e bb       	out	0x1e, r24	; 30
    3b64:	47 d1       	rcall	.+654    	; 0x3df4 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    3b66:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3b6a:	83 ff       	sbrs	r24, 3
    3b6c:	21 c0       	rjmp	.+66     	; 0x3bb0 <__vector_11+0x104>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3b6e:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3b72:	83 ff       	sbrs	r24, 3
    3b74:	1d c0       	rjmp	.+58     	; 0x3bb0 <__vector_11+0x104>
    3b76:	80 91 e1 00 	lds	r24, 0x00E1
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3b7a:	87 7f       	andi	r24, 0xF7	; 247
    3b7c:	80 93 e1 00 	sts	0x00E1, r24
    3b80:	82 e0       	ldi	r24, 0x02	; 2
    3b82:	8e bb       	out	0x1e, r24	; 30
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3b84:	10 92 d4 01 	sts	0x01D4, r1
		USB_Device_ConfigurationNumber = 0;
    3b88:	80 91 e1 00 	lds	r24, 0x00E1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3b8c:	8e 7f       	andi	r24, 0xFE	; 254
    3b8e:	80 93 e1 00 	sts	0x00E1, r24
    3b92:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3b96:	8e 7f       	andi	r24, 0xFE	; 254
    3b98:	80 93 e2 00 	sts	0x00E2, r24
    3b9c:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3ba0:	80 61       	ori	r24, 0x10	; 16
    3ba2:	80 93 e2 00 	sts	0x00E2, r24
    3ba6:	42 e0       	ldi	r20, 0x02	; 2
    3ba8:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	09 df       	rcall	.-494    	; 0x39c0 <Endpoint_ConfigureEndpoint_Prv>
    3bae:	22 d1       	rcall	.+580    	; 0x3df4 <USB_Event_Stub>
    3bb0:	ff 91       	pop	r31
    3bb2:	ef 91       	pop	r30

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3bb4:	bf 91       	pop	r27
    3bb6:	af 91       	pop	r26
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3bb8:	9f 91       	pop	r25
    3bba:	8f 91       	pop	r24
    3bbc:	7f 91       	pop	r23
    3bbe:	6f 91       	pop	r22
    3bc0:	5f 91       	pop	r21
    3bc2:	4f 91       	pop	r20
    3bc4:	3f 91       	pop	r19
    3bc6:	2f 91       	pop	r18
    3bc8:	0f 90       	pop	r0
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	0f 90       	pop	r0
    3bce:	1f 90       	pop	r1
    3bd0:	18 95       	reti

00003bd2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3bd2:	1f 93       	push	r17
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	00 d0       	rcall	.+0      	; 0x3bda <USB_Device_ProcessControlRequest+0x8>
    3bda:	cd b7       	in	r28, 0x3d	; 61
    3bdc:	de b7       	in	r29, 0x3e	; 62
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    3bde:	e6 ed       	ldi	r30, 0xD6	; 214
    3be0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3be2:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3be6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	ee 3d       	cpi	r30, 0xDE	; 222
    3bec:	f8 07       	cpc	r31, r24
    3bee:	c9 f7       	brne	.-14     	; 0x3be2 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3bf0:	f1 dc       	rcall	.-1566   	; 0x35d4 <EVENT_USB_Device_ControlRequest>
    3bf2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3bf6:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    3bf8:	e9 c0       	rjmp	.+466    	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3bfa:	80 91 d6 01 	lds	r24, 0x01D6
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3bfe:	90 91 d7 01 	lds	r25, 0x01D7

		switch (USB_ControlRequest.bRequest)
    3c02:	95 30       	cpi	r25, 0x05	; 5
    3c04:	09 f4       	brne	.+2      	; 0x3c08 <USB_Device_ProcessControlRequest+0x36>
    3c06:	70 c0       	rjmp	.+224    	; 0x3ce8 <USB_Device_ProcessControlRequest+0x116>
    3c08:	38 f4       	brcc	.+14     	; 0x3c18 <USB_Device_ProcessControlRequest+0x46>
    3c0a:	91 30       	cpi	r25, 0x01	; 1
    3c0c:	79 f1       	breq	.+94     	; 0x3c6c <USB_Device_ProcessControlRequest+0x9a>
    3c0e:	70 f0       	brcs	.+28     	; 0x3c2c <USB_Device_ProcessControlRequest+0x5a>
    3c10:	93 30       	cpi	r25, 0x03	; 3
    3c12:	09 f0       	breq	.+2      	; 0x3c16 <USB_Device_ProcessControlRequest+0x44>
    3c14:	db c0       	rjmp	.+438    	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3c16:	2a c0       	rjmp	.+84     	; 0x3c6c <USB_Device_ProcessControlRequest+0x9a>
    3c18:	98 30       	cpi	r25, 0x08	; 8
    3c1a:	09 f4       	brne	.+2      	; 0x3c1e <USB_Device_ProcessControlRequest+0x4c>
    3c1c:	aa c0       	rjmp	.+340    	; 0x3d72 <USB_Device_ProcessControlRequest+0x1a0>
    3c1e:	99 30       	cpi	r25, 0x09	; 9
    3c20:	09 f4       	brne	.+2      	; 0x3c24 <USB_Device_ProcessControlRequest+0x52>
    3c22:	b9 c0       	rjmp	.+370    	; 0x3d96 <USB_Device_ProcessControlRequest+0x1c4>
    3c24:	96 30       	cpi	r25, 0x06	; 6
    3c26:	09 f0       	breq	.+2      	; 0x3c2a <USB_Device_ProcessControlRequest+0x58>
    3c28:	d1 c0       	rjmp	.+418    	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3c2a:	83 c0       	rjmp	.+262    	; 0x3d32 <USB_Device_ProcessControlRequest+0x160>
    3c2c:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3c2e:	99 f0       	breq	.+38     	; 0x3c56 <USB_Device_ProcessControlRequest+0x84>
    3c30:	82 38       	cpi	r24, 0x82	; 130
    3c32:	09 f0       	breq	.+2      	; 0x3c36 <USB_Device_ProcessControlRequest+0x64>
    3c34:	cb c0       	rjmp	.+406    	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3c36:	80 91 da 01 	lds	r24, 0x01DA
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3c3a:	90 91 db 01 	lds	r25, 0x01DB
    3c3e:	8f 70       	andi	r24, 0x0F	; 15
    3c40:	99 27       	eor	r25, r25
    3c42:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c46:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3c4a:	95 fb       	bst	r25, 5
    3c4c:	99 27       	eor	r25, r25
    3c4e:	90 f9       	bld	r25, 0
    3c50:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c54:	01 c0       	rjmp	.+2      	; 0x3c58 <USB_Device_ProcessControlRequest+0x86>
    3c56:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    3c58:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3c5c:	87 7f       	andi	r24, 0xF7	; 247
    3c5e:	80 93 e8 00 	sts	0x00E8, r24
    3c62:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3c66:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    3c6a:	8e c0       	rjmp	.+284    	; 0x3d88 <USB_Device_ProcessControlRequest+0x1b6>
    3c6c:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3c6e:	19 f0       	breq	.+6      	; 0x3c76 <USB_Device_ProcessControlRequest+0xa4>
    3c70:	82 30       	cpi	r24, 0x02	; 2
    3c72:	09 f0       	breq	.+2      	; 0x3c76 <USB_Device_ProcessControlRequest+0xa4>
    3c74:	ab c0       	rjmp	.+342    	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3c76:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3c78:	82 30       	cpi	r24, 0x02	; 2
    3c7a:	09 f0       	breq	.+2      	; 0x3c7e <USB_Device_ProcessControlRequest+0xac>
    3c7c:	a7 c0       	rjmp	.+334    	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3c7e:	80 91 d8 01 	lds	r24, 0x01D8

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3c82:	81 11       	cpse	r24, r1
    3c84:	2b c0       	rjmp	.+86     	; 0x3cdc <USB_Device_ProcessControlRequest+0x10a>
    3c86:	80 91 da 01 	lds	r24, 0x01DA
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3c8a:	90 91 db 01 	lds	r25, 0x01DB
    3c8e:	8f 70       	andi	r24, 0x0F	; 15
    3c90:	99 27       	eor	r25, r25
    3c92:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <USB_Device_ProcessControlRequest+0xc6>
    3c96:	9a c0       	rjmp	.+308    	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3c98:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3c9c:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3ca0:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3ca2:	1c c0       	rjmp	.+56     	; 0x3cdc <USB_Device_ProcessControlRequest+0x10a>
    3ca4:	20 91 d7 01 	lds	r18, 0x01D7
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3ca8:	23 30       	cpi	r18, 0x03	; 3
    3caa:	21 f4       	brne	.+8      	; 0x3cb4 <USB_Device_ProcessControlRequest+0xe2>
    3cac:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3cb0:	80 62       	ori	r24, 0x20	; 32
    3cb2:	12 c0       	rjmp	.+36     	; 0x3cd8 <USB_Device_ProcessControlRequest+0x106>
    3cb4:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3cb8:	90 61       	ori	r25, 0x10	; 16
    3cba:	90 93 eb 00 	sts	0x00EB, r25
    3cbe:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	01 c0       	rjmp	.+2      	; 0x3cc6 <USB_Device_ProcessControlRequest+0xf4>
    3cc4:	22 0f       	add	r18, r18
    3cc6:	8a 95       	dec	r24
    3cc8:	ea f7       	brpl	.-6      	; 0x3cc4 <USB_Device_ProcessControlRequest+0xf2>
    3cca:	20 93 ea 00 	sts	0x00EA, r18
    3cce:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    3cd2:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3cd6:	88 60       	ori	r24, 0x08	; 8
    3cd8:	80 93 eb 00 	sts	0x00EB, r24
    3cdc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3ce0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3ce4:	87 7f       	andi	r24, 0xF7	; 247
    3ce6:	53 c0       	rjmp	.+166    	; 0x3d8e <USB_Device_ProcessControlRequest+0x1bc>
    3ce8:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3cea:	70 c0       	rjmp	.+224    	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3cec:	80 91 d8 01 	lds	r24, 0x01D8
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3cf0:	90 91 d9 01 	lds	r25, 0x01D9
    3cf4:	8f 77       	andi	r24, 0x7F	; 127
    3cf6:	99 27       	eor	r25, r25
    3cf8:	18 2f       	mov	r17, r24
    3cfa:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3cfe:	90 78       	andi	r25, 0x80	; 128
    3d00:	98 2b       	or	r25, r24
    3d02:	90 93 e3 00 	sts	0x00E3, r25
    3d06:	80 91 e8 00 	lds	r24, 0x00E8
    3d0a:	87 7f       	andi	r24, 0xF7	; 247
    3d0c:	80 93 e8 00 	sts	0x00E8, r24
    3d10:	6b de       	rcall	.-810    	; 0x39e8 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3d12:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3d16:	80 ff       	sbrs	r24, 0
    3d18:	fc cf       	rjmp	.-8      	; 0x3d12 <USB_Device_ProcessControlRequest+0x140>

	while (!(Endpoint_IsINReady()));
    3d1a:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    3d1e:	80 68       	ori	r24, 0x80	; 128
    3d20:	80 93 e3 00 	sts	0x00E3, r24
    3d24:	11 23       	and	r17, r17
    3d26:	11 f0       	breq	.+4      	; 0x3d2c <USB_Device_ProcessControlRequest+0x15a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3d28:	83 e0       	ldi	r24, 0x03	; 3
    3d2a:	01 c0       	rjmp	.+2      	; 0x3d2e <USB_Device_ProcessControlRequest+0x15c>
    3d2c:	82 e0       	ldi	r24, 0x02	; 2
    3d2e:	8e bb       	out	0x1e, r24	; 30
    3d30:	4d c0       	rjmp	.+154    	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3d32:	80 58       	subi	r24, 0x80	; 128
    3d34:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3d36:	08 f0       	brcs	.+2      	; 0x3d3a <USB_Device_ProcessControlRequest+0x168>
    3d38:	49 c0       	rjmp	.+146    	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3d3a:	ae 01       	movw	r20, r28
    3d3c:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d40:	60 91 da 01 	lds	r22, 0x01DA
    3d44:	80 91 d8 01 	lds	r24, 0x01D8
    3d48:	90 91 d9 01 	lds	r25, 0x01D9
    3d4c:	12 dd       	rcall	.-1500   	; 0x3772 <CALLBACK_USB_GetDescriptor>
    3d4e:	00 97       	sbiw	r24, 0x00	; 0
    3d50:	09 f4       	brne	.+2      	; 0x3d54 <USB_Device_ProcessControlRequest+0x182>
    3d52:	3c c0       	rjmp	.+120    	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3d54:	20 91 e8 00 	lds	r18, 0x00E8
    3d58:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d5a:	20 93 e8 00 	sts	0x00E8, r18
    3d5e:	bc 01       	movw	r22, r24
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    3d64:	8d dd       	rcall	.-1254   	; 0x3880 <Endpoint_Write_Control_Stream_LE>
    3d66:	80 91 e8 00 	lds	r24, 0x00E8
    3d6a:	8b 77       	andi	r24, 0x7B	; 123
    3d6c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3d70:	2d c0       	rjmp	.+90     	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3d72:	80 38       	cpi	r24, 0x80	; 128
    3d74:	59 f5       	brne	.+86     	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3d76:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3d7a:	87 7f       	andi	r24, 0xF7	; 247
    3d7c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3d80:	80 91 d4 01 	lds	r24, 0x01D4
    3d84:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3d88:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3d8c:	8e 77       	andi	r24, 0x7E	; 126
    3d8e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3d92:	2a de       	rcall	.-940    	; 0x39e8 <Endpoint_ClearStatusStage>
    3d94:	1b c0       	rjmp	.+54     	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3d96:	81 11       	cpse	r24, r1
    3d98:	19 c0       	rjmp	.+50     	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3d9a:	90 91 d8 01 	lds	r25, 0x01D8
    3d9e:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3da0:	a8 f4       	brcc	.+42     	; 0x3dcc <USB_Device_ProcessControlRequest+0x1fa>
    3da2:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3da6:	87 7f       	andi	r24, 0xF7	; 247
    3da8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3dac:	90 93 d4 01 	sts	0x01D4, r25
    3db0:	1b de       	rcall	.-970    	; 0x39e8 <Endpoint_ClearStatusStage>
    3db2:	80 91 d4 01 	lds	r24, 0x01D4
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3db6:	81 11       	cpse	r24, r1
    3db8:	04 c0       	rjmp	.+8      	; 0x3dc2 <USB_Device_ProcessControlRequest+0x1f0>

	Endpoint_ClearStatusStage();
    3dba:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    3dbe:	87 ff       	sbrs	r24, 7
    3dc0:	02 c0       	rjmp	.+4      	; 0x3dc6 <USB_Device_ProcessControlRequest+0x1f4>
    3dc2:	84 e0       	ldi	r24, 0x04	; 4
    3dc4:	01 c0       	rjmp	.+2      	; 0x3dc8 <USB_Device_ProcessControlRequest+0x1f6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3dca:	f8 db       	rcall	.-2064   	; 0x35bc <EVENT_USB_Device_ConfigurationChanged>
    3dcc:	80 91 e8 00 	lds	r24, 0x00E8
    3dd0:	83 ff       	sbrs	r24, 3
    3dd2:	0a c0       	rjmp	.+20     	; 0x3de8 <USB_Device_ProcessControlRequest+0x216>
    3dd4:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    3dd8:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3dda:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3dde:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3de2:	80 62       	ori	r24, 0x20	; 32
    3de4:	80 93 eb 00 	sts	0x00EB, r24
    3de8:	0f 90       	pop	r0
    3dea:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3dec:	df 91       	pop	r29
    3dee:	cf 91       	pop	r28
    3df0:	1f 91       	pop	r17
    3df2:	08 95       	ret

00003df4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    3df4:	08 95       	ret

00003df6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3df6:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3df8:	8e b3       	in	r24, 0x1e	; 30
    3dfa:	88 23       	and	r24, r24
    3dfc:	a9 f0       	breq	.+42     	; 0x3e28 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3dfe:	80 91 e9 00 	lds	r24, 0x00E9
    3e02:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3e04:	90 91 ec 00 	lds	r25, 0x00EC
    3e08:	90 ff       	sbrs	r25, 0
    3e0a:	02 c0       	rjmp	.+4      	; 0x3e10 <USB_USBTask+0x1a>
    3e0c:	90 e8       	ldi	r25, 0x80	; 128
    3e0e:	01 c0       	rjmp	.+2      	; 0x3e12 <USB_USBTask+0x1c>
    3e10:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3e12:	c9 2f       	mov	r28, r25
    3e14:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e16:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3e1a:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    3e1e:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    3e20:	d8 de       	rcall	.-592    	; 0x3bd2 <USB_Device_ProcessControlRequest>
    3e22:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e24:	c0 93 e9 00 	sts	0x00E9, r28
    3e28:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3e2a:	08 95       	ret

00003e2c <__udivmodsi4>:
    3e2c:	a1 e2       	ldi	r26, 0x21	; 33
    3e2e:	1a 2e       	mov	r1, r26
    3e30:	aa 1b       	sub	r26, r26
    3e32:	bb 1b       	sub	r27, r27
    3e34:	fd 01       	movw	r30, r26
    3e36:	0d c0       	rjmp	.+26     	; 0x3e52 <__udivmodsi4_ep>

00003e38 <__udivmodsi4_loop>:
    3e38:	aa 1f       	adc	r26, r26
    3e3a:	bb 1f       	adc	r27, r27
    3e3c:	ee 1f       	adc	r30, r30
    3e3e:	ff 1f       	adc	r31, r31
    3e40:	a2 17       	cp	r26, r18
    3e42:	b3 07       	cpc	r27, r19
    3e44:	e4 07       	cpc	r30, r20
    3e46:	f5 07       	cpc	r31, r21
    3e48:	20 f0       	brcs	.+8      	; 0x3e52 <__udivmodsi4_ep>
    3e4a:	a2 1b       	sub	r26, r18
    3e4c:	b3 0b       	sbc	r27, r19
    3e4e:	e4 0b       	sbc	r30, r20
    3e50:	f5 0b       	sbc	r31, r21

00003e52 <__udivmodsi4_ep>:
    3e52:	66 1f       	adc	r22, r22
    3e54:	77 1f       	adc	r23, r23
    3e56:	88 1f       	adc	r24, r24
    3e58:	99 1f       	adc	r25, r25
    3e5a:	1a 94       	dec	r1
    3e5c:	69 f7       	brne	.-38     	; 0x3e38 <__udivmodsi4_loop>
    3e5e:	60 95       	com	r22
    3e60:	70 95       	com	r23
    3e62:	80 95       	com	r24
    3e64:	90 95       	com	r25
    3e66:	9b 01       	movw	r18, r22
    3e68:	ac 01       	movw	r20, r24
    3e6a:	bd 01       	movw	r22, r26
    3e6c:	cf 01       	movw	r24, r30
    3e6e:	08 95       	ret

00003e70 <__eewr_byte_m16u2>:
    3e70:	26 2f       	mov	r18, r22

00003e72 <__eewr_r18_m16u2>:
    3e72:	f9 99       	sbic	0x1f, 1	; 31
    3e74:	fe cf       	rjmp	.-4      	; 0x3e72 <__eewr_r18_m16u2>
    3e76:	1f ba       	out	0x1f, r1	; 31
    3e78:	92 bd       	out	0x22, r25	; 34
    3e7a:	81 bd       	out	0x21, r24	; 33
    3e7c:	20 bd       	out	0x20, r18	; 32
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	fa 9a       	sbi	0x1f, 2	; 31
    3e84:	f9 9a       	sbi	0x1f, 1	; 31
    3e86:	0f be       	out	0x3f, r0	; 63
    3e88:	01 96       	adiw	r24, 0x01	; 1
    3e8a:	08 95       	ret

00003e8c <_exit>:
    3e8c:	f8 94       	cli

00003e8e <__stop_program>:
    3e8e:	ff cf       	rjmp	.-2      	; 0x3e8e <__stop_program>

Disassembly of section .apitable_trampolines:

00003fa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
    3fa0:	1d cc       	rjmp	.-1990   	; 0x37dc <BootloaderAPI_ErasePage>

00003fa2 <BootloaderAPI_WritePage_Trampoline>:
    3fa2:	2e cc       	rjmp	.-1956   	; 0x3800 <BootloaderAPI_WritePage>

00003fa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
    3fa4:	3f cc       	rjmp	.-1922   	; 0x3824 <BootloaderAPI_FillWord>

00003fa6 <BootloaderAPI_ReadSignature_Trampoline>:
    3fa6:	4b cc       	rjmp	.-1898   	; 0x383e <BootloaderAPI_ReadSignature>

00003fa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
    3fa8:	50 cc       	rjmp	.-1888   	; 0x384a <BootloaderAPI_ReadFuse>

00003faa <BootloaderAPI_ReadLock_Trampoline>:
    3faa:	55 cc       	rjmp	.-1878   	; 0x3856 <BootloaderAPI_ReadLock>

00003fac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
    3fac:	5b cc       	rjmp	.-1866   	; 0x3864 <BootloaderAPI_WriteLock>

00003fae <BootloaderAPI_UNUSED1>:
    3fae:	08 95       	ret

00003fb0 <BootloaderAPI_UNUSED2>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
    3fb0:	08 95       	ret

00003fb2 <BootloaderAPI_UNUSED3>:
    3fb2:	08 95       	ret

00003fb4 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
    3fb4:	08 95       	ret

00003fb6 <BootloaderAPI_UNUSED5>:
    3fb6:	08 95       	ret

Disassembly of section .apitable_jumptable:

00003fe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
    3fe0:	df cf       	rjmp	.-66     	; 0x3fa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
    3fe2:	df cf       	rjmp	.-66     	; 0x3fa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
    3fe4:	df cf       	rjmp	.-66     	; 0x3fa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
    3fe6:	df cf       	rjmp	.-66     	; 0x3fa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
    3fe8:	df cf       	rjmp	.-66     	; 0x3fa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
    3fea:	df cf       	rjmp	.-66     	; 0x3faa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
    3fec:	df cf       	rjmp	.-66     	; 0x3fac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
    3fee:	df cf       	rjmp	.-66     	; 0x3fae <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
    3ff0:	df cf       	rjmp	.-66     	; 0x3fb0 <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
    3ff2:	df cf       	rjmp	.-66     	; 0x3fb2 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
    3ff4:	df cf       	rjmp	.-66     	; 0x3fb4 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
    3ff6:	df cf       	rjmp	.-66     	; 0x3fb6 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

00003ff8 <BootloaderAPI_Signatures>:
    3ff8:	00 30       	cpi	r16, 0x00	; 0
    3ffa:	00 00       	nop
    3ffc:	00 df       	rcall	.-512    	; 0x3dfe <USB_USBTask+0x8>
    3ffe:	fb dc       	rcall	.-1546   	; 0x39f6 <Endpoint_ClearStatusStage+0xe>
