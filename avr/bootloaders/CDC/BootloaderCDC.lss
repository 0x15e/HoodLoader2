
BootloaderCDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00007eac  00000f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eac  00007000  00007000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000018  00007fa0  00007fa0  00001012  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  00007fe0  00007fe0  0000102a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  00007ff8  00007ff8  00001042  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000000e  00800192  00800192  0000104a  2**0
                  ALLOC
  6 .noinit       00000002  008001a0  008001a0  0000104a  2**0
                  ALLOC
  7 .stab         00000954  00000000  00000000  0000104c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      000000e2  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00001a82  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000003a8  00000000  00000000  00001a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00005818  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000163a  00000000  00000000  00007658  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002af7  00000000  00000000  00008c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000009a0  00000000  00000000  0000b78c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a84  00000000  00000000  0000c12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00003b00  00000000  00000000  0000ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000580  00000000  00000000  000126b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	8a c0       	rjmp	.+276    	; 0x711a <__bad_interrupt>
    7006:	00 00       	nop
    7008:	88 c0       	rjmp	.+272    	; 0x711a <__bad_interrupt>
    700a:	00 00       	nop
    700c:	86 c0       	rjmp	.+268    	; 0x711a <__bad_interrupt>
    700e:	00 00       	nop
    7010:	84 c0       	rjmp	.+264    	; 0x711a <__bad_interrupt>
    7012:	00 00       	nop
    7014:	82 c0       	rjmp	.+260    	; 0x711a <__bad_interrupt>
    7016:	00 00       	nop
    7018:	80 c0       	rjmp	.+256    	; 0x711a <__bad_interrupt>
    701a:	00 00       	nop
    701c:	7e c0       	rjmp	.+252    	; 0x711a <__bad_interrupt>
    701e:	00 00       	nop
    7020:	7c c0       	rjmp	.+248    	; 0x711a <__bad_interrupt>
    7022:	00 00       	nop
    7024:	7a c0       	rjmp	.+244    	; 0x711a <__bad_interrupt>
    7026:	00 00       	nop
    7028:	49 c5       	rjmp	.+2706   	; 0x7abc <__vector_10>
    702a:	00 00       	nop
    702c:	76 c0       	rjmp	.+236    	; 0x711a <__bad_interrupt>
    702e:	00 00       	nop
    7030:	74 c0       	rjmp	.+232    	; 0x711a <__bad_interrupt>
    7032:	00 00       	nop
    7034:	72 c0       	rjmp	.+228    	; 0x711a <__bad_interrupt>
    7036:	00 00       	nop
    7038:	70 c0       	rjmp	.+224    	; 0x711a <__bad_interrupt>
    703a:	00 00       	nop
    703c:	6e c0       	rjmp	.+220    	; 0x711a <__bad_interrupt>
    703e:	00 00       	nop
    7040:	6c c0       	rjmp	.+216    	; 0x711a <__bad_interrupt>
    7042:	00 00       	nop
    7044:	6a c0       	rjmp	.+212    	; 0x711a <__bad_interrupt>
    7046:	00 00       	nop
    7048:	68 c0       	rjmp	.+208    	; 0x711a <__bad_interrupt>
    704a:	00 00       	nop
    704c:	66 c0       	rjmp	.+204    	; 0x711a <__bad_interrupt>
    704e:	00 00       	nop
    7050:	21 c3       	rjmp	.+1602   	; 0x7694 <__vector_20>
    7052:	00 00       	nop
    7054:	62 c0       	rjmp	.+196    	; 0x711a <__bad_interrupt>
    7056:	00 00       	nop
    7058:	60 c0       	rjmp	.+192    	; 0x711a <__bad_interrupt>
    705a:	00 00       	nop
    705c:	5e c0       	rjmp	.+188    	; 0x711a <__bad_interrupt>
    705e:	00 00       	nop
    7060:	5c c0       	rjmp	.+184    	; 0x711a <__bad_interrupt>
    7062:	00 00       	nop
    7064:	5a c0       	rjmp	.+180    	; 0x711a <__bad_interrupt>
    7066:	00 00       	nop
    7068:	58 c0       	rjmp	.+176    	; 0x711a <__bad_interrupt>
    706a:	00 00       	nop
    706c:	56 c0       	rjmp	.+172    	; 0x711a <__bad_interrupt>
    706e:	00 00       	nop
    7070:	54 c0       	rjmp	.+168    	; 0x711a <__bad_interrupt>
    7072:	00 00       	nop
    7074:	52 c0       	rjmp	.+164    	; 0x711a <__bad_interrupt>
    7076:	00 00       	nop
    7078:	50 c0       	rjmp	.+160    	; 0x711a <__bad_interrupt>
    707a:	00 00       	nop
    707c:	4e c0       	rjmp	.+156    	; 0x711a <__bad_interrupt>
    707e:	00 00       	nop
    7080:	4c c0       	rjmp	.+152    	; 0x711a <__bad_interrupt>
    7082:	00 00       	nop
    7084:	4a c0       	rjmp	.+148    	; 0x711a <__bad_interrupt>
    7086:	00 00       	nop
    7088:	48 c0       	rjmp	.+144    	; 0x711a <__bad_interrupt>
    708a:	00 00       	nop
    708c:	46 c0       	rjmp	.+140    	; 0x711a <__bad_interrupt>
    708e:	00 00       	nop
    7090:	44 c0       	rjmp	.+136    	; 0x711a <__bad_interrupt>
    7092:	00 00       	nop
    7094:	42 c0       	rjmp	.+132    	; 0x711a <__bad_interrupt>
    7096:	00 00       	nop
    7098:	40 c0       	rjmp	.+128    	; 0x711a <__bad_interrupt>
    709a:	00 00       	nop
    709c:	3e c0       	rjmp	.+124    	; 0x711a <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	3c c0       	rjmp	.+120    	; 0x711a <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	3a c0       	rjmp	.+116    	; 0x711a <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	38 c0       	rjmp	.+112    	; 0x711a <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <Application_Jump_Check>:
/** Special startup routine to check if the bootloader was started via a watchdog reset, and if the magic application
 *  start key has been loaded into \ref MagicBootKey. If the bootloader started via the watchdog and the key is valid,
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
    70b8:	04 b6       	in	r0, 0x34	; 52
    70ba:	03 fe       	sbrs	r0, 3
    70bc:	19 c0       	rjmp	.+50     	; 0x70f0 <__do_copy_data>
		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#endif

	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
    70be:	80 91 a0 01 	lds	r24, 0x01A0
    70c2:	90 91 a1 01 	lds	r25, 0x01A1
    70c6:	82 34       	cpi	r24, 0x42	; 66
    70c8:	9c 4d       	sbci	r25, 0xDC	; 220
    70ca:	91 f4       	brne	.+36     	; 0x70f0 <__do_copy_data>

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication)
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1<<WDRF);
    70cc:	84 b7       	in	r24, 0x34	; 52
    70ce:	87 7f       	andi	r24, 0xF7	; 247
    70d0:	84 bf       	out	0x34, r24	; 52
		wdt_disable();
    70d2:	88 e1       	ldi	r24, 0x18	; 24
    70d4:	0f b6       	in	r0, 0x3f	; 63
    70d6:	f8 94       	cli
    70d8:	80 93 60 00 	sts	0x0060, r24
    70dc:	10 92 60 00 	sts	0x0060, r1
    70e0:	0f be       	out	0x3f, r0	; 63

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
    70e2:	10 92 a1 01 	sts	0x01A1, r1
    70e6:	10 92 a0 01 	sts	0x01A0, r1

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
    70ea:	e0 e0       	ldi	r30, 0x00	; 0
    70ec:	f0 e0       	ldi	r31, 0x00	; 0
    70ee:	09 95       	icall

000070f0 <__do_copy_data>:
    70f0:	11 e0       	ldi	r17, 0x01	; 1
    70f2:	a0 e0       	ldi	r26, 0x00	; 0
    70f4:	b1 e0       	ldi	r27, 0x01	; 1
    70f6:	ec ea       	ldi	r30, 0xAC	; 172
    70f8:	fe e7       	ldi	r31, 0x7E	; 126
    70fa:	02 c0       	rjmp	.+4      	; 0x7100 <__do_copy_data+0x10>
    70fc:	05 90       	lpm	r0, Z+
    70fe:	0d 92       	st	X+, r0
    7100:	a2 39       	cpi	r26, 0x92	; 146
    7102:	b1 07       	cpc	r27, r17
    7104:	d9 f7       	brne	.-10     	; 0x70fc <__do_copy_data+0xc>

00007106 <__do_clear_bss>:
    7106:	11 e0       	ldi	r17, 0x01	; 1
    7108:	a2 e9       	ldi	r26, 0x92	; 146
    710a:	b1 e0       	ldi	r27, 0x01	; 1
    710c:	01 c0       	rjmp	.+2      	; 0x7110 <.do_clear_bss_start>

0000710e <.do_clear_bss_loop>:
    710e:	1d 92       	st	X+, r1

00007110 <.do_clear_bss_start>:
    7110:	a0 3a       	cpi	r26, 0xA0	; 160
    7112:	b1 07       	cpc	r27, r17
    7114:	e1 f7       	brne	.-8      	; 0x710e <.do_clear_bss_loop>
    7116:	35 d0       	rcall	.+106    	; 0x7182 <main>
    7118:	c7 c6       	rjmp	.+3470   	; 0x7ea8 <_exit>

0000711a <__bad_interrupt>:
    711a:	72 cf       	rjmp	.-284    	; 0x7000 <__vectors>

0000711c <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    711c:	84 e0       	ldi	r24, 0x04	; 4
    711e:	80 93 e9 00 	sts	0x00E9, r24
    7122:	0d c0       	rjmp	.+26     	; 0x713e <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7124:	80 91 e8 00 	lds	r24, 0x00E8
    7128:	8b 77       	andi	r24, 0x7B	; 123
    712a:	80 93 e8 00 	sts	0x00E8, r24
    712e:	03 c0       	rjmp	.+6      	; 0x7136 <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7130:	8e b3       	in	r24, 0x1e	; 30
    7132:	88 23       	and	r24, r24
    7134:	59 f0       	breq	.+22     	; 0x714c <FetchNextCommandByte+0x30>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7136:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    713a:	82 ff       	sbrs	r24, 2
    713c:	f9 cf       	rjmp	.-14     	; 0x7130 <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    713e:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    7142:	85 ff       	sbrs	r24, 5
    7144:	ef cf       	rjmp	.-34     	; 0x7124 <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7146:	80 91 f1 00 	lds	r24, 0x00F1
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
    714a:	08 95       	ret
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return 0;
    714c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    714e:	08 95       	ret

00007150 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7150:	93 e0       	ldi	r25, 0x03	; 3
    7152:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7156:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    715a:	95 ff       	sbrs	r25, 5
    715c:	03 c0       	rjmp	.+6      	; 0x7164 <WriteNextResponseByte+0x14>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    715e:	80 93 f1 00 	sts	0x00F1, r24
    7162:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7164:	90 91 e8 00 	lds	r25, 0x00E8
    7168:	9e 77       	andi	r25, 0x7E	; 126
    716a:	90 93 e8 00 	sts	0x00E8, r25
    716e:	03 c0       	rjmp	.+6      	; 0x7176 <WriteNextResponseByte+0x26>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    7170:	9e b3       	in	r25, 0x1e	; 30
    7172:	99 23       	and	r25, r25
    7174:	29 f0       	breq	.+10     	; 0x7180 <WriteNextResponseByte+0x30>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7176:	90 91 e8 00 	lds	r25, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    717a:	90 ff       	sbrs	r25, 0
    717c:	f9 cf       	rjmp	.-14     	; 0x7170 <WriteNextResponseByte+0x20>
    717e:	ef cf       	rjmp	.-34     	; 0x715e <WriteNextResponseByte+0xe>
    7180:	08 95       	ret

00007182 <main>:
/** Main program entry point. This routine configures the hardware required by the bootloader, then continuously
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
int main(void)
{
    7182:	cf 93       	push	r28
    7184:	df 93       	push	r29
    7186:	cd b7       	in	r28, 0x3d	; 61
    7188:	de b7       	in	r29, 0x3e	; 62
    718a:	28 97       	sbiw	r28, 0x08	; 8
    718c:	0f b6       	in	r0, 0x3f	; 63
    718e:	f8 94       	cli
    7190:	de bf       	out	0x3e, r29	; 62
    7192:	0f be       	out	0x3f, r0	; 63
    7194:	cd bf       	out	0x3d, r28	; 61

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    7196:	84 b7       	in	r24, 0x34	; 52
    7198:	87 7f       	andi	r24, 0xF7	; 247
    719a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    719c:	88 e1       	ldi	r24, 0x18	; 24
    719e:	0f b6       	in	r0, 0x3f	; 63
    71a0:	f8 94       	cli
    71a2:	80 93 60 00 	sts	0x0060, r24
    71a6:	10 92 60 00 	sts	0x0060, r1
    71aa:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    71ac:	90 e0       	ldi	r25, 0x00	; 0
    71ae:	80 e8       	ldi	r24, 0x80	; 128
    71b0:	0f b6       	in	r0, 0x3f	; 63
    71b2:	f8 94       	cli
    71b4:	80 93 61 00 	sts	0x0061, r24
    71b8:	90 93 61 00 	sts	0x0061, r25
    71bc:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    71be:	11 e0       	ldi	r17, 0x01	; 1
    71c0:	15 bf       	out	0x35, r17	; 53
	MCUCR = (1 << IVSEL);
    71c2:	82 e0       	ldi	r24, 0x02	; 2
    71c4:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
    71c6:	5d d4       	rcall	.+2234   	; 0x7a82 <USB_Init>
    71c8:	20 9a       	sbi	0x04, 0	; 4

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRB  |=  LEDS_PORTB_LEDS;
    71ca:	28 9a       	sbi	0x05, 0	; 5
				PORTB |=  LEDS_PORTB_LEDS;
    71cc:	55 9a       	sbi	0x0a, 5	; 10
				DDRD  |=  LEDS_PORTD_LEDS;
    71ce:	5d 9a       	sbi	0x0b, 5	; 11
				PORTD |=  LEDS_PORTD_LEDS;
    71d0:	3f 9a       	sbi	0x07, 7	; 7
				DDRC  |=  LEDS_PORTC_LEDS;
    71d2:	47 98       	cbi	0x08, 7	; 8
				PORTC &= ~LEDS_PORTC_LEDS;
    71d4:	10 93 6f 00 	sts	0x006F, r17
	LEDs_Init();

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
    71d8:	83 e0       	ldi	r24, 0x03	; 3
	TCCR1B = ((1 << CS11) | (1 << CS10));
    71da:	80 93 81 00 	sts	0x0081, r24
    71de:	28 98       	cbi	0x05, 0	; 5
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
    71e0:	5d 9a       	sbi	0x0b, 5	; 11
				PORTD = ((PORTD |  LEDS_PORTD_LEDS) & ~(LEDMask & LEDS_PORTD_LEDS));
    71e2:	47 98       	cbi	0x08, 7	; 8
				PORTC = ((PORTC & ~LEDS_PORTC_LEDS) |  (LEDMask & LEDS_PORTC_LEDS));
    71e4:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    71e6:	e3 e0       	ldi	r30, 0x03	; 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    71e8:	9e 2e       	mov	r9, r30
    71ea:	f5 e0       	ldi	r31, 0x05	; 5

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    71ec:	8f 2e       	mov	r8, r31
    71ee:	09 e0       	ldi	r16, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
	}
	else if (Command == AVR109_COMMAND_ReadExtendedFuses)
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    71f0:	36 c2       	rjmp	.+1132   	; 0x765e <main+0x4dc>
    71f2:	24 e0       	ldi	r18, 0x04	; 4
    71f4:	20 93 e9 00 	sts	0x00E9, r18
    71f8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    71fc:	82 ff       	sbrs	r24, 2
{
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    71fe:	2e c2       	rjmp	.+1116   	; 0x765c <main+0x4da>
    7200:	8d df       	rcall	.-230    	; 0x711c <FetchNextCommandByte>
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    7202:	98 2f       	mov	r25, r24
    7204:	85 34       	cpi	r24, 0x45	; 69
    7206:	19 f4       	brne	.+6      	; 0x720e <main+0x8c>

	if (Command == AVR109_COMMAND_ExitBootloader)
    7208:	10 92 00 01 	sts	0x0100, r1
	{
		RunBootloader = false;
    720c:	06 c0       	rjmp	.+12     	; 0x721a <main+0x98>
    720e:	88 57       	subi	r24, 0x78	; 120
    7210:	82 30       	cpi	r24, 0x02	; 2

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if ((Command == AVR109_COMMAND_SetLED) || (Command == AVR109_COMMAND_ClearLED) ||
    7212:	10 f0       	brcs	.+4      	; 0x7218 <main+0x96>
    7214:	94 35       	cpi	r25, 0x54	; 84
    7216:	21 f4       	brne	.+8      	; 0x7220 <main+0x9e>
    7218:	81 df       	rcall	.-254    	; 0x711c <FetchNextCommandByte>
    721a:	8d e0       	ldi	r24, 0x0D	; 13
	         (Command == AVR109_COMMAND_SelectDeviceType))
	{
		FetchNextCommandByte();
    721c:	99 df       	rcall	.-206    	; 0x7150 <WriteNextResponseByte>
    721e:	f6 c1       	rjmp	.+1004   	; 0x760c <main+0x48a>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
    7220:	90 35       	cpi	r25, 0x50	; 80
    7222:	d9 f3       	breq	.-10     	; 0x721a <main+0x98>
    7224:	9c 34       	cpi	r25, 0x4C	; 76
    7226:	09 f4       	brne	.+2      	; 0x722a <main+0xa8>
	}
	else if ((Command == AVR109_COMMAND_EnterProgrammingMode) || (Command == AVR109_COMMAND_LeaveProgrammingMode))
    7228:	f8 cf       	rjmp	.-16     	; 0x721a <main+0x98>
    722a:	94 37       	cpi	r25, 0x74	; 116
    722c:	21 f4       	brne	.+8      	; 0x7236 <main+0xb4>
    722e:	84 e4       	ldi	r24, 0x44	; 68
    7230:	8f df       	rcall	.-226    	; 0x7150 <WriteNextResponseByte>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadPartCode)
    7232:	80 e0       	ldi	r24, 0x00	; 0
    7234:	f3 cf       	rjmp	.-26     	; 0x721c <main+0x9a>
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
    7236:	91 36       	cpi	r25, 0x61	; 97
    7238:	11 f4       	brne	.+4      	; 0x723e <main+0xbc>
    723a:	89 e5       	ldi	r24, 0x59	; 89
		WriteNextResponseByte(0x00);
    723c:	ef cf       	rjmp	.-34     	; 0x721c <main+0x9a>
    723e:	91 34       	cpi	r25, 0x41	; 65
	}
	else if (Command == AVR109_COMMAND_ReadAutoAddressIncrement)
    7240:	91 f4       	brne	.+36     	; 0x7266 <main+0xe4>
    7242:	6c df       	rcall	.-296    	; 0x711c <FetchNextCommandByte>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
    7244:	f8 2e       	mov	r15, r24
    7246:	6a df       	rcall	.-300    	; 0x711c <FetchNextCommandByte>
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
    7248:	90 e0       	ldi	r25, 0x00	; 0
    724a:	88 0f       	add	r24, r24
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress   = (FetchNextCommandByte() << 9);
    724c:	99 1f       	adc	r25, r25
    724e:	ff 0c       	add	r15, r15
    7250:	fb 82       	std	Y+3, r15	; 0x03
		CurrAddress  |= (FetchNextCommandByte() << 1);
    7252:	1a 82       	std	Y+2, r1	; 0x02
    7254:	2a 81       	ldd	r18, Y+2	; 0x02
    7256:	3b 81       	ldd	r19, Y+3	; 0x03
    7258:	82 2b       	or	r24, r18
    725a:	93 2b       	or	r25, r19
		WriteNextResponseByte('Y');
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress   = (FetchNextCommandByte() << 9);
    725c:	aa 27       	eor	r26, r26
    725e:	97 fd       	sbrc	r25, 7
    7260:	a0 95       	com	r26
		CurrAddress  |= (FetchNextCommandByte() << 1);
    7262:	ba 2f       	mov	r27, r26
    7264:	a7 c1       	rjmp	.+846    	; 0x75b4 <main+0x432>
    7266:	90 37       	cpi	r25, 0x70	; 112
    7268:	11 f4       	brne	.+4      	; 0x726e <main+0xec>
    726a:	83 e5       	ldi	r24, 0x53	; 83
    726c:	d7 cf       	rjmp	.-82     	; 0x721c <main+0x9a>
    726e:	93 35       	cpi	r25, 0x53	; 83
    7270:	71 f4       	brne	.+28     	; 0x728e <main+0x10c>
    7272:	6a e8       	ldi	r22, 0x8A	; 138

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderInterface)
    7274:	e6 2e       	mov	r14, r22
    7276:	61 e0       	ldi	r22, 0x01	; 1
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
    7278:	f6 2e       	mov	r15, r22
    727a:	f7 01       	movw	r30, r14
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
    727c:	81 91       	ld	r24, Z+
    727e:	7f 01       	movw	r14, r30
    7280:	67 df       	rcall	.-306    	; 0x7150 <WriteNextResponseByte>
    7282:	f1 e9       	ldi	r31, 0x91	; 145
    7284:	ef 16       	cp	r14, r31
    7286:	f1 e0       	ldi	r31, 0x01	; 1
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    7288:	ff 06       	cpc	r15, r31
    728a:	b9 f7       	brne	.-18     	; 0x727a <main+0xf8>
    728c:	bf c1       	rjmp	.+894    	; 0x760c <main+0x48a>
    728e:	96 35       	cpi	r25, 0x56	; 86
    7290:	21 f4       	brne	.+8      	; 0x729a <main+0x118>
		WriteNextResponseByte('S');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    7292:	81 e3       	ldi	r24, 0x31	; 49
    7294:	5d df       	rcall	.-326    	; 0x7150 <WriteNextResponseByte>
    7296:	80 e3       	ldi	r24, 0x30	; 48
    7298:	c1 cf       	rjmp	.-126    	; 0x721c <main+0x9a>
    729a:	93 37       	cpi	r25, 0x73	; 115
    729c:	31 f4       	brne	.+12     	; 0x72aa <main+0x128>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderSWVersion)
    729e:	87 e8       	ldi	r24, 0x87	; 135
    72a0:	57 df       	rcall	.-338    	; 0x7150 <WriteNextResponseByte>
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    72a2:	85 e9       	ldi	r24, 0x95	; 149
    72a4:	55 df       	rcall	.-342    	; 0x7150 <WriteNextResponseByte>
    72a6:	8e e1       	ldi	r24, 0x1E	; 30
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    72a8:	b9 cf       	rjmp	.-142    	; 0x721c <main+0x9a>
    72aa:	95 36       	cpi	r25, 0x65	; 101
	}
	else if (Command == AVR109_COMMAND_ReadSignature)
    72ac:	a9 f4       	brne	.+42     	; 0x72d8 <main+0x156>
    72ae:	e0 e0       	ldi	r30, 0x00	; 0
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    72b0:	f0 e0       	ldi	r31, 0x00	; 0
    72b2:	90 92 57 00 	sts	0x0057, r9
		WriteNextResponseByte(AVR_SIGNATURE_2);
    72b6:	e8 95       	spm
    72b8:	07 b6       	in	r0, 0x37	; 55
    72ba:	00 fc       	sbrc	r0, 0
		WriteNextResponseByte(AVR_SIGNATURE_1);
    72bc:	fd cf       	rjmp	.-6      	; 0x72b8 <main+0x136>
    72be:	80 92 57 00 	sts	0x0057, r8
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
    72c2:	e8 95       	spm
    72c4:	07 b6       	in	r0, 0x37	; 55
    72c6:	00 fc       	sbrc	r0, 0
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    72c8:	fd cf       	rjmp	.-6      	; 0x72c4 <main+0x142>
    72ca:	e0 58       	subi	r30, 0x80	; 128
    72cc:	ff 4f       	sbci	r31, 0xFF	; 255
			boot_spm_busy_wait();
    72ce:	e1 15       	cp	r30, r1
    72d0:	20 e7       	ldi	r18, 0x70	; 112
    72d2:	f2 07       	cpc	r31, r18
			boot_page_write(CurrFlashAddress);
    72d4:	71 f7       	brne	.-36     	; 0x72b2 <main+0x130>
    72d6:	a1 cf       	rjmp	.-190    	; 0x721a <main+0x98>
    72d8:	9c 36       	cpi	r25, 0x6C	; 108
			boot_spm_busy_wait();
    72da:	49 f4       	brne	.+18     	; 0x72ee <main+0x16c>
    72dc:	1f df       	rcall	.-450    	; 0x711c <FetchNextCommandByte>
    72de:	80 95       	com	r24
    72e0:	e1 e0       	ldi	r30, 0x01	; 1
    72e2:	f0 e0       	ldi	r31, 0x00	; 0
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    72e4:	08 2e       	mov	r0, r24
    72e6:	00 93 57 00 	sts	0x0057, r16
    72ea:	e8 95       	spm
    72ec:	96 cf       	rjmp	.-212    	; 0x721a <main+0x98>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == AVR109_COMMAND_WriteLockbits)
    72ee:	92 37       	cpi	r25, 0x72	; 114
    72f0:	19 f4       	brne	.+6      	; 0x72f8 <main+0x176>
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
    72f2:	e1 e0       	ldi	r30, 0x01	; 1
    72f4:	f0 e0       	ldi	r31, 0x00	; 0
    72f6:	0e c0       	rjmp	.+28     	; 0x7314 <main+0x192>
    72f8:	96 34       	cpi	r25, 0x46	; 70
    72fa:	19 f4       	brne	.+6      	; 0x7302 <main+0x180>
    72fc:	e0 e0       	ldi	r30, 0x00	; 0
    72fe:	f0 e0       	ldi	r31, 0x00	; 0
    7300:	09 c0       	rjmp	.+18     	; 0x7314 <main+0x192>
    7302:	9e 34       	cpi	r25, 0x4E	; 78
    7304:	19 f4       	brne	.+6      	; 0x730c <main+0x18a>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == AVR109_COMMAND_ReadLockbits)
    7306:	e3 e0       	ldi	r30, 0x03	; 3
    7308:	f0 e0       	ldi	r31, 0x00	; 0
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    730a:	04 c0       	rjmp	.+8      	; 0x7314 <main+0x192>
    730c:	91 35       	cpi	r25, 0x51	; 81
    730e:	31 f4       	brne	.+12     	; 0x731c <main+0x19a>
	}
	else if (Command == AVR109_COMMAND_ReadLowFuses)
    7310:	e2 e0       	ldi	r30, 0x02	; 2
    7312:	f0 e0       	ldi	r31, 0x00	; 0
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    7314:	00 93 57 00 	sts	0x0057, r16
    7318:	84 91       	lpm	r24, Z+
	}
	else if (Command == AVR109_COMMAND_ReadHighFuses)
    731a:	80 cf       	rjmp	.-256    	; 0x721c <main+0x9a>
    731c:	92 36       	cpi	r25, 0x62	; 98
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    731e:	31 f4       	brne	.+12     	; 0x732c <main+0x1aa>
    7320:	89 e5       	ldi	r24, 0x59	; 89
    7322:	16 df       	rcall	.-468    	; 0x7150 <WriteNextResponseByte>
	}
	else if (Command == AVR109_COMMAND_ReadExtendedFuses)
    7324:	80 e0       	ldi	r24, 0x00	; 0
    7326:	14 df       	rcall	.-472    	; 0x7150 <WriteNextResponseByte>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    7328:	80 e8       	ldi	r24, 0x80	; 128
    732a:	78 cf       	rjmp	.-272    	; 0x721c <main+0x9a>
    732c:	92 34       	cpi	r25, 0x42	; 66
    732e:	19 f0       	breq	.+6      	; 0x7336 <main+0x1b4>
    7330:	97 36       	cpi	r25, 0x67	; 103
    7332:	09 f0       	breq	.+2      	; 0x7336 <main+0x1b4>
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == AVR109_COMMAND_GetBlockWriteSupport)
    7334:	d8 c0       	rjmp	.+432    	; 0x74e6 <main+0x364>
    7336:	9e 83       	std	Y+6, r25	; 0x06
	{
		WriteNextResponseByte('Y');
    7338:	f1 de       	rcall	.-542    	; 0x711c <FetchNextCommandByte>
    733a:	78 2e       	mov	r7, r24
    733c:	61 2c       	mov	r6, r1

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    733e:	ee de       	rcall	.-548    	; 0x711c <FetchNextCommandByte>
    7340:	93 01       	movw	r18, r6
    7342:	28 2b       	or	r18, r24
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    7344:	38 87       	std	Y+8, r19	; 0x08
    7346:	2f 83       	std	Y+7, r18	; 0x07
	}
	else if ((Command == AVR109_COMMAND_BlockWrite) || (Command == AVR109_COMMAND_BlockRead))
    7348:	e9 de       	rcall	.-558    	; 0x711c <FetchNextCommandByte>
    734a:	89 83       	std	Y+1, r24	; 0x01
    734c:	85 54       	subi	r24, 0x45	; 69
    734e:	9e 81       	ldd	r25, Y+6	; 0x06
    7350:	82 30       	cpi	r24, 0x02	; 2
	char     MemoryType;

	uint8_t  HighByte = 0;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    7352:	10 f0       	brcs	.+4      	; 0x7358 <main+0x1d6>
    7354:	8f e3       	ldi	r24, 0x3F	; 63
    7356:	62 cf       	rjmp	.-316    	; 0x721c <main+0x9a>
    7358:	97 36       	cpi	r25, 0x67	; 103
    735a:	09 f0       	breq	.+2      	; 0x735e <main+0x1dc>
	BlockSize |=  FetchNextCommandByte();
    735c:	49 c0       	rjmp	.+146    	; 0x73f0 <main+0x26e>
    735e:	31 e1       	ldi	r19, 0x11	; 17
    7360:	30 93 57 00 	sts	0x0057, r19
    7364:	e8 95       	spm
    7366:	a1 2c       	mov	r10, r1

	MemoryType =  FetchNextCommandByte();
    7368:	3d c0       	rjmp	.+122    	; 0x73e4 <main+0x262>
    736a:	c0 90 92 01 	lds	r12, 0x0192

	if ((MemoryType != MEMORY_TYPE_FLASH) && (MemoryType != MEMORY_TYPE_EEPROM))
    736e:	d0 90 93 01 	lds	r13, 0x0193
    7372:	e0 90 94 01 	lds	r14, 0x0194
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
    7376:	f0 90 95 01 	lds	r15, 0x0195

		return;
	}

	/* Check if command is to read a memory block */
	if (Command == AVR109_COMMAND_BlockRead)
    737a:	29 81       	ldd	r18, Y+1	; 0x01
    737c:	26 34       	cpi	r18, 0x46	; 70
    737e:	b9 f4       	brne	.+46     	; 0x73ae <main+0x22c>
	{
		/* Re-enable RWW section */
		boot_rww_enable();
    7380:	ea 2d       	mov	r30, r10
    7382:	f0 e0       	ldi	r31, 0x00	; 0
    7384:	ec 29       	or	r30, r12
    7386:	fd 29       	or	r31, r13
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	uint8_t  HighByte = 0;
    7388:	84 91       	lpm	r24, Z+
    738a:	e2 de       	rcall	.-572    	; 0x7150 <WriteNextResponseByte>
    738c:	aa 20       	and	r10, r10
    738e:	69 f0       	breq	.+26     	; 0x73aa <main+0x228>
    7390:	32 e0       	ldi	r19, 0x02	; 2
    7392:	c3 0e       	add	r12, r19
    7394:	d1 1c       	adc	r13, r1
    7396:	e1 1c       	adc	r14, r1
    7398:	f1 1c       	adc	r15, r1
    739a:	c0 92 92 01 	sts	0x0192, r12
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
    739e:	d0 92 93 01 	sts	0x0193, r13
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    73a2:	e0 92 94 01 	sts	0x0194, r14
    73a6:	f0 92 95 01 	sts	0x0195, r15
    73aa:	a1 26       	eor	r10, r17
    73ac:	15 c0       	rjmp	.+42     	; 0x73d8 <main+0x256>
    73ae:	d7 01       	movw	r26, r14
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    73b0:	c6 01       	movw	r24, r12
    73b2:	b6 95       	lsr	r27
				  CurrAddress += 2;
    73b4:	a7 95       	ror	r26
    73b6:	97 95       	ror	r25
    73b8:	87 95       	ror	r24
    73ba:	60 d5       	rcall	.+2752   	; 0x7e7c <__eerd_byte_m32u4>
    73bc:	c9 de       	rcall	.-622    	; 0x7150 <WriteNextResponseByte>
    73be:	82 e0       	ldi	r24, 0x02	; 2
    73c0:	c8 0e       	add	r12, r24
    73c2:	d1 1c       	adc	r13, r1
    73c4:	e1 1c       	adc	r14, r1
    73c6:	f1 1c       	adc	r15, r1
    73c8:	c0 92 92 01 	sts	0x0192, r12
    73cc:	d0 92 93 01 	sts	0x0193, r13

				HighByte = !HighByte;
    73d0:	e0 92 94 01 	sts	0x0194, r14
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    73d4:	f0 92 95 01 	sts	0x0195, r15
    73d8:	2f 81       	ldd	r18, Y+7	; 0x07
    73da:	38 85       	ldd	r19, Y+8	; 0x08
    73dc:	21 50       	subi	r18, 0x01	; 1
    73de:	31 09       	sbc	r19, r1
    73e0:	38 87       	std	Y+8, r19	; 0x08
    73e2:	2f 83       	std	Y+7, r18	; 0x07
    73e4:	2f 81       	ldd	r18, Y+7	; 0x07

				/* Increment the address counter after use */
				CurrAddress += 2;
    73e6:	38 85       	ldd	r19, Y+8	; 0x08
    73e8:	23 2b       	or	r18, r19
    73ea:	09 f0       	breq	.+2      	; 0x73ee <main+0x26c>
    73ec:	be cf       	rjmp	.-132    	; 0x736a <main+0x1e8>
    73ee:	0e c1       	rjmp	.+540    	; 0x760c <main+0x48a>
    73f0:	20 90 92 01 	lds	r2, 0x0192
    73f4:	30 90 93 01 	lds	r3, 0x0193
    73f8:	40 90 94 01 	lds	r4, 0x0194
    73fc:	50 90 95 01 	lds	r5, 0x0195
    7400:	39 81       	ldd	r19, Y+1	; 0x01
    7402:	36 34       	cpi	r19, 0x46	; 70
    7404:	09 f0       	breq	.+2      	; 0x7408 <main+0x286>
    7406:	5c c0       	rjmp	.+184    	; 0x74c0 <main+0x33e>
    7408:	f1 01       	movw	r30, r2
    740a:	90 92 57 00 	sts	0x0057, r9
	if (Command == AVR109_COMMAND_BlockRead)
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    740e:	e8 95       	spm
    7410:	07 b6       	in	r0, 0x37	; 55
    7412:	00 fc       	sbrc	r0, 0
    7414:	fd cf       	rjmp	.-6      	; 0x7410 <main+0x28e>
    7416:	54 c0       	rjmp	.+168    	; 0x74c0 <main+0x33e>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    7418:	29 81       	ldd	r18, Y+1	; 0x01
    741a:	26 34       	cpi	r18, 0x46	; 70
    741c:	41 f5       	brne	.+80     	; 0x746e <main+0x2ec>
    741e:	aa 20       	and	r10, r10
    7420:	11 f1       	breq	.+68     	; 0x7466 <main+0x2e4>
    7422:	c0 90 92 01 	lds	r12, 0x0192
    7426:	d0 90 93 01 	lds	r13, 0x0193

		if (MemoryType == MEMORY_TYPE_FLASH)
    742a:	e0 90 94 01 	lds	r14, 0x0194
    742e:	f0 90 95 01 	lds	r15, 0x0195
		{
			boot_page_erase(PageStartAddress);
    7432:	74 de       	rcall	.-792    	; 0x711c <FetchNextCommandByte>
    7434:	8d 83       	std	Y+5, r24	; 0x05
    7436:	1c 82       	std	Y+4, r1	; 0x04
			boot_spm_busy_wait();
    7438:	2c 81       	ldd	r18, Y+4	; 0x04
    743a:	3d 81       	ldd	r19, Y+5	; 0x05
    743c:	2b 29       	or	r18, r11
    743e:	f6 01       	movw	r30, r12
		}

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
    7440:	09 01       	movw	r0, r18
    7442:	10 93 57 00 	sts	0x0057, r17
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    7446:	e8 95       	spm
    7448:	11 24       	eor	r1, r1
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    744a:	f2 e0       	ldi	r31, 0x02	; 2
    744c:	cf 0e       	add	r12, r31
    744e:	d1 1c       	adc	r13, r1
    7450:	e1 1c       	adc	r14, r1
    7452:	f1 1c       	adc	r15, r1
    7454:	c0 92 92 01 	sts	0x0192, r12
    7458:	d0 92 93 01 	sts	0x0193, r13
    745c:	e0 92 94 01 	sts	0x0194, r14
    7460:	f0 92 95 01 	sts	0x0195, r15
    7464:	02 c0       	rjmp	.+4      	; 0x746a <main+0x2e8>
    7466:	5a de       	rcall	.-844    	; 0x711c <FetchNextCommandByte>
    7468:	b8 2e       	mov	r11, r24
    746a:	a1 26       	eor	r10, r17
    746c:	22 c0       	rjmp	.+68     	; 0x74b2 <main+0x330>
    746e:	56 de       	rcall	.-852    	; 0x711c <FetchNextCommandByte>
    7470:	68 2f       	mov	r22, r24
    7472:	80 91 92 01 	lds	r24, 0x0192

					/* Increment the address counter after use */
					CurrAddress += 2;
    7476:	90 91 93 01 	lds	r25, 0x0193
    747a:	a0 91 94 01 	lds	r26, 0x0194
    747e:	b0 91 95 01 	lds	r27, 0x0195
    7482:	b6 95       	lsr	r27
    7484:	a7 95       	ror	r26
    7486:	97 95       	ror	r25
    7488:	87 95       	ror	r24
    748a:	00 d5       	rcall	.+2560   	; 0x7e8c <__eewr_byte_m32u4>
    748c:	80 91 92 01 	lds	r24, 0x0192
				}
				else
				{
					LowByte = FetchNextCommandByte();
    7490:	90 91 93 01 	lds	r25, 0x0193
    7494:	a0 91 94 01 	lds	r26, 0x0194
				}

				HighByte = !HighByte;
    7498:	b0 91 95 01 	lds	r27, 0x0195
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    749c:	02 96       	adiw	r24, 0x02	; 2
    749e:	a1 1d       	adc	r26, r1
    74a0:	b1 1d       	adc	r27, r1
    74a2:	80 93 92 01 	sts	0x0192, r24
    74a6:	90 93 93 01 	sts	0x0193, r25
    74aa:	a0 93 94 01 	sts	0x0194, r26
    74ae:	b0 93 95 01 	sts	0x0195, r27
    74b2:	2f 81       	ldd	r18, Y+7	; 0x07
    74b4:	38 85       	ldd	r19, Y+8	; 0x08
    74b6:	21 50       	subi	r18, 0x01	; 1
    74b8:	31 09       	sbc	r19, r1
    74ba:	38 87       	std	Y+8, r19	; 0x08

				/* Increment the address counter after use */
				CurrAddress += 2;
    74bc:	2f 83       	std	Y+7, r18	; 0x07
    74be:	02 c0       	rjmp	.+4      	; 0x74c4 <main+0x342>
    74c0:	b1 2c       	mov	r11, r1
    74c2:	a1 2c       	mov	r10, r1
    74c4:	2f 81       	ldd	r18, Y+7	; 0x07
    74c6:	38 85       	ldd	r19, Y+8	; 0x08
    74c8:	23 2b       	or	r18, r19
    74ca:	09 f0       	breq	.+2      	; 0x74ce <main+0x34c>
    74cc:	a5 cf       	rjmp	.-182    	; 0x7418 <main+0x296>
    74ce:	39 81       	ldd	r19, Y+1	; 0x01
    74d0:	36 34       	cpi	r19, 0x46	; 70
    74d2:	09 f0       	breq	.+2      	; 0x74d6 <main+0x354>
    74d4:	a2 ce       	rjmp	.-700    	; 0x721a <main+0x98>
    74d6:	f1 01       	movw	r30, r2
    74d8:	80 92 57 00 	sts	0x0057, r8
    74dc:	e8 95       	spm
    74de:	07 b6       	in	r0, 0x37	; 55
    74e0:	00 fc       	sbrc	r0, 0
    74e2:	fd cf       	rjmp	.-6      	; 0x74de <main+0x35c>
    74e4:	9a ce       	rjmp	.-716    	; 0x721a <main+0x98>
    74e6:	93 34       	cpi	r25, 0x43	; 67
    74e8:	69 f4       	brne	.+26     	; 0x7504 <main+0x382>
    74ea:	e0 90 92 01 	lds	r14, 0x0192
    74ee:	f0 90 93 01 	lds	r15, 0x0193
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == MEMORY_TYPE_FLASH)
    74f2:	14 de       	rcall	.-984    	; 0x711c <FetchNextCommandByte>
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    74f4:	90 e0       	ldi	r25, 0x00	; 0
    74f6:	f7 01       	movw	r30, r14
    74f8:	0c 01       	movw	r0, r24
    74fa:	10 93 57 00 	sts	0x0057, r17
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
    74fe:	e8 95       	spm
    7500:	11 24       	eor	r1, r1
    7502:	8b ce       	rjmp	.-746    	; 0x721a <main+0x98>
    7504:	93 36       	cpi	r25, 0x63	; 99
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    7506:	09 f5       	brne	.+66     	; 0x754a <main+0x3c8>
    7508:	c0 90 92 01 	lds	r12, 0x0192
    750c:	d0 90 93 01 	lds	r13, 0x0193

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    7510:	e0 90 94 01 	lds	r14, 0x0194
    7514:	f0 90 95 01 	lds	r15, 0x0195
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == AVR109_COMMAND_FillFlashPageWordHigh)
    7518:	01 de       	rcall	.-1022   	; 0x711c <FetchNextCommandByte>
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    751a:	b7 01       	movw	r22, r14
    751c:	a6 01       	movw	r20, r12
    751e:	41 60       	ori	r20, 0x01	; 1
    7520:	90 e0       	ldi	r25, 0x00	; 0
    7522:	fa 01       	movw	r30, r20
    7524:	0c 01       	movw	r0, r24
    7526:	10 93 57 00 	sts	0x0057, r17
    752a:	e8 95       	spm
    752c:	11 24       	eor	r1, r1
    752e:	f2 e0       	ldi	r31, 0x02	; 2
    7530:	cf 0e       	add	r12, r31
    7532:	d1 1c       	adc	r13, r1
    7534:	e1 1c       	adc	r14, r1

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_FillFlashPageWordLow)
    7536:	f1 1c       	adc	r15, r1
    7538:	c0 92 92 01 	sts	0x0192, r12
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    753c:	d0 92 93 01 	sts	0x0193, r13
    7540:	e0 92 94 01 	sts	0x0194, r14
    7544:	f0 92 95 01 	sts	0x0195, r15
    7548:	68 ce       	rjmp	.-816    	; 0x721a <main+0x98>
    754a:	9d 36       	cpi	r25, 0x6D	; 109
    754c:	59 f4       	brne	.+22     	; 0x7564 <main+0x3e2>
    754e:	e0 91 92 01 	lds	r30, 0x0192
    7552:	f0 91 93 01 	lds	r31, 0x0193
    7556:	80 92 57 00 	sts	0x0057, r8
    755a:	e8 95       	spm
    755c:	07 b6       	in	r0, 0x37	; 55
    755e:	00 fc       	sbrc	r0, 0
    7560:	fd cf       	rjmp	.-6      	; 0x755c <main+0x3da>

		/* Increment the address */
		CurrAddress += 2;
    7562:	5b ce       	rjmp	.-842    	; 0x721a <main+0x98>
    7564:	92 35       	cpi	r25, 0x52	; 82
    7566:	51 f4       	brne	.+20     	; 0x757c <main+0x3fa>
    7568:	e0 91 92 01 	lds	r30, 0x0192
    756c:	f0 91 93 01 	lds	r31, 0x0193
    7570:	e5 90       	lpm	r14, Z+
    7572:	f4 90       	lpm	r15, Z+
    7574:	8f 2d       	mov	r24, r15
    7576:	ec dd       	rcall	.-1064   	; 0x7150 <WriteNextResponseByte>
    7578:	8e 2d       	mov	r24, r14
    757a:	50 ce       	rjmp	.-864    	; 0x721c <main+0x9a>
    757c:	94 34       	cpi	r25, 0x44	; 68

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_WriteFlashPage)
    757e:	19 f5       	brne	.+70     	; 0x75c6 <main+0x444>
    7580:	cd dd       	rcall	.-1126   	; 0x711c <FetchNextCommandByte>
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
    7582:	68 2f       	mov	r22, r24
    7584:	80 91 92 01 	lds	r24, 0x0192
    7588:	90 91 93 01 	lds	r25, 0x0193
    758c:	a0 91 94 01 	lds	r26, 0x0194

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
    7590:	b0 91 95 01 	lds	r27, 0x0195
    7594:	b6 95       	lsr	r27
    7596:	a7 95       	ror	r26

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadFLASHWord)
    7598:	97 95       	ror	r25
    759a:	87 95       	ror	r24
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    759c:	77 d4       	rcall	.+2286   	; 0x7e8c <__eewr_byte_m32u4>
    759e:	80 91 92 01 	lds	r24, 0x0192
    75a2:	90 91 93 01 	lds	r25, 0x0193
    75a6:	a0 91 94 01 	lds	r26, 0x0194
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
    75aa:	b0 91 95 01 	lds	r27, 0x0195
		WriteNextResponseByte(ProgramWord & 0xFF);
    75ae:	02 96       	adiw	r24, 0x02	; 2
    75b0:	a1 1d       	adc	r26, r1
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == AVR109_COMMAND_WriteEEPROM)
    75b2:	b1 1d       	adc	r27, r1
    75b4:	80 93 92 01 	sts	0x0192, r24
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    75b8:	90 93 93 01 	sts	0x0193, r25
    75bc:	a0 93 94 01 	sts	0x0194, r26
    75c0:	b0 93 95 01 	sts	0x0195, r27
    75c4:	2a ce       	rjmp	.-940    	; 0x721a <main+0x98>
    75c6:	94 36       	cpi	r25, 0x64	; 100
    75c8:	f1 f4       	brne	.+60     	; 0x7606 <main+0x484>
    75ca:	c0 90 92 01 	lds	r12, 0x0192
    75ce:	d0 90 93 01 	lds	r13, 0x0193
    75d2:	e0 90 94 01 	lds	r14, 0x0194
    75d6:	f0 90 95 01 	lds	r15, 0x0195

		/* Increment the address after use */
		CurrAddress += 2;
    75da:	d7 01       	movw	r26, r14
    75dc:	c6 01       	movw	r24, r12
    75de:	b6 95       	lsr	r27
    75e0:	a7 95       	ror	r26
    75e2:	97 95       	ror	r25
    75e4:	87 95       	ror	r24
    75e6:	4a d4       	rcall	.+2196   	; 0x7e7c <__eerd_byte_m32u4>
    75e8:	b3 dd       	rcall	.-1178   	; 0x7150 <WriteNextResponseByte>
    75ea:	22 e0       	ldi	r18, 0x02	; 2
    75ec:	c2 0e       	add	r12, r18
    75ee:	d1 1c       	adc	r13, r1
    75f0:	e1 1c       	adc	r14, r1
    75f2:	f1 1c       	adc	r15, r1
    75f4:	c0 92 92 01 	sts	0x0192, r12
    75f8:	d0 92 93 01 	sts	0x0193, r13
    75fc:	e0 92 94 01 	sts	0x0194, r14

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadEEPROM)
    7600:	f0 92 95 01 	sts	0x0195, r15
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    7604:	03 c0       	rjmp	.+6      	; 0x760c <main+0x48a>
    7606:	9b 31       	cpi	r25, 0x1B	; 27
    7608:	09 f0       	breq	.+2      	; 0x760c <main+0x48a>
    760a:	a4 ce       	rjmp	.-696    	; 0x7354 <main+0x1d2>
    760c:	90 92 e9 00 	sts	0x00E9, r9
    7610:	90 91 e8 00 	lds	r25, 0x00E8
    7614:	80 91 e8 00 	lds	r24, 0x00E8
    7618:	8e 77       	andi	r24, 0x7E	; 126
    761a:	80 93 e8 00 	sts	0x00E8, r24
    761e:	95 fd       	sbrc	r25, 5
    7620:	11 c0       	rjmp	.+34     	; 0x7644 <main+0x4c2>
    7622:	80 91 e8 00 	lds	r24, 0x00E8
    7626:	80 fd       	sbrc	r24, 0

		/* Increment the address after use */
		CurrAddress += 2;
    7628:	04 c0       	rjmp	.+8      	; 0x7632 <main+0x4b0>
    762a:	8e b3       	in	r24, 0x1e	; 30
    762c:	81 11       	cpse	r24, r1
    762e:	f9 cf       	rjmp	.-14     	; 0x7622 <main+0x4a0>
    7630:	15 c0       	rjmp	.+42     	; 0x765c <main+0x4da>
    7632:	80 91 e8 00 	lds	r24, 0x00E8
    7636:	8e 77       	andi	r24, 0x7E	; 126
    7638:	80 93 e8 00 	sts	0x00E8, r24
    763c:	03 c0       	rjmp	.+6      	; 0x7644 <main+0x4c2>
    763e:	8e b3       	in	r24, 0x1e	; 30
    7640:	88 23       	and	r24, r24
    7642:	61 f0       	breq	.+24     	; 0x765c <main+0x4da>
	}
	#endif
	else if (Command != AVR109_COMMAND_Sync)
    7644:	80 91 e8 00 	lds	r24, 0x00E8
    7648:	80 ff       	sbrs	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    764a:	f9 cf       	rjmp	.-14     	; 0x763e <main+0x4bc>
    764c:	34 e0       	ldi	r19, 0x04	; 4
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    764e:	30 93 e9 00 	sts	0x00E9, r19
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7652:	80 91 e8 00 	lds	r24, 0x00E8
    7656:	8b 77       	andi	r24, 0x7B	; 123
    7658:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    765c:	f4 d3       	rcall	.+2024   	; 0x7e46 <USB_USBTask>
    765e:	80 91 00 01 	lds	r24, 0x0100
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7662:	81 11       	cpse	r24, r1
	{
		while (!(Endpoint_IsINReady()))
    7664:	c6 cd       	rjmp	.-1140   	; 0x71f2 <main+0x70>
    7666:	80 91 e0 00 	lds	r24, 0x00E0
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    766a:	81 60       	ori	r24, 0x01	; 1
    766c:	80 93 e0 00 	sts	0x00E0, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7670:	82 e4       	ldi	r24, 0x42	; 66
    7672:	9c ed       	ldi	r25, 0xDC	; 220
    7674:	90 93 a1 01 	sts	0x01A1, r25
    7678:	80 93 a0 01 	sts	0x01A0, r24
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    767c:	2c e0       	ldi	r18, 0x0C	; 12
    767e:	88 e1       	ldi	r24, 0x18	; 24
    7680:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7682:	0f b6       	in	r0, 0x3f	; 63
    7684:	f8 94       	cli

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    7686:	a8 95       	wdr
    7688:	80 93 60 00 	sts	0x0060, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    768c:	0f be       	out	0x3f, r0	; 63
    768e:	20 93 60 00 	sts	0x0060, r18
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7692:	ff cf       	rjmp	.-2      	; 0x7692 <main+0x510>

00007694 <__vector_20>:
	TCCR1B = ((1 << CS11) | (1 << CS10));
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    7694:	1f 92       	push	r1
    7696:	0f 92       	push	r0
    7698:	0f b6       	in	r0, 0x3f	; 63
	GlobalInterruptEnable();

	while (RunBootloader)
	{
		CDC_Task();
		USB_USBTask();
    769a:	0f 92       	push	r0
    769c:	11 24       	eor	r1, r1
	LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	while (RunBootloader)
    769e:	8f 93       	push	r24
				PORTC = ((PORTC & ~(LEDMask & LEDS_PORTC_LEDS)) |  (ActiveMask & LEDS_PORTC_LEDS));
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
    76a0:	81 e0       	ldi	r24, 0x01	; 1
    76a2:	83 b9       	out	0x03, r24	; 3
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
    76a4:	80 e2       	ldi	r24, 0x20	; 32
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    76a6:	89 b9       	out	0x09, r24	; 9
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
    76a8:	16 b8       	out	0x06, r1	; 6

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
    76aa:	8f 91       	pop	r24
    76ac:	0f 90       	pop	r0
    76ae:	0f be       	out	0x3f, r0	; 63

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
    76b0:	0f 90       	pop	r0
    76b2:	1f 90       	pop	r1
    76b4:	18 95       	reti

000076b6 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This configures the device's endpoints ready
 *  to relay data to and from the attached USB host.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    76b6:	42 e0       	ldi	r20, 0x02	; 2
    76b8:	61 ec       	ldi	r22, 0xC1	; 193
    76ba:	82 e0       	ldi	r24, 0x02	; 2

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
    76bc:	74 d1       	rcall	.+744    	; 0x79a6 <Endpoint_ConfigureEndpoint_Prv>
    76be:	42 e1       	ldi	r20, 0x12	; 18
    76c0:	61 e8       	ldi	r22, 0x81	; 129
    76c2:	83 e0       	ldi	r24, 0x03	; 3
    76c4:	70 d1       	rcall	.+736    	; 0x79a6 <Endpoint_ConfigureEndpoint_Prv>
    76c6:	42 e1       	ldi	r20, 0x12	; 18
    76c8:	60 e8       	ldi	r22, 0x80	; 128
    76ca:	84 e0       	ldi	r24, 0x04	; 4
    76cc:	6c c1       	rjmp	.+728    	; 0x79a6 <Endpoint_ConfigureEndpoint_Prv>

000076ce <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    76ce:	80 91 98 01 	lds	r24, 0x0198
    76d2:	98 2f       	mov	r25, r24
    76d4:	9f 77       	andi	r25, 0x7F	; 127
    76d6:	91 32       	cpi	r25, 0x21	; 33
    76d8:	c1 f5       	brne	.+112    	; 0x774a <EVENT_USB_Device_ControlRequest+0x7c>
				PORTC = ((PORTC & ~(LEDMask & LEDS_PORTC_LEDS)) |  (ActiveMask & LEDS_PORTC_LEDS));
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PINB  = (LEDMask & LEDS_PORTB_LEDS);
    76da:	91 e0       	ldi	r25, 0x01	; 1
    76dc:	93 b9       	out	0x03, r25	; 3
				PIND  = (LEDMask & LEDS_PORTD_LEDS);
    76de:	90 e2       	ldi	r25, 0x20	; 32
    76e0:	99 b9       	out	0x09, r25	; 9
				PINC  = (LEDMask & LEDS_PORTC_LEDS);
    76e2:	16 b8       	out	0x06, r1	; 6

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    76e4:	90 91 99 01 	lds	r25, 0x0199
    76e8:	91 32       	cpi	r25, 0x21	; 33
    76ea:	29 f0       	breq	.+10     	; 0x76f6 <EVENT_USB_Device_ControlRequest+0x28>
    76ec:	92 32       	cpi	r25, 0x22	; 34
    76ee:	29 f1       	breq	.+74     	; 0x773a <EVENT_USB_Device_ControlRequest+0x6c>
    76f0:	90 32       	cpi	r25, 0x20	; 32
    76f2:	59 f5       	brne	.+86     	; 0x774a <EVENT_USB_Device_ControlRequest+0x7c>
    76f4:	10 c0       	rjmp	.+32     	; 0x7716 <EVENT_USB_Device_ControlRequest+0x48>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    76f6:	81 3a       	cpi	r24, 0xA1	; 161
    76f8:	41 f5       	brne	.+80     	; 0x774a <EVENT_USB_Device_ControlRequest+0x7c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    76fa:	80 91 e8 00 	lds	r24, 0x00E8
    76fe:	87 7f       	andi	r24, 0xF7	; 247
    7700:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    7704:	67 e0       	ldi	r22, 0x07	; 7
    7706:	70 e0       	ldi	r23, 0x00	; 0
    7708:	81 e0       	ldi	r24, 0x01	; 1
    770a:	91 e0       	ldi	r25, 0x01	; 1
    770c:	a6 d0       	rcall	.+332    	; 0x785a <Endpoint_Write_Control_Stream_LE>
    770e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7712:	8b 77       	andi	r24, 0x7B	; 123
    7714:	0f c0       	rjmp	.+30     	; 0x7734 <EVENT_USB_Device_ControlRequest+0x66>
    7716:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    7718:	c1 f4       	brne	.+48     	; 0x774a <EVENT_USB_Device_ControlRequest+0x7c>
    771a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    771e:	87 7f       	andi	r24, 0xF7	; 247
    7720:	80 93 e8 00 	sts	0x00E8, r24
    7724:	67 e0       	ldi	r22, 0x07	; 7
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    7726:	70 e0       	ldi	r23, 0x00	; 0
    7728:	81 e0       	ldi	r24, 0x01	; 1
    772a:	91 e0       	ldi	r25, 0x01	; 1
    772c:	f7 d0       	rcall	.+494    	; 0x791c <Endpoint_Read_Control_Stream_LE>
    772e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7732:	8e 77       	andi	r24, 0x7E	; 126
    7734:	80 93 e8 00 	sts	0x00E8, r24
    7738:	08 95       	ret
    773a:	81 32       	cpi	r24, 0x21	; 33
    773c:	31 f4       	brne	.+12     	; 0x774a <EVENT_USB_Device_ControlRequest+0x7c>
				Endpoint_ClearIN();
			}

			break;
        case CDC_REQ_SetControlLineState:
	        if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    773e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7742:	87 7f       	andi	r24, 0xF7	; 247
    7744:	80 93 e8 00 	sts	0x00E8, r24
    7748:	42 c1       	rjmp	.+644    	; 0x79ce <Endpoint_ClearStatusStage>
    774a:	08 95       	ret

0000774c <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    774c:	29 2f       	mov	r18, r25
    774e:	30 e0       	ldi	r19, 0x00	; 0
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
    7750:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    7752:	22 30       	cpi	r18, 0x02	; 2
    7754:	31 05       	cpc	r19, r1
    7756:	39 f0       	breq	.+14     	; 0x7766 <CALLBACK_USB_GetDescriptor+0x1a>
    7758:	23 30       	cpi	r18, 0x03	; 3
    775a:	31 05       	cpc	r19, r1
    775c:	49 f0       	breq	.+18     	; 0x7770 <CALLBACK_USB_GetDescriptor+0x24>
    775e:	21 30       	cpi	r18, 0x01	; 1
    7760:	31 05       	cpc	r19, r1
    7762:	89 f0       	breq	.+34     	; 0x7786 <CALLBACK_USB_GetDescriptor+0x3a>
    7764:	0b c0       	rjmp	.+22     	; 0x777c <CALLBACK_USB_GetDescriptor+0x30>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    7766:	2e e3       	ldi	r18, 0x3E	; 62
    7768:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    776a:	8a e3       	ldi	r24, 0x3A	; 58
    776c:	91 e0       	ldi	r25, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    776e:	1e c0       	rjmp	.+60     	; 0x77ac <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
    7770:	88 23       	and	r24, r24
    7772:	71 f0       	breq	.+28     	; 0x7790 <CALLBACK_USB_GetDescriptor+0x44>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
    7774:	81 30       	cpi	r24, 0x01	; 1
    7776:	89 f0       	breq	.+34     	; 0x779a <CALLBACK_USB_GetDescriptor+0x4e>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
    7778:	82 30       	cpi	r24, 0x02	; 2
    777a:	a1 f0       	breq	.+40     	; 0x77a4 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    777c:	20 e0       	ldi	r18, 0x00	; 0
    777e:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    7780:	80 e0       	ldi	r24, 0x00	; 0
    7782:	90 e0       	ldi	r25, 0x00	; 0
    7784:	13 c0       	rjmp	.+38     	; 0x77ac <CALLBACK_USB_GetDescriptor+0x60>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    7786:	22 e1       	ldi	r18, 0x12	; 18
    7788:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    778a:	88 e7       	ldi	r24, 0x78	; 120
    778c:	91 e0       	ldi	r25, 0x01	; 1
    778e:	0e c0       	rjmp	.+28     	; 0x77ac <CALLBACK_USB_GetDescriptor+0x60>
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    7790:	24 e0       	ldi	r18, 0x04	; 4
    7792:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (DescriptorNumber == STRING_ID_Language)
			{
				Address = &LanguageString;
    7794:	86 e3       	ldi	r24, 0x36	; 54
    7796:	91 e0       	ldi	r25, 0x01	; 1
    7798:	09 c0       	rjmp	.+18     	; 0x77ac <CALLBACK_USB_GetDescriptor+0x60>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
    779a:	28 e1       	ldi	r18, 0x18	; 24
    779c:	30 e0       	ldi	r19, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Manufacturer)
			{
				Address = &ManufacturerString;
    779e:	8c e1       	ldi	r24, 0x1C	; 28
    77a0:	91 e0       	ldi	r25, 0x01	; 1
    77a2:	04 c0       	rjmp	.+8      	; 0x77ac <CALLBACK_USB_GetDescriptor+0x60>
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    77a4:	22 e1       	ldi	r18, 0x12	; 18
    77a6:	30 e0       	ldi	r19, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == STRING_ID_Product)
			{
				Address = &ProductString;
    77a8:	88 e0       	ldi	r24, 0x08	; 8
    77aa:	91 e0       	ldi	r25, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
    77ac:	fa 01       	movw	r30, r20
    77ae:	91 83       	std	Z+1, r25	; 0x01
    77b0:	80 83       	st	Z, r24
	return Size;
}
    77b2:	c9 01       	movw	r24, r18
    77b4:	08 95       	ret

000077b6 <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
    77b6:	07 b6       	in	r0, 0x37	; 55
    77b8:	00 fc       	sbrc	r0, 0
    77ba:	fd cf       	rjmp	.-6      	; 0x77b6 <BootloaderAPI_ErasePage>
    77bc:	f9 99       	sbic	0x1f, 1	; 31
    77be:	fe cf       	rjmp	.-4      	; 0x77bc <BootloaderAPI_ErasePage+0x6>
    77c0:	23 e0       	ldi	r18, 0x03	; 3
    77c2:	fb 01       	movw	r30, r22
    77c4:	20 93 57 00 	sts	0x0057, r18
    77c8:	e8 95       	spm
	boot_spm_busy_wait();
    77ca:	07 b6       	in	r0, 0x37	; 55
    77cc:	00 fc       	sbrc	r0, 0
    77ce:	fd cf       	rjmp	.-6      	; 0x77ca <BootloaderAPI_ErasePage+0x14>
	boot_rww_enable();
    77d0:	81 e1       	ldi	r24, 0x11	; 17
    77d2:	80 93 57 00 	sts	0x0057, r24
    77d6:	e8 95       	spm
    77d8:	08 95       	ret

000077da <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
    77da:	07 b6       	in	r0, 0x37	; 55
    77dc:	00 fc       	sbrc	r0, 0
    77de:	fd cf       	rjmp	.-6      	; 0x77da <BootloaderAPI_WritePage>
    77e0:	f9 99       	sbic	0x1f, 1	; 31
    77e2:	fe cf       	rjmp	.-4      	; 0x77e0 <BootloaderAPI_WritePage+0x6>
    77e4:	25 e0       	ldi	r18, 0x05	; 5
    77e6:	fb 01       	movw	r30, r22
    77e8:	20 93 57 00 	sts	0x0057, r18
    77ec:	e8 95       	spm
	boot_spm_busy_wait();
    77ee:	07 b6       	in	r0, 0x37	; 55
    77f0:	00 fc       	sbrc	r0, 0
    77f2:	fd cf       	rjmp	.-6      	; 0x77ee <BootloaderAPI_WritePage+0x14>
	boot_rww_enable();
    77f4:	81 e1       	ldi	r24, 0x11	; 17
    77f6:	80 93 57 00 	sts	0x0057, r24
    77fa:	e8 95       	spm
    77fc:	08 95       	ret

000077fe <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
    77fe:	07 b6       	in	r0, 0x37	; 55
    7800:	00 fc       	sbrc	r0, 0
    7802:	fd cf       	rjmp	.-6      	; 0x77fe <BootloaderAPI_FillWord>
    7804:	f9 99       	sbic	0x1f, 1	; 31
    7806:	fe cf       	rjmp	.-4      	; 0x7804 <BootloaderAPI_FillWord+0x6>
    7808:	21 e0       	ldi	r18, 0x01	; 1
    780a:	fb 01       	movw	r30, r22
    780c:	0a 01       	movw	r0, r20
    780e:	20 93 57 00 	sts	0x0057, r18
    7812:	e8 95       	spm
    7814:	11 24       	eor	r1, r1
    7816:	08 95       	ret

00007818 <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
    7818:	21 e2       	ldi	r18, 0x21	; 33
    781a:	fc 01       	movw	r30, r24
    781c:	20 93 57 00 	sts	0x0057, r18
    7820:	84 91       	lpm	r24, Z+
}
    7822:	08 95       	ret

00007824 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
    7824:	29 e0       	ldi	r18, 0x09	; 9
    7826:	fc 01       	movw	r30, r24
    7828:	20 93 57 00 	sts	0x0057, r18
    782c:	84 91       	lpm	r24, Z+
}
    782e:	08 95       	ret

00007830 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
    7830:	e1 e0       	ldi	r30, 0x01	; 1
    7832:	f0 e0       	ldi	r31, 0x00	; 0
    7834:	89 e0       	ldi	r24, 0x09	; 9
    7836:	80 93 57 00 	sts	0x0057, r24
    783a:	84 91       	lpm	r24, Z+
}
    783c:	08 95       	ret

0000783e <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
    783e:	07 b6       	in	r0, 0x37	; 55
    7840:	00 fc       	sbrc	r0, 0
    7842:	fd cf       	rjmp	.-6      	; 0x783e <BootloaderAPI_WriteLock>
    7844:	f9 99       	sbic	0x1f, 1	; 31
    7846:	fe cf       	rjmp	.-4      	; 0x7844 <BootloaderAPI_WriteLock+0x6>
    7848:	80 95       	com	r24
    784a:	99 e0       	ldi	r25, 0x09	; 9
    784c:	e1 e0       	ldi	r30, 0x01	; 1
    784e:	f0 e0       	ldi	r31, 0x00	; 0
    7850:	08 2e       	mov	r0, r24
    7852:	90 93 57 00 	sts	0x0057, r25
    7856:	e8 95       	spm
    7858:	08 95       	ret

0000785a <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    785a:	40 91 9e 01 	lds	r20, 0x019E
    785e:	50 91 9f 01 	lds	r21, 0x019F
    7862:	46 17       	cp	r20, r22
    7864:	57 07       	cpc	r21, r23
    7866:	48 f0       	brcs	.+18     	; 0x787a <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7868:	61 15       	cp	r22, r1
    786a:	71 05       	cpc	r23, r1
    786c:	39 f4       	brne	.+14     	; 0x787c <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    786e:	40 91 e8 00 	lds	r20, 0x00E8
    7872:	4e 77       	andi	r20, 0x7E	; 126
    7874:	40 93 e8 00 	sts	0x00E8, r20
    7878:	01 c0       	rjmp	.+2      	; 0x787c <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    787a:	ba 01       	movw	r22, r20
    787c:	fc 01       	movw	r30, r24
    787e:	40 e0       	ldi	r20, 0x00	; 0
    7880:	32 c0       	rjmp	.+100    	; 0x78e6 <Endpoint_Write_Control_Stream_LE+0x8c>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7882:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7884:	88 23       	and	r24, r24
    7886:	09 f4       	brne	.+2      	; 0x788a <Endpoint_Write_Control_Stream_LE+0x30>
    7888:	43 c0       	rjmp	.+134    	; 0x7910 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    788a:	85 30       	cpi	r24, 0x05	; 5
    788c:	09 f4       	brne	.+2      	; 0x7890 <Endpoint_Write_Control_Stream_LE+0x36>
    788e:	42 c0       	rjmp	.+132    	; 0x7914 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7890:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7894:	83 fd       	sbrc	r24, 3
    7896:	40 c0       	rjmp	.+128    	; 0x7918 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7898:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    789c:	82 fd       	sbrc	r24, 2
    789e:	32 c0       	rjmp	.+100    	; 0x7904 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    78a0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    78a4:	80 ff       	sbrs	r24, 0
    78a6:	1f c0       	rjmp	.+62     	; 0x78e6 <Endpoint_Write_Control_Stream_LE+0x8c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    78a8:	90 91 f3 00 	lds	r25, 0x00F3
    78ac:	80 91 f2 00 	lds	r24, 0x00F2
    78b0:	39 2f       	mov	r19, r25
    78b2:	20 e0       	ldi	r18, 0x00	; 0
    78b4:	a9 01       	movw	r20, r18
    78b6:	48 2b       	or	r20, r24
    78b8:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    78ba:	06 c0       	rjmp	.+12     	; 0x78c8 <Endpoint_Write_Control_Stream_LE+0x6e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    78bc:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    78be:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    78c2:	61 50       	subi	r22, 0x01	; 1
    78c4:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    78c6:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    78c8:	61 15       	cp	r22, r1
    78ca:	71 05       	cpc	r23, r1
    78cc:	19 f0       	breq	.+6      	; 0x78d4 <Endpoint_Write_Control_Stream_LE+0x7a>
    78ce:	88 30       	cpi	r24, 0x08	; 8
    78d0:	91 05       	cpc	r25, r1
    78d2:	a0 f3       	brcs	.-24     	; 0x78bc <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    78d4:	41 e0       	ldi	r20, 0x01	; 1
    78d6:	08 97       	sbiw	r24, 0x08	; 8
    78d8:	09 f0       	breq	.+2      	; 0x78dc <Endpoint_Write_Control_Stream_LE+0x82>
    78da:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    78dc:	80 91 e8 00 	lds	r24, 0x00E8
    78e0:	8e 77       	andi	r24, 0x7E	; 126
    78e2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    78e6:	61 15       	cp	r22, r1
    78e8:	71 05       	cpc	r23, r1
    78ea:	59 f6       	brne	.-106    	; 0x7882 <Endpoint_Write_Control_Stream_LE+0x28>
    78ec:	41 11       	cpse	r20, r1
    78ee:	c9 cf       	rjmp	.-110    	; 0x7882 <Endpoint_Write_Control_Stream_LE+0x28>
    78f0:	09 c0       	rjmp	.+18     	; 0x7904 <Endpoint_Write_Control_Stream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    78f2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    78f4:	88 23       	and	r24, r24
    78f6:	61 f0       	breq	.+24     	; 0x7910 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    78f8:	85 30       	cpi	r24, 0x05	; 5
    78fa:	61 f0       	breq	.+24     	; 0x7914 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    78fc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7900:	83 fd       	sbrc	r24, 3
    7902:	0a c0       	rjmp	.+20     	; 0x7918 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7904:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7908:	82 ff       	sbrs	r24, 2
    790a:	f3 cf       	rjmp	.-26     	; 0x78f2 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    790c:	80 e0       	ldi	r24, 0x00	; 0
    790e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7910:	82 e0       	ldi	r24, 0x02	; 2
    7912:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7914:	83 e0       	ldi	r24, 0x03	; 3
    7916:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7918:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    791a:	08 95       	ret

0000791c <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    791c:	61 15       	cp	r22, r1
    791e:	71 05       	cpc	r23, r1
    7920:	29 f4       	brne	.+10     	; 0x792c <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7922:	40 91 e8 00 	lds	r20, 0x00E8
    7926:	4b 77       	andi	r20, 0x7B	; 123
    7928:	40 93 e8 00 	sts	0x00E8, r20

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    792c:	ac 01       	movw	r20, r24
    792e:	27 c0       	rjmp	.+78     	; 0x797e <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7930:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7932:	88 23       	and	r24, r24
    7934:	b1 f1       	breq	.+108    	; 0x79a2 <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7936:	85 30       	cpi	r24, 0x05	; 5
    7938:	71 f1       	breq	.+92     	; 0x7996 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    793a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    793e:	83 fd       	sbrc	r24, 3
    7940:	2c c0       	rjmp	.+88     	; 0x799a <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7942:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7946:	82 ff       	sbrs	r24, 2
    7948:	f3 cf       	rjmp	.-26     	; 0x7930 <Endpoint_Read_Control_Stream_LE+0x14>
    794a:	fa 01       	movw	r30, r20
    794c:	07 c0       	rjmp	.+14     	; 0x795c <Endpoint_Read_Control_Stream_LE+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    794e:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7952:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    7954:	af 01       	movw	r20, r30
				Length--;
    7956:	61 50       	subi	r22, 0x01	; 1
    7958:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    795a:	61 f0       	breq	.+24     	; 0x7974 <Endpoint_Read_Control_Stream_LE+0x58>
    795c:	af 01       	movw	r20, r30
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    795e:	90 91 f3 00 	lds	r25, 0x00F3
    7962:	80 91 f2 00 	lds	r24, 0x00F2
    7966:	39 2f       	mov	r19, r25
    7968:	20 e0       	ldi	r18, 0x00	; 0
    796a:	d9 01       	movw	r26, r18
    796c:	a8 2b       	or	r26, r24
    796e:	cd 01       	movw	r24, r26
    7970:	89 2b       	or	r24, r25
    7972:	69 f7       	brne	.-38     	; 0x794e <Endpoint_Read_Control_Stream_LE+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7974:	80 91 e8 00 	lds	r24, 0x00E8
    7978:	8b 77       	andi	r24, 0x7B	; 123
    797a:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    797e:	61 15       	cp	r22, r1
    7980:	71 05       	cpc	r23, r1
    7982:	b1 f6       	brne	.-84     	; 0x7930 <Endpoint_Read_Control_Stream_LE+0x14>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7984:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7988:	80 fd       	sbrc	r24, 0
    798a:	09 c0       	rjmp	.+18     	; 0x799e <Endpoint_Read_Control_Stream_LE+0x82>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    798c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    798e:	88 23       	and	r24, r24
    7990:	41 f0       	breq	.+16     	; 0x79a2 <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7992:	85 30       	cpi	r24, 0x05	; 5
    7994:	b9 f7       	brne	.-18     	; 0x7984 <Endpoint_Read_Control_Stream_LE+0x68>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7996:	83 e0       	ldi	r24, 0x03	; 3
    7998:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    799a:	81 e0       	ldi	r24, 0x01	; 1
    799c:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    799e:	80 e0       	ldi	r24, 0x00	; 0
    79a0:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    79a2:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    79a4:	08 95       	ret

000079a6 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    79a6:	8f 70       	andi	r24, 0x0F	; 15
    79a8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    79ac:	eb ee       	ldi	r30, 0xEB	; 235
    79ae:	f0 e0       	ldi	r31, 0x00	; 0
    79b0:	80 81       	ld	r24, Z
    79b2:	81 60       	ori	r24, 0x01	; 1
    79b4:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    79b6:	ed ee       	ldi	r30, 0xED	; 237
    79b8:	f0 e0       	ldi	r31, 0x00	; 0
    79ba:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    79bc:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    79c0:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    79c2:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    79c6:	88 1f       	adc	r24, r24
    79c8:	88 27       	eor	r24, r24
    79ca:	88 1f       	adc	r24, r24
    79cc:	08 95       	ret

000079ce <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    79ce:	80 91 98 01 	lds	r24, 0x0198
    79d2:	87 fd       	sbrc	r24, 7
    79d4:	05 c0       	rjmp	.+10     	; 0x79e0 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    79d6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    79da:	80 ff       	sbrs	r24, 0
    79dc:	0d c0       	rjmp	.+26     	; 0x79f8 <Endpoint_ClearStatusStage+0x2a>
    79de:	10 c0       	rjmp	.+32     	; 0x7a00 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    79e0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    79e4:	82 fd       	sbrc	r24, 2
    79e6:	04 c0       	rjmp	.+8      	; 0x79f0 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    79e8:	8e b3       	in	r24, 0x1e	; 30
    79ea:	81 11       	cpse	r24, r1
    79ec:	f9 cf       	rjmp	.-14     	; 0x79e0 <Endpoint_ClearStatusStage+0x12>
    79ee:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    79f0:	80 91 e8 00 	lds	r24, 0x00E8
    79f4:	8b 77       	andi	r24, 0x7B	; 123
    79f6:	07 c0       	rjmp	.+14     	; 0x7a06 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    79f8:	8e b3       	in	r24, 0x1e	; 30
    79fa:	81 11       	cpse	r24, r1
    79fc:	ec cf       	rjmp	.-40     	; 0x79d6 <Endpoint_ClearStatusStage+0x8>
    79fe:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7a00:	80 91 e8 00 	lds	r24, 0x00E8
    7a04:	8e 77       	andi	r24, 0x7E	; 126
    7a06:	80 93 e8 00 	sts	0x00E8, r24
    7a0a:	08 95       	ret

00007a0c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    7a0c:	0f 93       	push	r16
    7a0e:	1f 93       	push	r17
    7a10:	cf 93       	push	r28
    7a12:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    7a14:	46 d0       	rcall	.+140    	; 0x7aa2 <USB_INT_DisableAllInterrupts>
    7a16:	4d d0       	rcall	.+154    	; 0x7ab2 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7a18:	c8 ed       	ldi	r28, 0xD8	; 216
    7a1a:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    7a1c:	88 81       	ld	r24, Y
    7a1e:	8f 77       	andi	r24, 0x7F	; 127
    7a20:	88 83       	st	Y, r24
    7a22:	88 81       	ld	r24, Y
    7a24:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    7a26:	88 83       	st	Y, r24
    7a28:	88 81       	ld	r24, Y
    7a2a:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7a2c:	88 83       	st	Y, r24
    7a2e:	19 bc       	out	0x29, r1	; 41
    7a30:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a32:	10 92 96 01 	sts	0x0196, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    7a36:	00 ee       	ldi	r16, 0xE0	; 224
    7a38:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7a3a:	f8 01       	movw	r30, r16
    7a3c:	80 81       	ld	r24, Z
    7a3e:	8b 7f       	andi	r24, 0xFB	; 251
    7a40:	80 83       	st	Z, r24
    7a42:	88 81       	ld	r24, Y
    7a44:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7a46:	88 83       	st	Y, r24
    7a48:	42 e0       	ldi	r20, 0x02	; 2
    7a4a:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7a4c:	80 e0       	ldi	r24, 0x00	; 0
    7a4e:	ab df       	rcall	.-170    	; 0x79a6 <Endpoint_ConfigureEndpoint_Prv>
    7a50:	e1 ee       	ldi	r30, 0xE1	; 225
    7a52:	f0 e0       	ldi	r31, 0x00	; 0
    7a54:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7a56:	8e 7f       	andi	r24, 0xFE	; 254
    7a58:	80 83       	st	Z, r24
    7a5a:	e2 ee       	ldi	r30, 0xE2	; 226
    7a5c:	f0 e0       	ldi	r31, 0x00	; 0
    7a5e:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7a60:	81 60       	ori	r24, 0x01	; 1
    7a62:	80 83       	st	Z, r24
    7a64:	80 81       	ld	r24, Z
    7a66:	88 60       	ori	r24, 0x08	; 8
    7a68:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7a6a:	f8 01       	movw	r30, r16
    7a6c:	80 81       	ld	r24, Z
    7a6e:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    7a70:	80 83       	st	Z, r24
    7a72:	88 81       	ld	r24, Y
    7a74:	80 61       	ori	r24, 0x10	; 16
    7a76:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    7a78:	df 91       	pop	r29
    7a7a:	cf 91       	pop	r28
    7a7c:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7a7e:	0f 91       	pop	r16
    7a80:	08 95       	ret

00007a82 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    7a82:	e8 ed       	ldi	r30, 0xD8	; 216
    7a84:	f0 e0       	ldi	r31, 0x00	; 0
    7a86:	80 81       	ld	r24, Z
    7a88:	8f 7e       	andi	r24, 0xEF	; 239
    7a8a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    7a8c:	e7 ed       	ldi	r30, 0xD7	; 215
    7a8e:	f0 e0       	ldi	r31, 0x00	; 0
    7a90:	80 81       	ld	r24, Z
    7a92:	81 60       	ori	r24, 0x01	; 1
    7a94:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    7a96:	84 e0       	ldi	r24, 0x04	; 4
    7a98:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    7a9a:	81 e0       	ldi	r24, 0x01	; 1
    7a9c:	80 93 97 01 	sts	0x0197, r24

	USB_ResetInterface();
    7aa0:	b5 cf       	rjmp	.-150    	; 0x7a0c <USB_ResetInterface>

00007aa2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7aa2:	e8 ed       	ldi	r30, 0xD8	; 216
    7aa4:	f0 e0       	ldi	r31, 0x00	; 0
    7aa6:	80 81       	ld	r24, Z
    7aa8:	8e 7f       	andi	r24, 0xFE	; 254
    7aaa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    7aac:	10 92 e2 00 	sts	0x00E2, r1
    7ab0:	08 95       	ret

00007ab2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7ab2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7ab6:	10 92 e1 00 	sts	0x00E1, r1
    7aba:	08 95       	ret

00007abc <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    7abc:	1f 92       	push	r1
    7abe:	0f 92       	push	r0
    7ac0:	0f b6       	in	r0, 0x3f	; 63
    7ac2:	0f 92       	push	r0
    7ac4:	11 24       	eor	r1, r1
    7ac6:	2f 93       	push	r18
    7ac8:	3f 93       	push	r19
    7aca:	4f 93       	push	r20
    7acc:	5f 93       	push	r21
    7ace:	6f 93       	push	r22
    7ad0:	7f 93       	push	r23
    7ad2:	8f 93       	push	r24
    7ad4:	9f 93       	push	r25
    7ad6:	af 93       	push	r26
    7ad8:	bf 93       	push	r27
    7ada:	ef 93       	push	r30
    7adc:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    7ade:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    7ae2:	80 ff       	sbrs	r24, 0
    7ae4:	1b c0       	rjmp	.+54     	; 0x7b1c <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    7ae6:	80 91 d8 00 	lds	r24, 0x00D8
    7aea:	80 ff       	sbrs	r24, 0
    7aec:	17 c0       	rjmp	.+46     	; 0x7b1c <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    7aee:	80 91 da 00 	lds	r24, 0x00DA
    7af2:	8e 7f       	andi	r24, 0xFE	; 254
    7af4:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7af8:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    7afc:	80 ff       	sbrs	r24, 0
    7afe:	0b c0       	rjmp	.+22     	; 0x7b16 <__vector_10+0x5a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7b00:	80 e1       	ldi	r24, 0x10	; 16
    7b02:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7b04:	82 e1       	ldi	r24, 0x12	; 18
    7b06:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    7b08:	09 b4       	in	r0, 0x29	; 41
    7b0a:	00 fe       	sbrs	r0, 0
    7b0c:	fd cf       	rjmp	.-6      	; 0x7b08 <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    7b0e:	81 e0       	ldi	r24, 0x01	; 1
    7b10:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    7b12:	98 d1       	rcall	.+816    	; 0x7e44 <USB_Event_Stub>
    7b14:	03 c0       	rjmp	.+6      	; 0x7b1c <__vector_10+0x60>
    7b16:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7b18:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    7b1a:	94 d1       	rcall	.+808    	; 0x7e44 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
    7b1c:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7b20:	80 ff       	sbrs	r24, 0
    7b22:	17 c0       	rjmp	.+46     	; 0x7b52 <__vector_10+0x96>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7b24:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7b28:	80 ff       	sbrs	r24, 0
    7b2a:	13 c0       	rjmp	.+38     	; 0x7b52 <__vector_10+0x96>
    7b2c:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7b30:	8e 7f       	andi	r24, 0xFE	; 254
    7b32:	80 93 e2 00 	sts	0x00E2, r24
    7b36:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7b3a:	80 61       	ori	r24, 0x10	; 16
    7b3c:	80 93 e2 00 	sts	0x00E2, r24
    7b40:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    7b44:	80 62       	ori	r24, 0x20	; 32
    7b46:	80 93 d8 00 	sts	0x00D8, r24
    7b4a:	19 bc       	out	0x29, r1	; 41
    7b4c:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7b4e:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7b50:	79 d1       	rcall	.+754    	; 0x7e44 <USB_Event_Stub>
    7b52:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    7b56:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7b58:	2e c0       	rjmp	.+92     	; 0x7bb6 <__vector_10+0xfa>
    7b5a:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7b5e:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7b60:	2a c0       	rjmp	.+84     	; 0x7bb6 <__vector_10+0xfa>
    7b62:	80 e1       	ldi	r24, 0x10	; 16
    7b64:	89 bd       	out	0x29, r24	; 41
    7b66:	82 e1       	ldi	r24, 0x12	; 18

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7b68:	89 bd       	out	0x29, r24	; 41
    7b6a:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7b6c:	00 fe       	sbrs	r0, 0
    7b6e:	fd cf       	rjmp	.-6      	; 0x7b6a <__vector_10+0xae>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7b70:	80 91 d8 00 	lds	r24, 0x00D8
    7b74:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7b76:	80 93 d8 00 	sts	0x00D8, r24
    7b7a:	80 91 e1 00 	lds	r24, 0x00E1
    7b7e:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7b80:	80 93 e1 00 	sts	0x00E1, r24
    7b84:	80 91 e2 00 	lds	r24, 0x00E2
    7b88:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7b8a:	80 93 e2 00 	sts	0x00E2, r24
    7b8e:	80 91 e2 00 	lds	r24, 0x00E2
    7b92:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7b94:	80 93 e2 00 	sts	0x00E2, r24
    7b98:	80 91 96 01 	lds	r24, 0x0196
    7b9c:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7b9e:	11 f0       	breq	.+4      	; 0x7ba4 <__vector_10+0xe8>
    7ba0:	84 e0       	ldi	r24, 0x04	; 4
    7ba2:	07 c0       	rjmp	.+14     	; 0x7bb2 <__vector_10+0xf6>
    7ba4:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
    7ba8:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7baa:	02 c0       	rjmp	.+4      	; 0x7bb0 <__vector_10+0xf4>
    7bac:	83 e0       	ldi	r24, 0x03	; 3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    7bae:	01 c0       	rjmp	.+2      	; 0x7bb2 <__vector_10+0xf6>
    7bb0:	81 e0       	ldi	r24, 0x01	; 1
    7bb2:	8e bb       	out	0x1e, r24	; 30
    7bb4:	47 d1       	rcall	.+654    	; 0x7e44 <USB_Event_Stub>
    7bb6:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7bba:	83 ff       	sbrs	r24, 3
    7bbc:	21 c0       	rjmp	.+66     	; 0x7c00 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7bbe:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7bc2:	83 ff       	sbrs	r24, 3
    7bc4:	1d c0       	rjmp	.+58     	; 0x7c00 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7bc6:	80 91 e1 00 	lds	r24, 0x00E1
    7bca:	87 7f       	andi	r24, 0xF7	; 247
    7bcc:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7bd0:	82 e0       	ldi	r24, 0x02	; 2
    7bd2:	8e bb       	out	0x1e, r24	; 30
    7bd4:	10 92 96 01 	sts	0x0196, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7bd8:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    7bdc:	8e 7f       	andi	r24, 0xFE	; 254
    7bde:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7be2:	80 91 e2 00 	lds	r24, 0x00E2
    7be6:	8e 7f       	andi	r24, 0xFE	; 254
    7be8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7bec:	80 91 e2 00 	lds	r24, 0x00E2
    7bf0:	80 61       	ori	r24, 0x10	; 16
    7bf2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7bf6:	42 e0       	ldi	r20, 0x02	; 2
    7bf8:	60 e0       	ldi	r22, 0x00	; 0
    7bfa:	80 e0       	ldi	r24, 0x00	; 0
    7bfc:	d4 de       	rcall	.-600    	; 0x79a6 <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7bfe:	22 d1       	rcall	.+580    	; 0x7e44 <USB_Event_Stub>
    7c00:	ff 91       	pop	r31
    7c02:	ef 91       	pop	r30
    7c04:	bf 91       	pop	r27
    7c06:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7c08:	9f 91       	pop	r25
    7c0a:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7c0c:	7f 91       	pop	r23
    7c0e:	6f 91       	pop	r22
    7c10:	5f 91       	pop	r21
    7c12:	4f 91       	pop	r20
    7c14:	3f 91       	pop	r19
    7c16:	2f 91       	pop	r18
    7c18:	0f 90       	pop	r0
    7c1a:	0f be       	out	0x3f, r0	; 63
    7c1c:	0f 90       	pop	r0
    7c1e:	1f 90       	pop	r1
    7c20:	18 95       	reti

00007c22 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7c22:	1f 93       	push	r17
    7c24:	cf 93       	push	r28
    7c26:	df 93       	push	r29
    7c28:	00 d0       	rcall	.+0      	; 0x7c2a <USB_Device_ProcessControlRequest+0x8>
    7c2a:	cd b7       	in	r28, 0x3d	; 61
    7c2c:	de b7       	in	r29, 0x3e	; 62
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    7c2e:	e8 e9       	ldi	r30, 0x98	; 152
    7c30:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c32:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7c36:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7c38:	81 e0       	ldi	r24, 0x01	; 1
    7c3a:	e0 3a       	cpi	r30, 0xA0	; 160
    7c3c:	f8 07       	cpc	r31, r24
    7c3e:	c9 f7       	brne	.-14     	; 0x7c32 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7c40:	46 dd       	rcall	.-1396   	; 0x76ce <EVENT_USB_Device_ControlRequest>
    7c42:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c46:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    7c48:	e9 c0       	rjmp	.+466    	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7c4a:	80 91 98 01 	lds	r24, 0x0198
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7c4e:	90 91 99 01 	lds	r25, 0x0199

		switch (USB_ControlRequest.bRequest)
    7c52:	95 30       	cpi	r25, 0x05	; 5
    7c54:	09 f4       	brne	.+2      	; 0x7c58 <USB_Device_ProcessControlRequest+0x36>
    7c56:	70 c0       	rjmp	.+224    	; 0x7d38 <USB_Device_ProcessControlRequest+0x116>
    7c58:	38 f4       	brcc	.+14     	; 0x7c68 <USB_Device_ProcessControlRequest+0x46>
    7c5a:	91 30       	cpi	r25, 0x01	; 1
    7c5c:	79 f1       	breq	.+94     	; 0x7cbc <USB_Device_ProcessControlRequest+0x9a>
    7c5e:	70 f0       	brcs	.+28     	; 0x7c7c <USB_Device_ProcessControlRequest+0x5a>
    7c60:	93 30       	cpi	r25, 0x03	; 3
    7c62:	09 f0       	breq	.+2      	; 0x7c66 <USB_Device_ProcessControlRequest+0x44>
    7c64:	db c0       	rjmp	.+438    	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7c66:	2a c0       	rjmp	.+84     	; 0x7cbc <USB_Device_ProcessControlRequest+0x9a>
    7c68:	98 30       	cpi	r25, 0x08	; 8
    7c6a:	09 f4       	brne	.+2      	; 0x7c6e <USB_Device_ProcessControlRequest+0x4c>
    7c6c:	aa c0       	rjmp	.+340    	; 0x7dc2 <USB_Device_ProcessControlRequest+0x1a0>
    7c6e:	99 30       	cpi	r25, 0x09	; 9
    7c70:	09 f4       	brne	.+2      	; 0x7c74 <USB_Device_ProcessControlRequest+0x52>
    7c72:	b9 c0       	rjmp	.+370    	; 0x7de6 <USB_Device_ProcessControlRequest+0x1c4>
    7c74:	96 30       	cpi	r25, 0x06	; 6
    7c76:	09 f0       	breq	.+2      	; 0x7c7a <USB_Device_ProcessControlRequest+0x58>
    7c78:	d1 c0       	rjmp	.+418    	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7c7a:	83 c0       	rjmp	.+262    	; 0x7d82 <USB_Device_ProcessControlRequest+0x160>
    7c7c:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c7e:	99 f0       	breq	.+38     	; 0x7ca6 <USB_Device_ProcessControlRequest+0x84>
    7c80:	82 38       	cpi	r24, 0x82	; 130
    7c82:	09 f0       	breq	.+2      	; 0x7c86 <USB_Device_ProcessControlRequest+0x64>
    7c84:	cb c0       	rjmp	.+406    	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7c86:	80 91 9c 01 	lds	r24, 0x019C
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c8a:	90 91 9d 01 	lds	r25, 0x019D
    7c8e:	8f 70       	andi	r24, 0x0F	; 15
    7c90:	99 27       	eor	r25, r25
    7c92:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7c96:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7c9a:	95 fb       	bst	r25, 5
    7c9c:	99 27       	eor	r25, r25
    7c9e:	90 f9       	bld	r25, 0
    7ca0:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7ca4:	01 c0       	rjmp	.+2      	; 0x7ca8 <USB_Device_ProcessControlRequest+0x86>
    7ca6:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    7ca8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7cac:	87 7f       	andi	r24, 0xF7	; 247
    7cae:	80 93 e8 00 	sts	0x00E8, r24
    7cb2:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7cb6:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    7cba:	8e c0       	rjmp	.+284    	; 0x7dd8 <USB_Device_ProcessControlRequest+0x1b6>
    7cbc:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7cbe:	19 f0       	breq	.+6      	; 0x7cc6 <USB_Device_ProcessControlRequest+0xa4>
    7cc0:	82 30       	cpi	r24, 0x02	; 2
    7cc2:	09 f0       	breq	.+2      	; 0x7cc6 <USB_Device_ProcessControlRequest+0xa4>
    7cc4:	ab c0       	rjmp	.+342    	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7cc6:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7cc8:	82 30       	cpi	r24, 0x02	; 2
    7cca:	09 f0       	breq	.+2      	; 0x7cce <USB_Device_ProcessControlRequest+0xac>
    7ccc:	a7 c0       	rjmp	.+334    	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7cce:	80 91 9a 01 	lds	r24, 0x019A

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7cd2:	81 11       	cpse	r24, r1
    7cd4:	2b c0       	rjmp	.+86     	; 0x7d2c <USB_Device_ProcessControlRequest+0x10a>
    7cd6:	80 91 9c 01 	lds	r24, 0x019C
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7cda:	90 91 9d 01 	lds	r25, 0x019D
    7cde:	8f 70       	andi	r24, 0x0F	; 15
    7ce0:	99 27       	eor	r25, r25
    7ce2:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7ce4:	09 f4       	brne	.+2      	; 0x7ce8 <USB_Device_ProcessControlRequest+0xc6>
    7ce6:	9a c0       	rjmp	.+308    	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7ce8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7cec:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7cf0:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7cf2:	1c c0       	rjmp	.+56     	; 0x7d2c <USB_Device_ProcessControlRequest+0x10a>
    7cf4:	20 91 99 01 	lds	r18, 0x0199
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7cf8:	23 30       	cpi	r18, 0x03	; 3
    7cfa:	21 f4       	brne	.+8      	; 0x7d04 <USB_Device_ProcessControlRequest+0xe2>
    7cfc:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7d00:	80 62       	ori	r24, 0x20	; 32
    7d02:	12 c0       	rjmp	.+36     	; 0x7d28 <USB_Device_ProcessControlRequest+0x106>
    7d04:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7d08:	90 61       	ori	r25, 0x10	; 16
    7d0a:	90 93 eb 00 	sts	0x00EB, r25
    7d0e:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    7d10:	30 e0       	ldi	r19, 0x00	; 0
    7d12:	01 c0       	rjmp	.+2      	; 0x7d16 <USB_Device_ProcessControlRequest+0xf4>
    7d14:	22 0f       	add	r18, r18
    7d16:	8a 95       	dec	r24
    7d18:	ea f7       	brpl	.-6      	; 0x7d14 <USB_Device_ProcessControlRequest+0xf2>
    7d1a:	20 93 ea 00 	sts	0x00EA, r18
    7d1e:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    7d22:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7d26:	88 60       	ori	r24, 0x08	; 8
    7d28:	80 93 eb 00 	sts	0x00EB, r24
    7d2c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7d30:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d34:	87 7f       	andi	r24, 0xF7	; 247
    7d36:	53 c0       	rjmp	.+166    	; 0x7dde <USB_Device_ProcessControlRequest+0x1bc>
    7d38:	81 11       	cpse	r24, r1
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d3a:	70 c0       	rjmp	.+224    	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7d3c:	80 91 9a 01 	lds	r24, 0x019A
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    7d40:	90 91 9b 01 	lds	r25, 0x019B
    7d44:	8f 77       	andi	r24, 0x7F	; 127
    7d46:	99 27       	eor	r25, r25
    7d48:	18 2f       	mov	r17, r24
    7d4a:	90 91 e3 00 	lds	r25, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7d4e:	90 78       	andi	r25, 0x80	; 128
    7d50:	98 2b       	or	r25, r24
    7d52:	90 93 e3 00 	sts	0x00E3, r25
    7d56:	80 91 e8 00 	lds	r24, 0x00E8
    7d5a:	87 7f       	andi	r24, 0xF7	; 247
    7d5c:	80 93 e8 00 	sts	0x00E8, r24
    7d60:	36 de       	rcall	.-916    	; 0x79ce <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d62:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d66:	80 ff       	sbrs	r24, 0
    7d68:	fc cf       	rjmp	.-8      	; 0x7d62 <USB_Device_ProcessControlRequest+0x140>

	while (!(Endpoint_IsINReady()));
    7d6a:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    7d6e:	80 68       	ori	r24, 0x80	; 128
    7d70:	80 93 e3 00 	sts	0x00E3, r24
    7d74:	11 23       	and	r17, r17
    7d76:	11 f0       	breq	.+4      	; 0x7d7c <USB_Device_ProcessControlRequest+0x15a>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7d78:	83 e0       	ldi	r24, 0x03	; 3
    7d7a:	01 c0       	rjmp	.+2      	; 0x7d7e <USB_Device_ProcessControlRequest+0x15c>
    7d7c:	82 e0       	ldi	r24, 0x02	; 2
    7d7e:	8e bb       	out	0x1e, r24	; 30
    7d80:	4d c0       	rjmp	.+154    	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7d82:	80 58       	subi	r24, 0x80	; 128
    7d84:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d86:	08 f0       	brcs	.+2      	; 0x7d8a <USB_Device_ProcessControlRequest+0x168>
    7d88:	49 c0       	rjmp	.+146    	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7d8a:	ae 01       	movw	r20, r28
    7d8c:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    7d90:	60 91 9c 01 	lds	r22, 0x019C
    7d94:	80 91 9a 01 	lds	r24, 0x019A
    7d98:	90 91 9b 01 	lds	r25, 0x019B
    7d9c:	d7 dc       	rcall	.-1618   	; 0x774c <CALLBACK_USB_GetDescriptor>
    7d9e:	00 97       	sbiw	r24, 0x00	; 0
    7da0:	09 f4       	brne	.+2      	; 0x7da4 <USB_Device_ProcessControlRequest+0x182>
    7da2:	3c c0       	rjmp	.+120    	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7da4:	20 91 e8 00 	lds	r18, 0x00E8
    7da8:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7daa:	20 93 e8 00 	sts	0x00E8, r18
    7dae:	bc 01       	movw	r22, r24
    7db0:	89 81       	ldd	r24, Y+1	; 0x01
    7db2:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7db4:	52 dd       	rcall	.-1372   	; 0x785a <Endpoint_Write_Control_Stream_LE>
    7db6:	80 91 e8 00 	lds	r24, 0x00E8
    7dba:	8b 77       	andi	r24, 0x7B	; 123
    7dbc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7dc0:	2d c0       	rjmp	.+90     	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7dc2:	80 38       	cpi	r24, 0x80	; 128
    7dc4:	59 f5       	brne	.+86     	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7dc6:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7dca:	87 7f       	andi	r24, 0xF7	; 247
    7dcc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7dd0:	80 91 96 01 	lds	r24, 0x0196
    7dd4:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7dd8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7ddc:	8e 77       	andi	r24, 0x7E	; 126
    7dde:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7de2:	f5 dd       	rcall	.-1046   	; 0x79ce <Endpoint_ClearStatusStage>
    7de4:	1b c0       	rjmp	.+54     	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7de6:	81 11       	cpse	r24, r1
    7de8:	19 c0       	rjmp	.+50     	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7dea:	90 91 9a 01 	lds	r25, 0x019A
    7dee:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7df0:	a8 f4       	brcc	.+42     	; 0x7e1c <USB_Device_ProcessControlRequest+0x1fa>
    7df2:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7df6:	87 7f       	andi	r24, 0xF7	; 247
    7df8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7dfc:	90 93 96 01 	sts	0x0196, r25
    7e00:	e6 dd       	rcall	.-1076   	; 0x79ce <Endpoint_ClearStatusStage>
    7e02:	80 91 96 01 	lds	r24, 0x0196
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7e06:	81 11       	cpse	r24, r1
    7e08:	04 c0       	rjmp	.+8      	; 0x7e12 <USB_Device_ProcessControlRequest+0x1f0>

	Endpoint_ClearStatusStage();
    7e0a:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    7e0e:	87 ff       	sbrs	r24, 7
    7e10:	02 c0       	rjmp	.+4      	; 0x7e16 <USB_Device_ProcessControlRequest+0x1f4>
    7e12:	84 e0       	ldi	r24, 0x04	; 4
    7e14:	01 c0       	rjmp	.+2      	; 0x7e18 <USB_Device_ProcessControlRequest+0x1f6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7e16:	81 e0       	ldi	r24, 0x01	; 1
    7e18:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7e1a:	4d dc       	rcall	.-1894   	; 0x76b6 <EVENT_USB_Device_ConfigurationChanged>
    7e1c:	80 91 e8 00 	lds	r24, 0x00E8
    7e20:	83 ff       	sbrs	r24, 3
    7e22:	0a c0       	rjmp	.+20     	; 0x7e38 <USB_Device_ProcessControlRequest+0x216>
    7e24:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
    7e28:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e2a:	80 93 e8 00 	sts	0x00E8, r24
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7e2e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e32:	80 62       	ori	r24, 0x20	; 32
    7e34:	80 93 eb 00 	sts	0x00EB, r24
    7e38:	0f 90       	pop	r0
    7e3a:	0f 90       	pop	r0
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7e3c:	df 91       	pop	r29
    7e3e:	cf 91       	pop	r28
    7e40:	1f 91       	pop	r17
    7e42:	08 95       	ret

00007e44 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7e44:	08 95       	ret

00007e46 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7e46:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    7e48:	8e b3       	in	r24, 0x1e	; 30
    7e4a:	88 23       	and	r24, r24
    7e4c:	a9 f0       	breq	.+42     	; 0x7e78 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7e4e:	80 91 e9 00 	lds	r24, 0x00E9
    7e52:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    7e54:	90 91 ec 00 	lds	r25, 0x00EC
    7e58:	90 ff       	sbrs	r25, 0
    7e5a:	02 c0       	rjmp	.+4      	; 0x7e60 <USB_USBTask+0x1a>
    7e5c:	90 e8       	ldi	r25, 0x80	; 128
    7e5e:	01 c0       	rjmp	.+2      	; 0x7e62 <USB_USBTask+0x1c>
    7e60:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7e62:	c9 2f       	mov	r28, r25
    7e64:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7e66:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e6a:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    7e6e:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    7e70:	d8 de       	rcall	.-592    	; 0x7c22 <USB_Device_ProcessControlRequest>
    7e72:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7e74:	c0 93 e9 00 	sts	0x00E9, r28
    7e78:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    7e7a:	08 95       	ret

00007e7c <__eerd_byte_m32u4>:
    7e7c:	f9 99       	sbic	0x1f, 1	; 31
    7e7e:	fe cf       	rjmp	.-4      	; 0x7e7c <__eerd_byte_m32u4>
    7e80:	92 bd       	out	0x22, r25	; 34
    7e82:	81 bd       	out	0x21, r24	; 33
    7e84:	f8 9a       	sbi	0x1f, 0	; 31
    7e86:	99 27       	eor	r25, r25
    7e88:	80 b5       	in	r24, 0x20	; 32
    7e8a:	08 95       	ret

00007e8c <__eewr_byte_m32u4>:
    7e8c:	26 2f       	mov	r18, r22

00007e8e <__eewr_r18_m32u4>:
    7e8e:	f9 99       	sbic	0x1f, 1	; 31
    7e90:	fe cf       	rjmp	.-4      	; 0x7e8e <__eewr_r18_m32u4>
    7e92:	1f ba       	out	0x1f, r1	; 31
    7e94:	92 bd       	out	0x22, r25	; 34
    7e96:	81 bd       	out	0x21, r24	; 33
    7e98:	20 bd       	out	0x20, r18	; 32
    7e9a:	0f b6       	in	r0, 0x3f	; 63
    7e9c:	f8 94       	cli
    7e9e:	fa 9a       	sbi	0x1f, 2	; 31
    7ea0:	f9 9a       	sbi	0x1f, 1	; 31
    7ea2:	0f be       	out	0x3f, r0	; 63
    7ea4:	01 96       	adiw	r24, 0x01	; 1
    7ea6:	08 95       	ret

00007ea8 <_exit>:
    7ea8:	f8 94       	cli

00007eaa <__stop_program>:
    7eaa:	ff cf       	rjmp	.-2      	; 0x7eaa <__stop_program>

Disassembly of section .apitable_trampolines:

00007fa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
    7fa0:	0a cc       	rjmp	.-2028   	; 0x77b6 <BootloaderAPI_ErasePage>

00007fa2 <BootloaderAPI_WritePage_Trampoline>:
    7fa2:	1b cc       	rjmp	.-1994   	; 0x77da <BootloaderAPI_WritePage>

00007fa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
    7fa4:	2c cc       	rjmp	.-1960   	; 0x77fe <BootloaderAPI_FillWord>

00007fa6 <BootloaderAPI_ReadSignature_Trampoline>:
    7fa6:	38 cc       	rjmp	.-1936   	; 0x7818 <BootloaderAPI_ReadSignature>

00007fa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
    7fa8:	3d cc       	rjmp	.-1926   	; 0x7824 <BootloaderAPI_ReadFuse>

00007faa <BootloaderAPI_ReadLock_Trampoline>:
    7faa:	42 cc       	rjmp	.-1916   	; 0x7830 <BootloaderAPI_ReadLock>

00007fac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
    7fac:	48 cc       	rjmp	.-1904   	; 0x783e <BootloaderAPI_WriteLock>

00007fae <BootloaderAPI_UNUSED1>:
    7fae:	08 95       	ret

00007fb0 <BootloaderAPI_UNUSED2>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
    7fb0:	08 95       	ret

00007fb2 <BootloaderAPI_UNUSED3>:
    7fb2:	08 95       	ret

00007fb4 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
    7fb4:	08 95       	ret

00007fb6 <BootloaderAPI_UNUSED5>:
    7fb6:	08 95       	ret

Disassembly of section .apitable_jumptable:

00007fe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
    7fe0:	df cf       	rjmp	.-66     	; 0x7fa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
    7fe2:	df cf       	rjmp	.-66     	; 0x7fa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
    7fe4:	df cf       	rjmp	.-66     	; 0x7fa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
    7fe6:	df cf       	rjmp	.-66     	; 0x7fa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
    7fe8:	df cf       	rjmp	.-66     	; 0x7fa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
    7fea:	df cf       	rjmp	.-66     	; 0x7faa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
    7fec:	df cf       	rjmp	.-66     	; 0x7fac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
    7fee:	df cf       	rjmp	.-66     	; 0x7fae <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
    7ff0:	df cf       	rjmp	.-66     	; 0x7fb0 <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
    7ff2:	df cf       	rjmp	.-66     	; 0x7fb2 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
    7ff4:	df cf       	rjmp	.-66     	; 0x7fb4 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
    7ff6:	df cf       	rjmp	.-66     	; 0x7fb6 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

00007ff8 <BootloaderAPI_Signatures>:
    7ff8:	00 70       	andi	r16, 0x00	; 0
    7ffa:	00 00       	nop
    7ffc:	00 df       	rcall	.-512    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1dc>
    7ffe:	fb dc       	rcall	.-1546   	; 0x79f6 <Endpoint_ClearStatusStage+0x28>
